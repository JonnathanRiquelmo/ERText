/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.unipampa.erdsl.erDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.unipampa.erdsl.erDsl.CardinalityType;
import org.xtext.unipampa.erdsl.erDsl.ErDslPackage;
import org.xtext.unipampa.erdsl.erDsl.RelationSide;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relation Side</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.unipampa.erdsl.erDsl.impl.RelationSideImpl#isMinimalCardinality <em>Minimal Cardinality</em>}</li>
 *   <li>{@link org.xtext.unipampa.erdsl.erDsl.impl.RelationSideImpl#getMaximumCardinality <em>Maximum Cardinality</em>}</li>
 *   <li>{@link org.xtext.unipampa.erdsl.erDsl.impl.RelationSideImpl#getTarget <em>Target</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationSideImpl extends MinimalEObjectImpl.Container implements RelationSide
{
  /**
   * The default value of the '{@link #isMinimalCardinality() <em>Minimal Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMinimalCardinality()
   * @generated
   * @ordered
   */
  protected static final boolean MINIMAL_CARDINALITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMinimalCardinality() <em>Minimal Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMinimalCardinality()
   * @generated
   * @ordered
   */
  protected boolean minimalCardinality = MINIMAL_CARDINALITY_EDEFAULT;

  /**
   * The default value of the '{@link #getMaximumCardinality() <em>Maximum Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaximumCardinality()
   * @generated
   * @ordered
   */
  protected static final CardinalityType MAXIMUM_CARDINALITY_EDEFAULT = CardinalityType.ONE;

  /**
   * The cached value of the '{@link #getMaximumCardinality() <em>Maximum Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaximumCardinality()
   * @generated
   * @ordered
   */
  protected CardinalityType maximumCardinality = MAXIMUM_CARDINALITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected EObject target;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationSideImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ErDslPackage.Literals.RELATION_SIDE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMinimalCardinality()
  {
    return minimalCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinimalCardinality(boolean newMinimalCardinality)
  {
    boolean oldMinimalCardinality = minimalCardinality;
    minimalCardinality = newMinimalCardinality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ErDslPackage.RELATION_SIDE__MINIMAL_CARDINALITY, oldMinimalCardinality, minimalCardinality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardinalityType getMaximumCardinality()
  {
    return maximumCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaximumCardinality(CardinalityType newMaximumCardinality)
  {
    CardinalityType oldMaximumCardinality = maximumCardinality;
    maximumCardinality = newMaximumCardinality == null ? MAXIMUM_CARDINALITY_EDEFAULT : newMaximumCardinality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ErDslPackage.RELATION_SIDE__MAXIMUM_CARDINALITY, oldMaximumCardinality, maximumCardinality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ErDslPackage.RELATION_SIDE__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(EObject newTarget)
  {
    EObject oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ErDslPackage.RELATION_SIDE__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ErDslPackage.RELATION_SIDE__MINIMAL_CARDINALITY:
        return isMinimalCardinality();
      case ErDslPackage.RELATION_SIDE__MAXIMUM_CARDINALITY:
        return getMaximumCardinality();
      case ErDslPackage.RELATION_SIDE__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ErDslPackage.RELATION_SIDE__MINIMAL_CARDINALITY:
        setMinimalCardinality((Boolean)newValue);
        return;
      case ErDslPackage.RELATION_SIDE__MAXIMUM_CARDINALITY:
        setMaximumCardinality((CardinalityType)newValue);
        return;
      case ErDslPackage.RELATION_SIDE__TARGET:
        setTarget((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ErDslPackage.RELATION_SIDE__MINIMAL_CARDINALITY:
        setMinimalCardinality(MINIMAL_CARDINALITY_EDEFAULT);
        return;
      case ErDslPackage.RELATION_SIDE__MAXIMUM_CARDINALITY:
        setMaximumCardinality(MAXIMUM_CARDINALITY_EDEFAULT);
        return;
      case ErDslPackage.RELATION_SIDE__TARGET:
        setTarget((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ErDslPackage.RELATION_SIDE__MINIMAL_CARDINALITY:
        return minimalCardinality != MINIMAL_CARDINALITY_EDEFAULT;
      case ErDslPackage.RELATION_SIDE__MAXIMUM_CARDINALITY:
        return maximumCardinality != MAXIMUM_CARDINALITY_EDEFAULT;
      case ErDslPackage.RELATION_SIDE__TARGET:
        return target != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (minimalCardinality: ");
    result.append(minimalCardinality);
    result.append(", maximumCardinality: ");
    result.append(maximumCardinality);
    result.append(')');
    return result.toString();
  }

} //RelationSideImpl
