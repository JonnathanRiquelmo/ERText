/*
 * generated by Xtext 2.17.1
 */
package org.xtext.unipampa.erdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ErDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ERModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.ERModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainDomainParserRuleCall_0_0 = (RuleCall)cDomainAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEntitiesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0 = (RuleCall)cEntitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRelationshipsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRelationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRelationsRelationParserRuleCall_6_0 = (RuleCall)cRelationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ERModel:
		//	domain=Domain ';'
		//	'Entities{' entities+=Entity+ '};' 'Relationships{' relations+=Relation* '};';
		@Override public ParserRule getRule() { return rule; }
		
		//domain=Domain ';' 'Entities{' entities+=Entity+ '};' 'Relationships{' relations+=Relation* '};'
		public Group getGroup() { return cGroup; }
		
		//domain=Domain
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }
		
		//Domain
		public RuleCall getDomainDomainParserRuleCall_0_0() { return cDomainDomainParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//'Entities{'
		public Keyword getEntitiesKeyword_2() { return cEntitiesKeyword_2; }
		
		//entities+=Entity+
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0() { return cEntitiesEntityParserRuleCall_3_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_4() { return cRightCurlyBracketSemicolonKeyword_4; }
		
		//'Relationships{'
		public Keyword getRelationshipsKeyword_5() { return cRelationshipsKeyword_5; }
		
		//relations+=Relation*
		public Assignment getRelationsAssignment_6() { return cRelationsAssignment_6; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_6_0() { return cRelationsRelationParserRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Domain:
		//	'Domain' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cIsKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsKeyIsIdentifierKeyword_3_0 = (Keyword)cIsKeyAssignment_3.eContents().get(0);
		
		//Attribute:
		//	name=ID ':' type=DataType isKey?='isIdentifier'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=DataType isKey?='isIdentifier'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
		
		//isKey?='isIdentifier'?
		public Assignment getIsKeyAssignment_3() { return cIsKeyAssignment_3; }
		
		//'isIdentifier'
		public Keyword getIsKeyIsIdentifierKeyword_3_0() { return cIsKeyIsIdentifierKeyword_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIs_aKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIsAAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cIsAEntityCrossReference_1_1_0 = (CrossReference)cIsAAssignment_1_1.eContents().get(0);
		private final RuleCall cIsAEntityIDTerminalRuleCall_1_1_0_1 = (RuleCall)cIsAEntityCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_2_1_0 = (RuleCall)cAttributesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Entity:
		//	name=ID ('is_a' isA+=[Entity])* ('{' attributes+=Attribute (',' attributes+=Attribute)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('is_a' isA+=[Entity])* ('{' attributes+=Attribute (',' attributes+=Attribute)* '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('is_a' isA+=[Entity])*
		public Group getGroup_1() { return cGroup_1; }
		
		//'is_a'
		public Keyword getIs_aKeyword_1_0() { return cIs_aKeyword_1_0; }
		
		//isA+=[Entity]
		public Assignment getIsAAssignment_1_1() { return cIsAAssignment_1_1; }
		
		//[Entity]
		public CrossReference getIsAEntityCrossReference_1_1_0() { return cIsAEntityCrossReference_1_1_0; }
		
		//ID
		public RuleCall getIsAEntityIDTerminalRuleCall_1_1_0_1() { return cIsAEntityIDTerminalRuleCall_1_1_0_1; }
		
		//('{' attributes+=Attribute (',' attributes+=Attribute)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0() { return cAttributesAttributeParserRuleCall_2_1_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_2_1() { return cAttributesAssignment_2_2_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_2_1_0() { return cAttributesAttributeParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftEndingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftEndingRelationSideParserRuleCall_1_1_0 = (RuleCall)cLeftEndingAssignment_1_1.eContents().get(0);
		private final Keyword cIs_Related_WithKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightEndingAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightEndingRelationSideParserRuleCall_1_3_0 = (RuleCall)cRightEndingAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_2_1_0 = (RuleCall)cAttributesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Relation:
		//	name=ID? ('[' leftEnding=RelationSide 'is_Related_With' rightEnding=RelationSide ']') ('{'
		//	attributes+=Attribute (',' attributes+=Attribute)* '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID? ('[' leftEnding=RelationSide 'is_Related_With' rightEnding=RelationSide ']') ('{' attributes+=Attribute (','
		//attributes+=Attribute)* '}')*
		public Group getGroup() { return cGroup; }
		
		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'[' leftEnding=RelationSide 'is_Related_With' rightEnding=RelationSide ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//leftEnding=RelationSide
		public Assignment getLeftEndingAssignment_1_1() { return cLeftEndingAssignment_1_1; }
		
		//RelationSide
		public RuleCall getLeftEndingRelationSideParserRuleCall_1_1_0() { return cLeftEndingRelationSideParserRuleCall_1_1_0; }
		
		//'is_Related_With'
		public Keyword getIs_Related_WithKeyword_1_2() { return cIs_Related_WithKeyword_1_2; }
		
		//rightEnding=RelationSide
		public Assignment getRightEndingAssignment_1_3() { return cRightEndingAssignment_1_3; }
		
		//RelationSide
		public RuleCall getRightEndingRelationSideParserRuleCall_1_3_0() { return cRightEndingRelationSideParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//('{' attributes+=Attribute (',' attributes+=Attribute)* '}')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0() { return cAttributesAttributeParserRuleCall_2_1_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_2_1() { return cAttributesAssignment_2_2_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_2_1_0() { return cAttributesAttributeParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}
	public class RelationSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.RelationSide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinimalCardinalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMinimalCardinalityZeroKeyword_0_0 = (Keyword)cMinimalCardinalityAssignment_0.eContents().get(0);
		private final Assignment cMaximumCardinalityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaximumCardinalityCardinalityTypeEnumRuleCall_1_0 = (RuleCall)cMaximumCardinalityAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEntityCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEntityIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEntityCrossReference_2_0.eContents().get(1);
		
		//RelationSide:
		//	minimalCardinality?='zero'? maximumCardinality=CardinalityType target=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//minimalCardinality?='zero'? maximumCardinality=CardinalityType target=[Entity]
		public Group getGroup() { return cGroup; }
		
		//minimalCardinality?='zero'?
		public Assignment getMinimalCardinalityAssignment_0() { return cMinimalCardinalityAssignment_0; }
		
		//'zero'
		public Keyword getMinimalCardinalityZeroKeyword_0_0() { return cMinimalCardinalityZeroKeyword_0_0; }
		
		//maximumCardinality=CardinalityType
		public Assignment getMaximumCardinalityAssignment_1() { return cMaximumCardinalityAssignment_1; }
		
		//CardinalityType
		public RuleCall getMaximumCardinalityCardinalityTypeEnumRuleCall_1_0() { return cMaximumCardinalityCardinalityTypeEnumRuleCall_1_0; }
		
		//target=[Entity]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[Entity]
		public CrossReference getTargetEntityCrossReference_2_0() { return cTargetEntityCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEntityIDTerminalRuleCall_2_0_1() { return cTargetEntityIDTerminalRuleCall_2_0_1; }
	}
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTIntKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOUBLEDoubleKeyword_1_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMONEYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMONEYMoneyKeyword_2_0 = (Keyword)cMONEYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTRINGStringKeyword_3_0 = (Keyword)cSTRINGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBOOLEANBooleanKeyword_4_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDATETIMEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDATETIMEDatetimeKeyword_5_0 = (Keyword)cDATETIMEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBLOBEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBLOBFileKeyword_6_0 = (Keyword)cBLOBEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum DataType:
		//	INT='int' | DOUBLE='double' | MONEY='money' | STRING='string' | BOOLEAN='boolean' | DATETIME='datetime' | BLOB='file';
		public EnumRule getRule() { return rule; }
		
		//INT='int' | DOUBLE='double' | MONEY='money' | STRING='string' | BOOLEAN='boolean' | DATETIME='datetime' | BLOB='file'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getINTIntKeyword_0_0() { return cINTIntKeyword_0_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_1() { return cDOUBLEEnumLiteralDeclaration_1; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_1_0() { return cDOUBLEDoubleKeyword_1_0; }
		
		//MONEY='money'
		public EnumLiteralDeclaration getMONEYEnumLiteralDeclaration_2() { return cMONEYEnumLiteralDeclaration_2; }
		
		//'money'
		public Keyword getMONEYMoneyKeyword_2_0() { return cMONEYMoneyKeyword_2_0; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_3() { return cSTRINGEnumLiteralDeclaration_3; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_3_0() { return cSTRINGStringKeyword_3_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_4() { return cBOOLEANEnumLiteralDeclaration_4; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_4_0() { return cBOOLEANBooleanKeyword_4_0; }
		
		//DATETIME='datetime'
		public EnumLiteralDeclaration getDATETIMEEnumLiteralDeclaration_5() { return cDATETIMEEnumLiteralDeclaration_5; }
		
		//'datetime'
		public Keyword getDATETIMEDatetimeKeyword_5_0() { return cDATETIMEDatetimeKeyword_5_0; }
		
		//BLOB='file'
		public EnumLiteralDeclaration getBLOBEnumLiteralDeclaration_6() { return cBLOBEnumLiteralDeclaration_6; }
		
		//'file'
		public Keyword getBLOBFileKeyword_6_0() { return cBLOBFileKeyword_6_0; }
	}
	public class CardinalityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unipampa.erdsl.ErDsl.CardinalityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManyManyKeyword_1_0 = (Keyword)cManyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CardinalityType:
		//	One='one' | Many='many';
		public EnumRule getRule() { return rule; }
		
		//One='one' | Many='many'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//One='one'
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//'one'
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//Many='many'
		public EnumLiteralDeclaration getManyEnumLiteralDeclaration_1() { return cManyEnumLiteralDeclaration_1; }
		
		//'many'
		public Keyword getManyManyKeyword_1_0() { return cManyManyKeyword_1_0; }
	}
	
	private final ERModelElements pERModel;
	private final DomainElements pDomain;
	private final AttributeElements pAttribute;
	private final DataTypeElements eDataType;
	private final EntityElements pEntity;
	private final RelationElements pRelation;
	private final RelationSideElements pRelationSide;
	private final CardinalityTypeElements eCardinalityType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ErDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pERModel = new ERModelElements();
		this.pDomain = new DomainElements();
		this.pAttribute = new AttributeElements();
		this.eDataType = new DataTypeElements();
		this.pEntity = new EntityElements();
		this.pRelation = new RelationElements();
		this.pRelationSide = new RelationSideElements();
		this.eCardinalityType = new CardinalityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.unipampa.erdsl.ErDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ERModel:
	//	domain=Domain ';'
	//	'Entities{' entities+=Entity+ '};' 'Relationships{' relations+=Relation* '};';
	public ERModelElements getERModelAccess() {
		return pERModel;
	}
	
	public ParserRule getERModelRule() {
		return getERModelAccess().getRule();
	}
	
	//Domain:
	//	'Domain' name=ID;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ':' type=DataType isKey?='isIdentifier'?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum DataType:
	//	INT='int' | DOUBLE='double' | MONEY='money' | STRING='string' | BOOLEAN='boolean' | DATETIME='datetime' | BLOB='file';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Entity:
	//	name=ID ('is_a' isA+=[Entity])* ('{' attributes+=Attribute (',' attributes+=Attribute)* '}')?;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Relation:
	//	name=ID? ('[' leftEnding=RelationSide 'is_Related_With' rightEnding=RelationSide ']') ('{'
	//	attributes+=Attribute (',' attributes+=Attribute)* '}')*;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelationSide:
	//	minimalCardinality?='zero'? maximumCardinality=CardinalityType target=[Entity];
	public RelationSideElements getRelationSideAccess() {
		return pRelationSide;
	}
	
	public ParserRule getRelationSideRule() {
		return getRelationSideAccess().getRule();
	}
	
	//enum CardinalityType:
	//	One='one' | Many='many';
	public CardinalityTypeElements getCardinalityTypeAccess() {
		return eCardinalityType;
	}
	
	public EnumRule getCardinalityTypeRule() {
		return getCardinalityTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
