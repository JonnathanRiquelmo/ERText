/*
 * generated by Xtext 2.17.0
 */
package org.xtext.unipampa.erdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.unipampa.erdsl.erDsl.ERModel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ErDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
val modeloER = resource.contents.get(0) as ERModel
		fsa.generateFile('LogicalSchema.txt', 
			'''
DOMINIO «modeloER.domain.name»

ENTIDADES
			
«FOR entity : modeloER.entities SEPARATOR ')\n'»
	«entity.name» «FOR parent : entity.is»«IF entity.is !== null» isA«ENDIF»«parent.name»«ENDFOR»(«FOR attribute : entity.attributes SEPARATOR ', '»«attribute.name» «attribute.type»«IF attribute.isIsKey» PK «ENDIF»«ENDFOR»
«««############################################################################################################################################
«««############################################################################################################################################
«««			AQUI SE RESOLVEM OS RELACIONAMENTOS BINÁRIOS UM PARA MUITOS E MUITOS PARA UM
«««############################################################################################################################################
«««############################################################################################################################################
	«FOR relationAux : modeloER.relations»
		«IF (relationAux.leftEnding.cardinality == "(0:1)" || relationAux.leftEnding.cardinality == "(1:1)") && (relationAux.rightEnding.cardinality == "(0:N)" || relationAux.rightEnding.cardinality == "(1:N)")»
			«FOR entityAux : modeloER.entities»
				«IF (entityAux.name.equalsIgnoreCase(relationAux.rightEnding.target.toString)) && (entityAux.name.equalsIgnoreCase(entity.name.toString))»
					«FOR entityMapeada : modeloER.entities»
						«IF (entityMapeada.name.equalsIgnoreCase(relationAux.leftEnding.target.toString))»
							«FOR attributeAux : entityMapeada.attributes»«IF attributeAux.isIsKey», «attributeAux.name»_FK«ENDIF»«ENDFOR»
							«IF relationAux.attributes !== null»«FOR relationMapeada : relationAux.attributes», «relationMapeada.name» «relationMapeada.type»«ENDFOR»«ENDIF»
						«ENDIF»
					«ENDFOR»
				«ENDIF»
			«ENDFOR»
		«ENDIF»
		«IF (relationAux.leftEnding.cardinality == "(0:N)" || relationAux.leftEnding.cardinality == "(1:N)") && (relationAux.rightEnding.cardinality == "(0:1)" || relationAux.rightEnding.cardinality == "(1:1)")»
			«FOR entityAux : modeloER.entities»
				«IF (entityAux.name.equalsIgnoreCase(relationAux.leftEnding.target.toString)) && (entityAux.name.equalsIgnoreCase(entity.name.toString))»
					«FOR entityMapeada : modeloER.entities»
						«IF (entityMapeada.name.equalsIgnoreCase(relationAux.rightEnding.target.toString))»
							«FOR attributeAux : entityMapeada.attributes»«IF attributeAux.isIsKey», «attributeAux.name»_FK«ENDIF»«ENDFOR»
							«IF relationAux.attributes !== null»«FOR relationMapeada : relationAux.attributes», «relationMapeada.name» «relationMapeada.type»«ENDFOR»«ENDIF»
						«ENDIF»
					«ENDFOR»
				«ENDIF»
			«ENDFOR»
		«ENDIF»					
	«ENDFOR»
«ENDFOR»
«««############################################################################################################################################
«««############################################################################################################################################
«««			AQUI SE RESOLVEM OS RELACIONAMENTOS BINÁRIOS MUITOS PARA MUITOS			
«««############################################################################################################################################
«««############################################################################################################################################
«FOR relationAux : modeloER.relations SEPARATOR ')\n' AFTER ';'»
	«IF (relationAux.leftEnding.cardinality == "(0:N)" || relationAux.leftEnding.cardinality == "(1:N)") && (relationAux.rightEnding.cardinality == "(0:N)" || relationAux.rightEnding.cardinality == "(1:N)")»
		«IF (relationAux.name == '' || relationAux.name === null)»
			«relationAux.leftEnding.target»«relationAux.rightEnding.target» (
			«FOR entityAux : modeloER.entities»
				«IF entityAux.name.equalsIgnoreCase(relationAux.leftEnding.target.toString)»
					«FOR atributoAux : entityAux.attributes»
						«IF atributoAux.isIsKey»
							«atributoAux.name»_FK «atributoAux.type»
						«ENDIF»
					«ENDFOR»
				«ENDIF»
				«IF entityAux.name.equalsIgnoreCase(relationAux.rightEnding.target.toString)»
					«FOR atributoAux : entityAux.attributes»
						«IF atributoAux.isIsKey»
							«atributoAux.name»_FK «atributoAux.type»
						«ENDIF»
					«ENDFOR»
				«ENDIF»							
			«ENDFOR»
		«ELSE»
			«relationAux.name» (
			«FOR entityAux : modeloER.entities»
				«IF entityAux.name.equalsIgnoreCase(relationAux.leftEnding.target.toString)»
					«FOR atributoAux : entityAux.attributes»
						«IF atributoAux.isIsKey»
							«atributoAux.name»_FK «atributoAux.type»
						«ENDIF»
					«ENDFOR»
				«ENDIF»
				«IF entityAux.name.equalsIgnoreCase(relationAux.rightEnding.target.toString)»
					«FOR atributoAux : entityAux.attributes»
						«IF atributoAux.isIsKey»
							«atributoAux.name»_FK «atributoAux.type»
						«ENDIF»
					«ENDFOR»
				«ENDIF»							
			«ENDFOR»
		«ENDIF»
		«IF (relationAux.attributes !== null) »
			«FOR atributoRelacaoMuitosParaMuitos : relationAux.attributes»
				«atributoRelacaoMuitosParaMuitos.name» «atributoRelacaoMuitosParaMuitos.type» «IF atributoRelacaoMuitosParaMuitos.isIsKey» PK «ENDIF»	
			«ENDFOR»
		«ENDIF»
	«ENDIF»
«ENDFOR»
«««############################################################################################################################################
«««############################################################################################################################################
«««			MAPEAMENTO DOS RELACIONAMENTOS
«««############################################################################################################################################
«««############################################################################################################################################
<---------------------------------------------------------------------->
«FOR relation : modeloER.relations»
««« MAPEAMENTO DE RELAÇÃO 0:1 ou 1:1 PARA 0:N ou 1:N
	«IF (relation.leftEnding.cardinality == "(0:1)" || relation.leftEnding.cardinality == "(1:1)") && (relation.rightEnding.cardinality == "(0:N)" || relation.rightEnding.cardinality == "(1:N)")»		
	«FOR entity : modeloER.entities»
		«IF entity.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
			«FOR attribute : entity.attributes»
«IF attribute.isIsKey»Mapeamento de Relação Binária 0:1|1:1 com 0:N|1:N
Atributo "«attribute.name»_FK" EM "«relation.rightEnding.target.toString»" REFERENCIA "«relation.leftEnding.target.toString»"«ENDIF»
			«ENDFOR»	
		«ENDIF»
	«ENDFOR»
<---------------------------------------------------------------------->
	«ENDIF»
««« MAPEAMENTO DE RELAÇÃO 0:N ou 1:N PARA 0:1 ou 1:1 
	«IF (relation.rightEnding.cardinality == "(0:1)" || relation.rightEnding.cardinality == "(1:1)") && (relation.leftEnding.cardinality == "(0:N)" || relation.leftEnding.cardinality == "(1:N)")»		
	«FOR entity : modeloER.entities»
		«IF entity.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
			«FOR attribute : entity.attributes»
«IF attribute.isIsKey»Mapeamento de Relação Binária 0:1|1:1 com 0:N|1:N
Atributo "«attribute.name»_FK" EM "«relation.leftEnding.target.toString»" REFERENCIA "«relation.rightEnding.target.toString»"«ENDIF»
			«ENDFOR»	
		«ENDIF»
	«ENDFOR»
<---------------------------------------------------------------------->
	«ENDIF»	
««« MAPEAMENTO DE ENTIDADE DA DIREITA EM RELACIONAMENTO MUITOS PARA MUITOS COM E SEM IDENTIFICADOR NA RELAÇÃO
	«IF (relation.rightEnding.cardinality == "(0:N)" || relation.rightEnding.cardinality == "(1:N)") && (relation.leftEnding.cardinality == "(0:N)" || relation.leftEnding.cardinality == "(1:N)")»		
	«FOR entity : modeloER.entities»
		«IF entity.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
			«FOR attribute : entity.attributes»
«IF attribute.isIsKey»Mapeamento de Relação Binária 0:N|1:N com 0:N|1:N
Atributo "«attribute.name»_FK" EM «IF (relation.name !== null && relation.name !== '')»"«relation.name»" REFERENCIA "«relation.leftEnding.target.toString»"
«ELSE»"«relation.leftEnding.target.toString»«relation.rightEnding.target.toString»" REFERENCIA "«relation.leftEnding.target.toString»"
		«ENDIF»
		«ENDIF»
	«ENDFOR»	
<---------------------------------------------------------------------->
	«ENDIF»
««« MAPEAMENTO DE ENTIDADE DA ESQUERDA EM RELACIONAMENTO MUITOS PARA MUITOS COM E SEM IDENTIFICADOR NA RELAÇÃO
	«IF entity.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
	«FOR attribute : entity.attributes»
«IF attribute.isIsKey»Mapeamento de Relação Binária 0:N|1:N com 0:N|1:N
Atributo "«attribute.name»_FK" EM «IF (relation.name !== null && relation.name !== '')»"«relation.name»" REFERENCIA "«relation.rightEnding.target.toString»"
«ELSE»"«relation.leftEnding.target.toString»«relation.rightEnding.target.toString»" REFERENCIA "«relation.rightEnding.target.toString»"
		«ENDIF»
		«ENDIF»
	«ENDFOR»	
	«ENDIF»
«ENDFOR»
<---------------------------------------------------------------------->	
«ENDIF»
«ENDFOR»
						

««««FOR relation : modeloER.relations»
«««RELAÇÃO
««««relation.name»
««««relation.leftEnding.cardinality» «relation.leftEnding.target» relates «relation.rightEnding.target» «relation.rightEnding.cardinality»
«««	«FOR atributosRelacao : relation.attributes»
«««		«atributosRelacao.name» «atributosRelacao.type»
«««	«ENDFOR»
««««ENDFOR»
			'''
		)
		
	}
}
