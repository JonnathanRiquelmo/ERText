/**
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.scoping;

import com.google.common.base.Objects;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ErDslScopeProvider extends AbstractErDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof Entity)) {
      if (true) {
        String _string = ((Entity)context).getName().toString();
        String _plus = ("ENTIDADE\n CONTEXTO = " + _string);
        InputOutput.<String>println(_plus);
        String _string_1 = reference.getName().toString();
        String _plus_1 = (" REFERENCIA = " + _string_1);
        InputOutput.<String>println(_plus_1);
      }
      EObject _eContainer = ((Entity)context).eContainer();
      final Function1<Entity, Boolean> _function = (Entity x) -> {
        return Boolean.valueOf((!Objects.equal(x, context)));
      };
      return Scopes.scopeFor(IterableExtensions.<Entity>filter(((ERModel) _eContainer).getEntities(), _function));
    } else {
      if ((context instanceof Relation)) {
        if (true) {
          String _string_2 = ((Relation)context).getName().toString();
          String _plus_2 = ("RELAÇÃO\n CONTEXTO = " + _string_2);
          InputOutput.<String>println(_plus_2);
          String _string_3 = reference.getName().toString();
          String _plus_3 = (" REFERENCIA = " + _string_3);
          InputOutput.<String>println(_plus_3);
        }
        EObject _eContainer_1 = ((Relation)context).eContainer();
        IScope _scopeFor = Scopes.scopeFor(((ERModel) _eContainer_1).getEntities());
        String _plus_4 = ("ENTIDADES: " + _scopeFor);
        InputOutput.<String>println(_plus_4);
        EObject _eContainer_2 = ((Relation)context).eContainer();
        IScope _scopeFor_1 = Scopes.scopeFor(((ERModel) _eContainer_2).getRelations());
        String _plus_5 = ("RELAÇÕES: " + _scopeFor_1);
        InputOutput.<String>println(_plus_5);
      }
    }
    return super.getScope(context, reference);
  }
}
