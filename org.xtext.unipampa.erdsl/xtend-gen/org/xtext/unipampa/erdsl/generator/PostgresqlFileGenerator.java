package org.xtext.unipampa.erdsl.generator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.unipampa.erdsl.erDsl.Attribute;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

/**
 * This class serves as a template for the automated generation of a
 * physical schema (<b>PostgreSQL</b>) which is saved as a <b>.sql</b> file in the
 * <b>src-gen</b> folder within the ERtext project.
 * 
 * @author Unipampa/LESSE </br> - Jonnathan Riquelmo: Initial contribution.
 * @version 0.4
 * @since   0.1 (2019/2)
 */
@SuppressWarnings("all")
public class PostgresqlFileGenerator extends AbstractGenerator {
  private ArrayList<String> pkList = new ArrayList<String>();
  
  private ArrayList<Entity> primaryKeys = new ArrayList<Entity>();
  
  private ArrayList<Entity> inheritedPrimaryKeys = new ArrayList<Entity>();
  
  private ArrayList<Object> primaryKeys_NtoN = new ArrayList<Object>();
  
  private ArrayList<Object> primaryKeys_Ternary = new ArrayList<Object>();
  
  private HashMap<String, ArrayList> mapTernary = new HashMap<String, ArrayList>();
  
  private StringBuilder sc_AlterTbl_1to1 = new StringBuilder();
  
  private StringBuilder sc_AlterTbl_1toN = new StringBuilder();
  
  private StringBuilder sc_AlterTbl_NtoN = new StringBuilder();
  
  private StringBuilder sc_AlterTbl_Ternary = new StringBuilder();
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = input.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    try {
      String _lowerCase = modeloER.getDomain().getName().toLowerCase();
      String _plus = (_lowerCase + "_Postgre.sql");
      fsa.generateFile(_plus, this.pgsql_CreateModel(modeloER));
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        InputOutput.<String>println(((List<StackTraceElement>)Conversions.doWrapArray(e.getStackTrace())).toString());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  private CharSequence pgsql_CreateModel(final ERModel modeloER) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("-- PostGreSQL Template generated by ERtext");
    _builder.newLine();
    _builder.newLine();
    CharSequence _pgsql_DomainMapper = this.pgsql_DomainMapper(modeloER);
    _builder.append(_pgsql_DomainMapper);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    CharSequence _pgsql_SimpleEntitiesMapper = this.pgsql_SimpleEntitiesMapper(modeloER);
    _builder.append(_pgsql_SimpleEntitiesMapper);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _pgsql_NToN_DerivedEntitiesMapper = this.pgsql_NToN_DerivedEntitiesMapper(modeloER);
    _builder.append(_pgsql_NToN_DerivedEntitiesMapper);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _pgsql_TernaryEntitiesMapper = this.pgsql_TernaryEntitiesMapper(modeloER);
    _builder.append(_pgsql_TernaryEntitiesMapper);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _pgsql_GeneralizationRefMapper = this.pgsql_GeneralizationRefMapper(modeloER);
    _builder.append(_pgsql_GeneralizationRefMapper);
    _builder.newLineIfNotEmpty();
    String _string = this.sc_AlterTbl_1to1.toString();
    _builder.append(_string);
    _builder.newLineIfNotEmpty();
    this.sc_AlterTbl_1to1.setLength(0);
    _builder.newLineIfNotEmpty();
    String _string_1 = this.sc_AlterTbl_1toN.toString();
    _builder.append(_string_1);
    _builder.newLineIfNotEmpty();
    this.sc_AlterTbl_1toN.setLength(0);
    _builder.newLineIfNotEmpty();
    String _string_2 = this.sc_AlterTbl_NtoN.toString();
    _builder.append(_string_2);
    _builder.newLineIfNotEmpty();
    this.sc_AlterTbl_NtoN.setLength(0);
    _builder.newLineIfNotEmpty();
    String _string_3 = this.sc_AlterTbl_Ternary.toString();
    _builder.append(_string_3);
    _builder.newLineIfNotEmpty();
    this.sc_AlterTbl_Ternary.setLength(0);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence pgsql_DomainMapper(final ERModel m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("-- Database: ");
    String _upperCase = m.getDomain().getName().toString().toUpperCase();
    _builder.append(_upperCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("-- CREATE DATABASE ");
    String _upperCase_1 = m.getDomain().getName().toString().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("--     WITH OWNER = postgres");
    _builder.newLine();
    _builder.append("--     ENCODING = \'UTF8\'");
    _builder.newLine();
    _builder.append("--     TABLESPACE = pg_default");
    _builder.newLine();
    _builder.append("--     CONNECTION LIMIT = -1;");
    _builder.newLine();
    _builder.append("-- DROP DATABASE ");
    String _upperCase_2 = m.getDomain().getName().toString().toUpperCase();
    _builder.append(_upperCase_2);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("-- DROP TABLE IF EXISTS ");
    _builder.newLine();
    _builder.append("-- ");
    {
      EList<Entity> _entities = m.getEntities();
      boolean _hasElements = false;
      for(final Entity e : _entities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        _builder.append("public.\"");
        String _lowerCase = e.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append("\"");
      }
    }
    {
      final Function1<Relation, Boolean> _function = (Relation it) -> {
        return Boolean.valueOf(((it.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || it.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (it.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || it.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))));
      };
      Iterable<Relation> _filter = IterableExtensions.<Relation>filter(m.getRelations(), _function);
      boolean _hasElements_1 = false;
      for(final Relation r : _filter) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
          _builder.append(", ");
        } else {
          _builder.appendImmediate(", ", "");
        }
        _builder.append("public.\"");
        String _lowerCase_1 = r.getName().toLowerCase();
        _builder.append(_lowerCase_1);
        _builder.append("\"");
      }
    }
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("-- CASCADE;");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence pgsql_SimpleEntitiesMapper(final ERModel m) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = m.getEntities();
      boolean _hasElements = false;
      for(final Entity entity : _entities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" \n);\n", "");
        }
        _builder.append("-- Table: ");
        String _upperCase = entity.getName().toUpperCase();
        _builder.append(_upperCase);
        _builder.newLineIfNotEmpty();
        {
          boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(entity.getGeneralization());
          boolean _not = (!_isNullOrEmpty);
          if (_not) {
            _builder.append("-- Generalization/Specialization ");
            String _upperCase_1 = entity.getGeneralization().toString().toUpperCase();
            _builder.append(_upperCase_1);
            _builder.append(" from table ");
            String _upperCase_2 = entity.getIs().toString().toUpperCase();
            _builder.append(_upperCase_2);
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("-- DROP TABLE ");
        String _upperCase_3 = entity.getName().toUpperCase();
        _builder.append(_upperCase_3);
        _builder.append(";\t");
        _builder.newLineIfNotEmpty();
        _builder.append("CREATE TABLE IF NOT EXISTS ");
        String _lowerCase = entity.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _pgsql_AttributesMapper = this.pgsql_AttributesMapper(m, entity);
        _builder.append(_pgsql_AttributesMapper, "\t");
        _builder.newLineIfNotEmpty();
      }
      if (_hasElements) {
        _builder.append(");\n");
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_AttributesMapper(final ERModel m, final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Entity _is = e.getIs();
      boolean _tripleNotEquals = (_is != null);
      if (_tripleNotEquals) {
        {
          final Function1<Attribute, Boolean> _function = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(e.getIs().getAttributes(), _function);
          for(final Attribute PKInherited : _filter) {
            CharSequence _pgsql_AttTypeChecker = this.pgsql_AttTypeChecker(PKInherited);
            _builder.append(_pgsql_AttTypeChecker);
            _builder.newLineIfNotEmpty();
          }
        }
        Object _xblockexpression = null;
        {
          this.inheritedPrimaryKeys.add(e.getIs());
          _xblockexpression = null;
        }
        _builder.append(_xblockexpression);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
        return Boolean.valueOf(it.isIsKey());
      };
      Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(e.getAttributes(), _function_1);
      for(final Attribute a : _filter_1) {
        CharSequence _pgsql_AttTypeChecker_1 = this.pgsql_AttTypeChecker(a);
        _builder.append(_pgsql_AttTypeChecker_1);
        _builder.newLineIfNotEmpty();
      }
    }
    Object _xblockexpression_1 = null;
    {
      this.primaryKeys.add(e);
      _xblockexpression_1 = null;
    }
    _builder.append(_xblockexpression_1);
    _builder.newLineIfNotEmpty();
    {
      final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
        boolean _isIsKey = it.isIsKey();
        return Boolean.valueOf((!_isIsKey));
      };
      Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(e.getAttributes(), _function_2);
      for(final Attribute a_1 : _filter_2) {
        CharSequence _pgsql_AttTypeChecker_2 = this.pgsql_AttTypeChecker(a_1);
        _builder.append(_pgsql_AttTypeChecker_2);
        _builder.newLineIfNotEmpty();
      }
    }
    CharSequence _pgsql_1To1_RefCheck = this.pgsql_1To1_RefCheck(m, e);
    _builder.append(_pgsql_1To1_RefCheck);
    _builder.newLineIfNotEmpty();
    CharSequence _pgsql_1ToN_RefCheck = this.pgsql_1ToN_RefCheck(m, e);
    _builder.append(_pgsql_1ToN_RefCheck);
    _builder.newLineIfNotEmpty();
    this.pgsql_MountPkList(this.primaryKeys, this.inheritedPrimaryKeys);
    _builder.newLineIfNotEmpty();
    _builder.append("CONSTRAINT pk_");
    String _lowerCase = e.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" PRIMARY KEY (");
    {
      boolean _hasElements = false;
      for(final String pks : this.pkList) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _lowerCase_1 = pks.toLowerCase();
        _builder.append(_lowerCase_1);
      }
    }
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    Object _xblockexpression_2 = null;
    {
      this.primaryKeys.clear();
      _xblockexpression_2 = null;
    }
    _builder.append(_xblockexpression_2);
    _builder.newLineIfNotEmpty();
    Object _xblockexpression_3 = null;
    {
      this.inheritedPrimaryKeys.clear();
      _xblockexpression_3 = null;
    }
    _builder.append(_xblockexpression_3);
    _builder.newLineIfNotEmpty();
    Object _xblockexpression_4 = null;
    {
      this.pkList.clear();
      _xblockexpression_4 = null;
    }
    _builder.append(_xblockexpression_4);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private void pgsql_MountPkList(final ArrayList<Entity> pks, final ArrayList<Entity> inheritedPks) {
    boolean _isEmpty = inheritedPks.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      for (final Entity e : inheritedPks) {
        final Function1<Attribute, Boolean> _function = (Attribute it) -> {
          return Boolean.valueOf(it.isIsKey());
        };
        Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(e.getAttributes(), _function);
        for (final Attribute a : _filter) {
          this.pkList.add(a.getName().toLowerCase());
        }
      }
    }
    boolean _isEmpty_1 = pks.isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      for (final Entity e_1 : pks) {
        final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
          return Boolean.valueOf(it.isIsKey());
        };
        Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(e_1.getAttributes(), _function_1);
        for (final Attribute a_1 : _filter_1) {
          this.pkList.add(a_1.getName().toLowerCase());
        }
      }
    }
  }
  
  private CharSequence pgsql_AttTypeChecker(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = a.getType().toString().equalsIgnoreCase("string");
      if (_equalsIgnoreCase) {
        String _lowerCase = a.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" VARCHAR (255) NOT NULL,");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equalsIgnoreCase_1 = a.getType().toString().equalsIgnoreCase("int");
        if (_equalsIgnoreCase_1) {
          String _lowerCase_1 = a.getName().toLowerCase();
          _builder.append(_lowerCase_1);
          _builder.append(" INTEGER NOT NULL,");
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equalsIgnoreCase_2 = a.getType().toString().equalsIgnoreCase("datetime");
          if (_equalsIgnoreCase_2) {
            String _lowerCase_2 = a.getName().toLowerCase();
            _builder.append(_lowerCase_2);
            _builder.append(" DATE NOT NULL,");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equalsIgnoreCase_3 = a.getType().toString().equalsIgnoreCase("money");
            if (_equalsIgnoreCase_3) {
              String _lowerCase_3 = a.getName().toLowerCase();
              _builder.append(_lowerCase_3);
              _builder.append(" NUMERIC NOT NULL,");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equalsIgnoreCase_4 = a.getType().toString().equalsIgnoreCase("double");
              if (_equalsIgnoreCase_4) {
                String _lowerCase_4 = a.getName().toLowerCase();
                _builder.append(_lowerCase_4);
                _builder.append(" REAL NOT NULL,");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equalsIgnoreCase_5 = a.getType().toString().equalsIgnoreCase("boolean");
                if (_equalsIgnoreCase_5) {
                  String _lowerCase_5 = a.getName().toLowerCase();
                  _builder.append(_lowerCase_5);
                  _builder.append(" BOOLEAN NOT NULL,");
                  _builder.newLineIfNotEmpty();
                } else {
                  boolean _equalsIgnoreCase_6 = a.getType().toString().equalsIgnoreCase("file");
                  if (_equalsIgnoreCase_6) {
                    String _lowerCase_6 = a.getName().toLowerCase();
                    _builder.append(_lowerCase_6);
                    _builder.append(" BYTEA NOT NULL,");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_AttTypeChecker_Unnamed(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = a.getType().toString().equalsIgnoreCase("string");
      if (_equalsIgnoreCase) {
        _builder.append(" VARCHAR (255) NOT NULL,");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equalsIgnoreCase_1 = a.getType().toString().equalsIgnoreCase("int");
        if (_equalsIgnoreCase_1) {
          _builder.append(" INTEGER NOT NULL,");
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equalsIgnoreCase_2 = a.getType().toString().equalsIgnoreCase("datetime");
          if (_equalsIgnoreCase_2) {
            _builder.append(" DATE NOT NULL,");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equalsIgnoreCase_3 = a.getType().toString().equalsIgnoreCase("money");
            if (_equalsIgnoreCase_3) {
              _builder.append(" NUMERIC NOT NULL,");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equalsIgnoreCase_4 = a.getType().toString().equalsIgnoreCase("double");
              if (_equalsIgnoreCase_4) {
                _builder.append(" REAL NOT NULL,");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equalsIgnoreCase_5 = a.getType().toString().equalsIgnoreCase("boolean");
                if (_equalsIgnoreCase_5) {
                  _builder.append(" BOOLEAN NOT NULL,");
                  _builder.newLineIfNotEmpty();
                } else {
                  boolean _equalsIgnoreCase_6 = a.getType().toString().equalsIgnoreCase("file");
                  if (_equalsIgnoreCase_6) {
                    _builder.append(" BYTEA NOT NULL,");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_1To1_RefCheck(final ERModel m, final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = m.getRelations();
      for(final Relation r : _relations) {
        {
          if (((((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (r.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || r.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) && (r.getLeftEnding().getTarget() instanceof Entity)) && (r.getRightEnding().getTarget() instanceof Entity))) {
            {
              boolean _equalsIgnoreCase = r.getRightEnding().getTarget().toString().equalsIgnoreCase(e.getName());
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = m.getEntities();
                  for(final Entity eAux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = r.getLeftEnding().getTarget().toString().equalsIgnoreCase(eAux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          boolean _equalsIgnoreCase_2 = e.getName().equalsIgnoreCase(eAux.getName());
                          if (_equalsIgnoreCase_2) {
                            {
                              Entity _is = e.getIs();
                              boolean _tripleNotEquals = (_is != null);
                              if (_tripleNotEquals) {
                                {
                                  final Function1<Attribute, Boolean> _function = (Attribute it) -> {
                                    return Boolean.valueOf(it.isIsKey());
                                  };
                                  Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(e.getIs().getAttributes(), _function);
                                  for(final Attribute a : _filter) {
                                    String _lowerCase = r.getName().toLowerCase();
                                    String _plus = (_lowerCase + "_");
                                    CharSequence _pgsql_AttTypeChecker = this.pgsql_AttTypeChecker(a);
                                    String _plus_1 = (_plus + _pgsql_AttTypeChecker);
                                    _builder.append(_plus_1);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                                Object _xblockexpression = null;
                                {
                                  this.sc_AlterTbl_1to1.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, e.getIs(), r, Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), "[1to1]"));
                                  _xblockexpression = null;
                                }
                                _builder.append(_xblockexpression);
                                _builder.newLineIfNotEmpty();
                              } else {
                                Entity _is_1 = e.getIs();
                                boolean _tripleEquals = (_is_1 == null);
                                if (_tripleEquals) {
                                  {
                                    final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
                                      return Boolean.valueOf(it.isIsKey());
                                    };
                                    Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(e.getAttributes(), _function_1);
                                    for(final Attribute a_1 : _filter_1) {
                                      String _lowerCase_1 = r.getName().toLowerCase();
                                      String _plus_2 = (_lowerCase_1 + "_");
                                      CharSequence _pgsql_AttTypeChecker_1 = this.pgsql_AttTypeChecker(a_1);
                                      String _plus_3 = (_plus_2 + _pgsql_AttTypeChecker_1);
                                      _builder.append(_plus_3);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  Object _xblockexpression_1 = null;
                                  {
                                    this.sc_AlterTbl_1to1.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux, r, Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), "[1to1]"));
                                    _xblockexpression_1 = null;
                                  }
                                  _builder.append(_xblockexpression_1);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          } else {
                            boolean _equalsIgnoreCase_3 = e.getName().equalsIgnoreCase(eAux.getName());
                            boolean _not = (!_equalsIgnoreCase_3);
                            if (_not) {
                              {
                                Entity _is_2 = eAux.getIs();
                                boolean _tripleNotEquals_1 = (_is_2 != null);
                                if (_tripleNotEquals_1) {
                                  {
                                    final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
                                      return Boolean.valueOf(it.isIsKey());
                                    };
                                    Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(eAux.getIs().getAttributes(), _function_2);
                                    for(final Attribute a_2 : _filter_2) {
                                      String _lowerCase_2 = r.getName().toLowerCase();
                                      String _plus_4 = (_lowerCase_2 + "_");
                                      CharSequence _pgsql_AttTypeChecker_2 = this.pgsql_AttTypeChecker(a_2);
                                      String _plus_5 = (_plus_4 + _pgsql_AttTypeChecker_2);
                                      _builder.append(_plus_5);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  Object _xblockexpression_2 = null;
                                  {
                                    this.sc_AlterTbl_1to1.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), "[1to1]"));
                                    _xblockexpression_2 = null;
                                  }
                                  _builder.append(_xblockexpression_2);
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  Entity _is_3 = eAux.getIs();
                                  boolean _tripleEquals_1 = (_is_3 == null);
                                  if (_tripleEquals_1) {
                                    {
                                      final Function1<Attribute, Boolean> _function_3 = (Attribute it) -> {
                                        return Boolean.valueOf(it.isIsKey());
                                      };
                                      Iterable<Attribute> _filter_3 = IterableExtensions.<Attribute>filter(eAux.getAttributes(), _function_3);
                                      for(final Attribute a_3 : _filter_3) {
                                        String _lowerCase_3 = r.getName().toLowerCase();
                                        String _plus_6 = (_lowerCase_3 + "_");
                                        CharSequence _pgsql_AttTypeChecker_3 = this.pgsql_AttTypeChecker(a_3);
                                        String _plus_7 = (_plus_6 + _pgsql_AttTypeChecker_3);
                                        _builder.append(_plus_7);
                                        _builder.newLineIfNotEmpty();
                                      }
                                    }
                                    Object _xblockexpression_3 = null;
                                    {
                                      this.sc_AlterTbl_1to1.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), "[1to1]"));
                                      _xblockexpression_3 = null;
                                    }
                                    _builder.append(_xblockexpression_3);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_1ToN_RefCheck(final ERModel m, final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Relation, Boolean> _function = (Relation it) -> {
        return Boolean.valueOf(((((it.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || it.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (it.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || it.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) && (it.getLeftEnding().getTarget() instanceof Entity)) && (it.getRightEnding().getTarget() instanceof Entity)));
      };
      Iterable<Relation> _filter = IterableExtensions.<Relation>filter(m.getRelations(), _function);
      for(final Relation r : _filter) {
        {
          boolean _equalsIgnoreCase = r.getRightEnding().getTarget().toString().equalsIgnoreCase(e.getName());
          if (_equalsIgnoreCase) {
            {
              EList<Entity> _entities = m.getEntities();
              for(final Entity eAux : _entities) {
                {
                  boolean _equalsIgnoreCase_1 = r.getLeftEnding().getTarget().toString().equalsIgnoreCase(eAux.getName());
                  if (_equalsIgnoreCase_1) {
                    {
                      boolean _equalsIgnoreCase_2 = e.getName().equalsIgnoreCase(eAux.getName());
                      if (_equalsIgnoreCase_2) {
                        {
                          Entity _is = e.getIs();
                          boolean _tripleNotEquals = (_is != null);
                          if (_tripleNotEquals) {
                            {
                              final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
                                return Boolean.valueOf(it.isIsKey());
                              };
                              Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(e.getIs().getAttributes(), _function_1);
                              for(final Attribute a : _filter_1) {
                                String _lowerCase = r.getName().toLowerCase();
                                String _plus = (_lowerCase + "_");
                                CharSequence _pgsql_AttTypeChecker = this.pgsql_AttTypeChecker(a);
                                String _plus_1 = (_plus + _pgsql_AttTypeChecker);
                                _builder.append(_plus_1);
                                _builder.newLineIfNotEmpty();
                              }
                            }
                            Object _xblockexpression = null;
                            {
                              this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, e.getIs(), r, Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), "[1toN]"));
                              _xblockexpression = null;
                            }
                            _builder.append(_xblockexpression);
                            _builder.newLineIfNotEmpty();
                          } else {
                            Entity _is_1 = e.getIs();
                            boolean _tripleEquals = (_is_1 == null);
                            if (_tripleEquals) {
                              {
                                final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
                                  return Boolean.valueOf(it.isIsKey());
                                };
                                Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(e.getAttributes(), _function_2);
                                for(final Attribute a_1 : _filter_2) {
                                  String _lowerCase_1 = r.getName().toLowerCase();
                                  String _plus_2 = (_lowerCase_1 + "_");
                                  CharSequence _pgsql_AttTypeChecker_1 = this.pgsql_AttTypeChecker(a_1);
                                  String _plus_3 = (_plus_2 + _pgsql_AttTypeChecker_1);
                                  _builder.append(_plus_3);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              Object _xblockexpression_1 = null;
                              {
                                this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux, r, Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), "[1toN]"));
                                _xblockexpression_1 = null;
                              }
                              _builder.append(_xblockexpression_1);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      } else {
                        boolean _equalsIgnoreCase_3 = e.getName().equalsIgnoreCase(eAux.getName());
                        boolean _not = (!_equalsIgnoreCase_3);
                        if (_not) {
                          {
                            Entity _is_2 = eAux.getIs();
                            boolean _tripleNotEquals_1 = (_is_2 != null);
                            if (_tripleNotEquals_1) {
                              {
                                final Function1<Attribute, Boolean> _function_3 = (Attribute it) -> {
                                  return Boolean.valueOf(it.isIsKey());
                                };
                                Iterable<Attribute> _filter_3 = IterableExtensions.<Attribute>filter(eAux.getIs().getAttributes(), _function_3);
                                for(final Attribute a_2 : _filter_3) {
                                  String _lowerCase_2 = r.getName().toLowerCase();
                                  String _plus_4 = (_lowerCase_2 + "_");
                                  CharSequence _pgsql_AttTypeChecker_2 = this.pgsql_AttTypeChecker(a_2);
                                  String _plus_5 = (_plus_4 + _pgsql_AttTypeChecker_2);
                                  _builder.append(_plus_5);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              Object _xblockexpression_2 = null;
                              {
                                this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), "[1toN]"));
                                _xblockexpression_2 = null;
                              }
                              _builder.append(_xblockexpression_2);
                              _builder.newLineIfNotEmpty();
                            } else {
                              Entity _is_3 = eAux.getIs();
                              boolean _tripleEquals_1 = (_is_3 == null);
                              if (_tripleEquals_1) {
                                {
                                  final Function1<Attribute, Boolean> _function_4 = (Attribute it) -> {
                                    return Boolean.valueOf(it.isIsKey());
                                  };
                                  Iterable<Attribute> _filter_4 = IterableExtensions.<Attribute>filter(eAux.getAttributes(), _function_4);
                                  for(final Attribute a_3 : _filter_4) {
                                    String _lowerCase_3 = r.getName().toLowerCase();
                                    String _plus_6 = (_lowerCase_3 + "_");
                                    CharSequence _pgsql_AttTypeChecker_3 = this.pgsql_AttTypeChecker(a_3);
                                    String _plus_7 = (_plus_6 + _pgsql_AttTypeChecker_3);
                                    _builder.append(_plus_7);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                                Object _xblockexpression_3 = null;
                                {
                                  this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), "[1toN]"));
                                  _xblockexpression_3 = null;
                                }
                                _builder.append(_xblockexpression_3);
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    {
      final Function1<Relation, Boolean> _function_5 = (Relation it) -> {
        return Boolean.valueOf(((((it.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || it.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (it.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || it.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) && (it.getLeftEnding().getTarget() instanceof Entity)) && (it.getRightEnding().getTarget() instanceof Entity)));
      };
      Iterable<Relation> _filter_5 = IterableExtensions.<Relation>filter(m.getRelations(), _function_5);
      for(final Relation r_1 : _filter_5) {
        {
          boolean _equalsIgnoreCase_4 = r_1.getLeftEnding().getTarget().toString().equalsIgnoreCase(e.getName());
          if (_equalsIgnoreCase_4) {
            {
              EList<Entity> _entities_1 = m.getEntities();
              for(final Entity eAux_1 : _entities_1) {
                {
                  boolean _equalsIgnoreCase_5 = r_1.getRightEnding().getTarget().toString().equalsIgnoreCase(eAux_1.getName());
                  if (_equalsIgnoreCase_5) {
                    {
                      boolean _equalsIgnoreCase_6 = e.getName().equalsIgnoreCase(eAux_1.getName());
                      if (_equalsIgnoreCase_6) {
                        {
                          Entity _is_4 = e.getIs();
                          boolean _tripleNotEquals_2 = (_is_4 != null);
                          if (_tripleNotEquals_2) {
                            {
                              final Function1<Attribute, Boolean> _function_6 = (Attribute it) -> {
                                return Boolean.valueOf(it.isIsKey());
                              };
                              Iterable<Attribute> _filter_6 = IterableExtensions.<Attribute>filter(e.getIs().getAttributes(), _function_6);
                              for(final Attribute a_4 : _filter_6) {
                                String _lowerCase_4 = r_1.getName().toLowerCase();
                                String _plus_8 = (_lowerCase_4 + "_");
                                CharSequence _pgsql_AttTypeChecker_4 = this.pgsql_AttTypeChecker(a_4);
                                String _plus_9 = (_plus_8 + _pgsql_AttTypeChecker_4);
                                _builder.append(_plus_9);
                                _builder.newLineIfNotEmpty();
                              }
                            }
                            _builder.append("\t");
                            Object _xblockexpression_4 = null;
                            {
                              this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, e.getIs(), r_1, Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), "[Nto1]"));
                              _xblockexpression_4 = null;
                            }
                            _builder.append(_xblockexpression_4, "\t");
                            _builder.newLineIfNotEmpty();
                          } else {
                            Entity _is_5 = e.getIs();
                            boolean _tripleEquals_2 = (_is_5 == null);
                            if (_tripleEquals_2) {
                              {
                                final Function1<Attribute, Boolean> _function_7 = (Attribute it) -> {
                                  return Boolean.valueOf(it.isIsKey());
                                };
                                Iterable<Attribute> _filter_7 = IterableExtensions.<Attribute>filter(e.getAttributes(), _function_7);
                                for(final Attribute a_5 : _filter_7) {
                                  String _lowerCase_5 = r_1.getName().toLowerCase();
                                  String _plus_10 = (_lowerCase_5 + "_");
                                  CharSequence _pgsql_AttTypeChecker_5 = this.pgsql_AttTypeChecker(a_5);
                                  String _plus_11 = (_plus_10 + _pgsql_AttTypeChecker_5);
                                  _builder.append(_plus_11);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append("\t");
                              Object _xblockexpression_5 = null;
                              {
                                this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux_1, r_1, Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), "[Nto1]"));
                                _xblockexpression_5 = null;
                              }
                              _builder.append(_xblockexpression_5, "\t");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      } else {
                        boolean _equalsIgnoreCase_7 = e.getName().equalsIgnoreCase(eAux_1.getName());
                        boolean _not_1 = (!_equalsIgnoreCase_7);
                        if (_not_1) {
                          {
                            Entity _is_6 = eAux_1.getIs();
                            boolean _tripleNotEquals_3 = (_is_6 != null);
                            if (_tripleNotEquals_3) {
                              {
                                final Function1<Attribute, Boolean> _function_8 = (Attribute it) -> {
                                  return Boolean.valueOf(it.isIsKey());
                                };
                                Iterable<Attribute> _filter_8 = IterableExtensions.<Attribute>filter(eAux_1.getIs().getAttributes(), _function_8);
                                for(final Attribute a_6 : _filter_8) {
                                  String _lowerCase_6 = r_1.getName().toLowerCase();
                                  String _plus_12 = (_lowerCase_6 + "_");
                                  CharSequence _pgsql_AttTypeChecker_6 = this.pgsql_AttTypeChecker(a_6);
                                  String _plus_13 = (_plus_12 + _pgsql_AttTypeChecker_6);
                                  _builder.append(_plus_13);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append("\t");
                              Object _xblockexpression_6 = null;
                              {
                                this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux_1, r_1, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), "[Nto1]"));
                                _xblockexpression_6 = null;
                              }
                              _builder.append(_xblockexpression_6, "\t");
                              _builder.newLineIfNotEmpty();
                            } else {
                              Entity _is_7 = eAux_1.getIs();
                              boolean _tripleEquals_3 = (_is_7 == null);
                              if (_tripleEquals_3) {
                                {
                                  final Function1<Attribute, Boolean> _function_9 = (Attribute it) -> {
                                    return Boolean.valueOf(it.isIsKey());
                                  };
                                  Iterable<Attribute> _filter_9 = IterableExtensions.<Attribute>filter(eAux_1.getAttributes(), _function_9);
                                  for(final Attribute a_7 : _filter_9) {
                                    String _lowerCase_7 = r_1.getName().toLowerCase();
                                    String _plus_14 = (_lowerCase_7 + "_");
                                    CharSequence _pgsql_AttTypeChecker_7 = this.pgsql_AttTypeChecker(a_7);
                                    String _plus_15 = (_plus_14 + _pgsql_AttTypeChecker_7);
                                    _builder.append(_plus_15);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                                _builder.append("\t");
                                Object _xblockexpression_7 = null;
                                {
                                  this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_1to1_1toN_RefMapper(e, eAux_1, r_1, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), "[Nto1]"));
                                  _xblockexpression_7 = null;
                                }
                                _builder.append(_xblockexpression_7, "\t");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_NToN_DerivedEntitiesMapper(final ERModel m) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Relation, Boolean> _function = (Relation it) -> {
        return Boolean.valueOf(((((it.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || it.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (it.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || it.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) && (it.getLeftEnding().getTarget() instanceof Entity)) && (it.getRightEnding().getTarget() instanceof Entity)));
      };
      Iterable<Relation> _filter = IterableExtensions.<Relation>filter(m.getRelations(), _function);
      boolean _hasElements = false;
      for(final Relation r : _filter) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" \n);\n", "");
        }
        EObject _target = r.getLeftEnding().getTarget();
        Entity leftEnt = ((Entity) _target);
        EObject _target_1 = r.getRightEnding().getTarget();
        Entity rightEnt = ((Entity) _target_1);
        _builder.newLineIfNotEmpty();
        _builder.append("-- Table: ");
        String _upperCase = r.getName().toUpperCase();
        _builder.append(_upperCase);
        _builder.newLineIfNotEmpty();
        _builder.append("-- DROP TABLE ");
        String _upperCase_1 = r.getName().toUpperCase();
        _builder.append(_upperCase_1);
        _builder.append(";\t");
        _builder.newLineIfNotEmpty();
        _builder.append("CREATE TABLE IF NOT EXISTS ");
        String _lowerCase = r.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(r.getAttributes(), _function_1);
          for(final Attribute a : _filter_1) {
            _builder.append("\t");
            CharSequence _pgsql_AttTypeChecker = this.pgsql_AttTypeChecker(a);
            _builder.append(_pgsql_AttTypeChecker);
            Object _xblockexpression = null;
            {
              this.primaryKeys_NtoN.add(a.getName().toString());
              _xblockexpression = null;
            }
            _builder.append(_xblockexpression);
          }
        }
        _builder.newLineIfNotEmpty();
        {
          boolean _equalsIgnoreCase = leftEnt.getName().equalsIgnoreCase(rightEnt.getName());
          boolean _not = (!_equalsIgnoreCase);
          if (_not) {
            {
              Entity _is = leftEnt.getIs();
              boolean _tripleNotEquals = (_is != null);
              if (_tripleNotEquals) {
                {
                  final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
                    return Boolean.valueOf(it.isIsKey());
                  };
                  Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(leftEnt.getIs().getAttributes(), _function_2);
                  for(final Attribute a_1 : _filter_2) {
                    _builder.append("\t");
                    String _lowerCase_1 = leftEnt.getName().toLowerCase();
                    String _plus = (_lowerCase_1 + "_");
                    CharSequence _pgsql_AttTypeChecker_1 = this.pgsql_AttTypeChecker(a_1);
                    String _plus_1 = (_plus + _pgsql_AttTypeChecker_1);
                    _builder.append(_plus_1, "\t");
                    _builder.newLineIfNotEmpty();
                    Object _xblockexpression_1 = null;
                    {
                      String _lowerCase_2 = leftEnt.getName().toLowerCase();
                      String _plus_2 = (_lowerCase_2 + "_");
                      String _lowerCase_3 = a_1.getName().toLowerCase();
                      String _plus_3 = (_plus_2 + _lowerCase_3);
                      this.primaryKeys_NtoN.add(_plus_3);
                      _xblockexpression_1 = null;
                    }
                    _builder.append(_xblockexpression_1);
                    _builder.newLineIfNotEmpty();
                  }
                }
                Object _xblockexpression_2 = null;
                {
                  this.sc_AlterTbl_NtoN.append(this.pgsql_AlterTable_NtoN_RefMapper(leftEnt, rightEnt, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), "[NtoN]"));
                  _xblockexpression_2 = null;
                }
                _builder.append(_xblockexpression_2);
                _builder.newLineIfNotEmpty();
              } else {
                Entity _is_1 = leftEnt.getIs();
                boolean _tripleEquals = (_is_1 == null);
                if (_tripleEquals) {
                  {
                    final Function1<Attribute, Boolean> _function_3 = (Attribute it) -> {
                      return Boolean.valueOf(it.isIsKey());
                    };
                    Iterable<Attribute> _filter_3 = IterableExtensions.<Attribute>filter(leftEnt.getAttributes(), _function_3);
                    for(final Attribute a_2 : _filter_3) {
                      _builder.append("\t");
                      String _lowerCase_2 = leftEnt.getName().toLowerCase();
                      String _plus_2 = (_lowerCase_2 + "_");
                      CharSequence _pgsql_AttTypeChecker_2 = this.pgsql_AttTypeChecker(a_2);
                      String _plus_3 = (_plus_2 + _pgsql_AttTypeChecker_2);
                      _builder.append(_plus_3, "\t");
                      _builder.newLineIfNotEmpty();
                      Object _xblockexpression_3 = null;
                      {
                        String _lowerCase_3 = leftEnt.getName().toLowerCase();
                        String _plus_4 = (_lowerCase_3 + "_");
                        String _lowerCase_4 = a_2.getName().toLowerCase();
                        String _plus_5 = (_plus_4 + _lowerCase_4);
                        this.primaryKeys_NtoN.add(_plus_5);
                        _xblockexpression_3 = null;
                      }
                      _builder.append(_xblockexpression_3);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  Object _xblockexpression_4 = null;
                  {
                    this.sc_AlterTbl_NtoN.append(this.pgsql_AlterTable_NtoN_RefMapper(leftEnt, rightEnt, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), "[NtoN]"));
                    _xblockexpression_4 = null;
                  }
                  _builder.append(_xblockexpression_4);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            {
              Entity _is_2 = rightEnt.getIs();
              boolean _tripleNotEquals_1 = (_is_2 != null);
              if (_tripleNotEquals_1) {
                {
                  final Function1<Attribute, Boolean> _function_4 = (Attribute it) -> {
                    return Boolean.valueOf(it.isIsKey());
                  };
                  Iterable<Attribute> _filter_4 = IterableExtensions.<Attribute>filter(rightEnt.getIs().getAttributes(), _function_4);
                  for(final Attribute a_3 : _filter_4) {
                    _builder.append("\t");
                    String _lowerCase_3 = rightEnt.getName().toLowerCase();
                    String _plus_4 = (_lowerCase_3 + "_");
                    CharSequence _pgsql_AttTypeChecker_3 = this.pgsql_AttTypeChecker(a_3);
                    String _plus_5 = (_plus_4 + _pgsql_AttTypeChecker_3);
                    _builder.append(_plus_5, "\t");
                    _builder.newLineIfNotEmpty();
                    Object _xblockexpression_5 = null;
                    {
                      String _lowerCase_4 = rightEnt.getName().toLowerCase();
                      String _plus_6 = (_lowerCase_4 + "_");
                      String _lowerCase_5 = a_3.getName().toLowerCase();
                      String _plus_7 = (_plus_6 + _lowerCase_5);
                      this.primaryKeys_NtoN.add(_plus_7);
                      _xblockexpression_5 = null;
                    }
                    _builder.append(_xblockexpression_5);
                    _builder.newLineIfNotEmpty();
                  }
                }
                Object _xblockexpression_6 = null;
                {
                  this.sc_AlterTbl_NtoN.append(this.pgsql_AlterTable_NtoN_RefMapper(rightEnt, leftEnt, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), "[NtoN]"));
                  _xblockexpression_6 = null;
                }
                _builder.append(_xblockexpression_6);
                _builder.newLineIfNotEmpty();
              } else {
                Entity _is_3 = rightEnt.getIs();
                boolean _tripleEquals_1 = (_is_3 == null);
                if (_tripleEquals_1) {
                  {
                    final Function1<Attribute, Boolean> _function_5 = (Attribute it) -> {
                      return Boolean.valueOf(it.isIsKey());
                    };
                    Iterable<Attribute> _filter_5 = IterableExtensions.<Attribute>filter(rightEnt.getAttributes(), _function_5);
                    for(final Attribute a_4 : _filter_5) {
                      _builder.append("\t");
                      String _lowerCase_4 = rightEnt.getName().toLowerCase();
                      String _plus_6 = (_lowerCase_4 + "_");
                      CharSequence _pgsql_AttTypeChecker_4 = this.pgsql_AttTypeChecker(a_4);
                      String _plus_7 = (_plus_6 + _pgsql_AttTypeChecker_4);
                      _builder.append(_plus_7, "\t");
                      _builder.newLineIfNotEmpty();
                      Object _xblockexpression_7 = null;
                      {
                        String _lowerCase_5 = rightEnt.getName().toLowerCase();
                        String _plus_8 = (_lowerCase_5 + "_");
                        String _lowerCase_6 = a_4.getName().toLowerCase();
                        String _plus_9 = (_plus_8 + _lowerCase_6);
                        this.primaryKeys_NtoN.add(_plus_9);
                        _xblockexpression_7 = null;
                      }
                      _builder.append(_xblockexpression_7);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  Object _xblockexpression_8 = null;
                  {
                    this.sc_AlterTbl_NtoN.append(this.pgsql_AlterTable_NtoN_RefMapper(rightEnt, leftEnt, r, Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(true), "[NtoN]"));
                    _xblockexpression_8 = null;
                  }
                  _builder.append(_xblockexpression_8);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          } else {
            boolean _equalsIgnoreCase_1 = leftEnt.getName().equalsIgnoreCase(rightEnt.getName());
            if (_equalsIgnoreCase_1) {
              {
                Entity _is_4 = leftEnt.getIs();
                boolean _tripleNotEquals_2 = (_is_4 != null);
                if (_tripleNotEquals_2) {
                  {
                    final Function1<Attribute, Boolean> _function_6 = (Attribute it) -> {
                      return Boolean.valueOf(it.isIsKey());
                    };
                    Iterable<Attribute> _filter_6 = IterableExtensions.<Attribute>filter(leftEnt.getIs().getAttributes(), _function_6);
                    for(final Attribute a_5 : _filter_6) {
                      _builder.append("\t");
                      String _lowerCase_5 = leftEnt.getName().toLowerCase();
                      String _plus_8 = (_lowerCase_5 + "_");
                      String _lowerCase_6 = a_5.getName().toLowerCase();
                      String _plus_9 = (_plus_8 + _lowerCase_6);
                      String _plus_10 = (_plus_9 + "_1");
                      CharSequence _pgsql_AttTypeChecker_Unnamed = this.pgsql_AttTypeChecker_Unnamed(a_5);
                      String _plus_11 = (_plus_10 + _pgsql_AttTypeChecker_Unnamed);
                      _builder.append(_plus_11, "\t");
                      _builder.newLineIfNotEmpty();
                      Object _xblockexpression_9 = null;
                      {
                        String _lowerCase_7 = leftEnt.getName().toLowerCase();
                        String _plus_12 = (_lowerCase_7 + "_");
                        String _lowerCase_8 = a_5.getName().toLowerCase();
                        String _plus_13 = (_plus_12 + _lowerCase_8);
                        String _plus_14 = (_plus_13 + "_1");
                        this.primaryKeys_NtoN.add(_plus_14);
                        _xblockexpression_9 = null;
                      }
                      _builder.append(_xblockexpression_9);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  Object _xblockexpression_10 = null;
                  {
                    this.sc_AlterTbl_NtoN.append(this.pgsql_AlterTable_NtoN_RefMapper(leftEnt, rightEnt, r, Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), Boolean.valueOf(false), "[NtoN]"));
                    _xblockexpression_10 = null;
                  }
                  _builder.append(_xblockexpression_10);
                  _builder.newLineIfNotEmpty();
                } else {
                  Entity _is_5 = leftEnt.getIs();
                  boolean _tripleEquals_2 = (_is_5 == null);
                  if (_tripleEquals_2) {
                    {
                      final Function1<Attribute, Boolean> _function_7 = (Attribute it) -> {
                        return Boolean.valueOf(it.isIsKey());
                      };
                      Iterable<Attribute> _filter_7 = IterableExtensions.<Attribute>filter(leftEnt.getAttributes(), _function_7);
                      for(final Attribute a_6 : _filter_7) {
                        _builder.append("\t");
                        String _lowerCase_7 = leftEnt.getName().toLowerCase();
                        String _plus_12 = (_lowerCase_7 + "_");
                        String _lowerCase_8 = a_6.getName().toLowerCase();
                        String _plus_13 = (_plus_12 + _lowerCase_8);
                        String _plus_14 = (_plus_13 + "_1");
                        CharSequence _pgsql_AttTypeChecker_Unnamed_1 = this.pgsql_AttTypeChecker_Unnamed(a_6);
                        String _plus_15 = (_plus_14 + _pgsql_AttTypeChecker_Unnamed_1);
                        _builder.append(_plus_15, "\t");
                        _builder.newLineIfNotEmpty();
                        Object _xblockexpression_11 = null;
                        {
                          String _lowerCase_9 = leftEnt.getName().toLowerCase();
                          String _plus_16 = (_lowerCase_9 + "_");
                          String _lowerCase_10 = a_6.getName().toLowerCase();
                          String _plus_17 = (_plus_16 + _lowerCase_10);
                          String _plus_18 = (_plus_17 + "_1");
                          this.primaryKeys_NtoN.add(_plus_18);
                          _xblockexpression_11 = null;
                        }
                        _builder.append(_xblockexpression_11);
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    Object _xblockexpression_12 = null;
                    {
                      this.sc_AlterTbl_NtoN.append(this.pgsql_AlterTable_NtoN_RefMapper(leftEnt, rightEnt, r, Boolean.valueOf(false), Boolean.valueOf(true), Boolean.valueOf(false), Boolean.valueOf(false), "[NtoN]"));
                      _xblockexpression_12 = null;
                    }
                    _builder.append(_xblockexpression_12);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
              {
                Entity _is_6 = rightEnt.getIs();
                boolean _tripleNotEquals_3 = (_is_6 != null);
                if (_tripleNotEquals_3) {
                  {
                    final Function1<Attribute, Boolean> _function_8 = (Attribute it) -> {
                      return Boolean.valueOf(it.isIsKey());
                    };
                    Iterable<Attribute> _filter_8 = IterableExtensions.<Attribute>filter(rightEnt.getIs().getAttributes(), _function_8);
                    for(final Attribute a_7 : _filter_8) {
                      _builder.append("\t");
                      String _lowerCase_9 = rightEnt.getName().toLowerCase();
                      String _plus_16 = (_lowerCase_9 + "_");
                      String _lowerCase_10 = a_7.getName().toLowerCase();
                      String _plus_17 = (_plus_16 + _lowerCase_10);
                      String _plus_18 = (_plus_17 + "_2");
                      CharSequence _pgsql_AttTypeChecker_Unnamed_2 = this.pgsql_AttTypeChecker_Unnamed(a_7);
                      String _plus_19 = (_plus_18 + _pgsql_AttTypeChecker_Unnamed_2);
                      _builder.append(_plus_19, "\t");
                      _builder.newLineIfNotEmpty();
                      Object _xblockexpression_13 = null;
                      {
                        String _lowerCase_11 = rightEnt.getName().toLowerCase();
                        String _plus_20 = (_lowerCase_11 + "_");
                        String _lowerCase_12 = a_7.getName().toLowerCase();
                        String _plus_21 = (_plus_20 + _lowerCase_12);
                        String _plus_22 = (_plus_21 + "_2");
                        this.primaryKeys_NtoN.add(_plus_22);
                        _xblockexpression_13 = null;
                      }
                      _builder.append(_xblockexpression_13);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                } else {
                  Entity _is_7 = rightEnt.getIs();
                  boolean _tripleEquals_3 = (_is_7 == null);
                  if (_tripleEquals_3) {
                    {
                      final Function1<Attribute, Boolean> _function_9 = (Attribute it) -> {
                        return Boolean.valueOf(it.isIsKey());
                      };
                      Iterable<Attribute> _filter_9 = IterableExtensions.<Attribute>filter(rightEnt.getAttributes(), _function_9);
                      for(final Attribute a_8 : _filter_9) {
                        _builder.append("\t");
                        String _lowerCase_11 = rightEnt.getName().toLowerCase();
                        String _plus_20 = (_lowerCase_11 + "_");
                        String _lowerCase_12 = a_8.getName().toLowerCase();
                        String _plus_21 = (_plus_20 + _lowerCase_12);
                        String _plus_22 = (_plus_21 + "_2");
                        CharSequence _pgsql_AttTypeChecker_Unnamed_3 = this.pgsql_AttTypeChecker_Unnamed(a_8);
                        String _plus_23 = (_plus_22 + _pgsql_AttTypeChecker_Unnamed_3);
                        _builder.append(_plus_23, "\t");
                        _builder.newLineIfNotEmpty();
                        Object _xblockexpression_14 = null;
                        {
                          String _lowerCase_13 = rightEnt.getName().toLowerCase();
                          String _plus_24 = (_lowerCase_13 + "_");
                          String _lowerCase_14 = a_8.getName().toLowerCase();
                          String _plus_25 = (_plus_24 + _lowerCase_14);
                          String _plus_26 = (_plus_25 + "_2");
                          this.primaryKeys_NtoN.add(_plus_26);
                          _xblockexpression_14 = null;
                        }
                        _builder.append(_xblockexpression_14);
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        {
          final Function1<Attribute, Boolean> _function_10 = (Attribute it) -> {
            boolean _isIsKey = it.isIsKey();
            return Boolean.valueOf((!_isIsKey));
          };
          Iterable<Attribute> _filter_10 = IterableExtensions.<Attribute>filter(r.getAttributes(), _function_10);
          for(final Attribute a_9 : _filter_10) {
            _builder.append("\t");
            CharSequence _pgsql_AttTypeChecker_5 = this.pgsql_AttTypeChecker(a_9);
            _builder.append(_pgsql_AttTypeChecker_5);
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("CONSTRAINT pk_");
        String _lowerCase_13 = r.getName().toLowerCase();
        _builder.append(_lowerCase_13, "\t");
        _builder.append(" PRIMARY KEY (");
        {
          boolean _hasElements_1 = false;
          for(final Object pk : this.primaryKeys_NtoN) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _string = pk.toString();
            _builder.append(_string, "\t");
          }
        }
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        Object _xblockexpression_15 = null;
        {
          this.primaryKeys_NtoN.clear();
          _xblockexpression_15 = null;
        }
        _builder.append(_xblockexpression_15);
        _builder.newLineIfNotEmpty();
      }
      if (_hasElements) {
        _builder.append(");\n");
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_TernaryEntitiesMapper(final ERModel model) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Relation, Boolean> _function = (Relation i) -> {
        return Boolean.valueOf(((i.getLeftEnding().getTarget() instanceof Relation) && (i.getRightEnding().getTarget() instanceof Entity)));
      };
      Iterable<Relation> _filter = IterableExtensions.<Relation>filter(model.getRelations(), _function);
      for(final Relation r : _filter) {
        EObject _target = r.getLeftEnding().getTarget();
        Relation auxRel = ((Relation) _target);
        _builder.newLineIfNotEmpty();
        EObject _target_1 = r.getRightEnding().getTarget();
        Entity auxEnt = ((Entity) _target_1);
        _builder.newLineIfNotEmpty();
        EObject _target_2 = auxRel.getLeftEnding().getTarget();
        Entity auxLeftEntity = ((Entity) _target_2);
        _builder.newLineIfNotEmpty();
        EObject _target_3 = auxRel.getRightEnding().getTarget();
        Entity auxRightEntity = ((Entity) _target_3);
        _builder.newLineIfNotEmpty();
        _builder.append("-- Table: ");
        String _upperCase = r.getName().toUpperCase();
        _builder.append(_upperCase);
        _builder.newLineIfNotEmpty();
        _builder.append("-- DROP TABLE ");
        String _upperCase_1 = r.getName().toUpperCase();
        _builder.append(_upperCase_1);
        _builder.append(";\t");
        _builder.newLineIfNotEmpty();
        _builder.append("CREATE TABLE IF NOT EXISTS ");
        String _lowerCase = r.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(auxEnt.getAttributes(), _function_1);
          for(final Attribute att : _filter_1) {
            _builder.append("\t");
            String _lowerCase_1 = auxEnt.getName().toLowerCase();
            String _plus = (_lowerCase_1 + "_");
            CharSequence _pgsql_AttTypeChecker = this.pgsql_AttTypeChecker(att);
            String _plus_1 = (_plus + _pgsql_AttTypeChecker);
            _builder.append(_plus_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(auxLeftEntity.getAttributes(), _function_2);
          for(final Attribute att_1 : _filter_2) {
            _builder.append("\t");
            String _lowerCase_2 = auxLeftEntity.getName().toLowerCase();
            String _plus_2 = (_lowerCase_2 + "_");
            CharSequence _pgsql_AttTypeChecker_1 = this.pgsql_AttTypeChecker(att_1);
            String _plus_3 = (_plus_2 + _pgsql_AttTypeChecker_1);
            _builder.append(_plus_3);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          final Function1<Attribute, Boolean> _function_3 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_3 = IterableExtensions.<Attribute>filter(auxRightEntity.getAttributes(), _function_3);
          for(final Attribute att_2 : _filter_3) {
            _builder.append("\t");
            String _lowerCase_3 = auxRightEntity.getName().toLowerCase();
            String _plus_4 = (_lowerCase_3 + "_");
            CharSequence _pgsql_AttTypeChecker_2 = this.pgsql_AttTypeChecker(att_2);
            String _plus_5 = (_plus_4 + _pgsql_AttTypeChecker_2);
            _builder.append(_plus_5);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Attribute> _attributes = r.getAttributes();
          boolean _tripleNotEquals = (_attributes != null);
          if (_tripleNotEquals) {
            {
              EList<Attribute> _attributes_1 = r.getAttributes();
              for(final Attribute att_3 : _attributes_1) {
                _builder.append("\t");
                CharSequence _pgsql_AttTypeChecker_3 = this.pgsql_AttTypeChecker(att_3);
                _builder.append(_pgsql_AttTypeChecker_3);
                {
                  boolean _isIsKey = att_3.isIsKey();
                  if (_isIsKey) {
                    Object _xblockexpression = null;
                    {
                      this.primaryKeys_Ternary.add(att_3.getName().toLowerCase());
                      _xblockexpression = null;
                    }
                    _builder.append(_xblockexpression);
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        Object _xblockexpression_1 = null;
        {
          String _name = auxEnt.getName();
          ArrayList<Object> _arrayList = new ArrayList<Object>();
          this.mapTernary.put(_name, _arrayList);
          _xblockexpression_1 = null;
        }
        _builder.append(_xblockexpression_1);
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_4 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_4 = IterableExtensions.<Attribute>filter(auxEnt.getAttributes(), _function_4);
          for(final Attribute att_4 : _filter_4) {
            Object _xblockexpression_2 = null;
            {
              String _lowerCase_4 = auxEnt.getName().toLowerCase();
              String _plus_6 = (_lowerCase_4 + "_");
              String _string = att_4.getName().toString();
              String _plus_7 = (_plus_6 + _string);
              this.primaryKeys_Ternary.add(_plus_7);
              _xblockexpression_2 = null;
            }
            _builder.append(_xblockexpression_2);
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_3 = null;
            {
              this.mapTernary.get(auxEnt.getName()).add(att_4.getName().toString().toLowerCase());
              _xblockexpression_3 = null;
            }
            _builder.append(_xblockexpression_3);
            _builder.newLineIfNotEmpty();
          }
        }
        Object _xblockexpression_4 = null;
        {
          String _name = auxLeftEntity.getName();
          ArrayList<Object> _arrayList = new ArrayList<Object>();
          this.mapTernary.put(_name, _arrayList);
          _xblockexpression_4 = null;
        }
        _builder.append(_xblockexpression_4);
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_5 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_5 = IterableExtensions.<Attribute>filter(auxLeftEntity.getAttributes(), _function_5);
          for(final Attribute att_5 : _filter_5) {
            Object _xblockexpression_5 = null;
            {
              String _lowerCase_4 = auxLeftEntity.getName().toLowerCase();
              String _plus_6 = (_lowerCase_4 + "_");
              String _lowerCase_5 = att_5.getName().toString().toLowerCase();
              String _plus_7 = (_plus_6 + _lowerCase_5);
              this.primaryKeys_Ternary.add(_plus_7);
              _xblockexpression_5 = null;
            }
            _builder.append(_xblockexpression_5);
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_6 = null;
            {
              ArrayList _get = this.mapTernary.get(auxLeftEntity.getName());
              String _lowerCase_4 = auxLeftEntity.getName().toLowerCase();
              String _plus_6 = (_lowerCase_4 + "_");
              String _lowerCase_5 = att_5.getName().toString().toLowerCase();
              String _plus_7 = (_plus_6 + _lowerCase_5);
              _get.add(_plus_7);
              _xblockexpression_6 = null;
            }
            _builder.append(_xblockexpression_6);
            _builder.newLineIfNotEmpty();
          }
        }
        Object _xblockexpression_7 = null;
        {
          String _name = auxRightEntity.getName();
          ArrayList<Object> _arrayList = new ArrayList<Object>();
          this.mapTernary.put(_name, _arrayList);
          _xblockexpression_7 = null;
        }
        _builder.append(_xblockexpression_7);
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_6 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_6 = IterableExtensions.<Attribute>filter(auxRightEntity.getAttributes(), _function_6);
          for(final Attribute att_6 : _filter_6) {
            Object _xblockexpression_8 = null;
            {
              String _lowerCase_4 = auxRightEntity.getName().toLowerCase();
              String _plus_6 = (_lowerCase_4 + "_");
              String _lowerCase_5 = att_6.getName().toString().toLowerCase();
              String _plus_7 = (_plus_6 + _lowerCase_5);
              this.primaryKeys_Ternary.add(_plus_7);
              _xblockexpression_8 = null;
            }
            _builder.append(_xblockexpression_8);
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_9 = null;
            {
              ArrayList _get = this.mapTernary.get(auxRightEntity.getName());
              String _lowerCase_4 = auxRightEntity.getName().toLowerCase();
              String _plus_6 = (_lowerCase_4 + "_");
              String _lowerCase_5 = att_6.getName().toString().toLowerCase();
              String _plus_7 = (_plus_6 + _lowerCase_5);
              _get.add(_plus_7);
              _xblockexpression_9 = null;
            }
            _builder.append(_xblockexpression_9);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("CONSTRAINT pk_");
        String _lowerCase_4 = r.getName().toLowerCase();
        _builder.append(_lowerCase_4, "\t");
        _builder.append(" PRIMARY KEY (");
        {
          boolean _hasElements = false;
          for(final Object pk : this.primaryKeys_Ternary) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _string = pk.toString();
            _builder.append(_string, "\t");
          }
        }
        _builder.append(") ");
        Object _xblockexpression_10 = null;
        {
          this.primaryKeys_Ternary.clear();
          _xblockexpression_10 = null;
        }
        _builder.append(_xblockexpression_10, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Object _xblockexpression_11 = null;
        {
          this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_Ternary_RefMapper(r.getName(), auxEnt.getName(), auxRel.getName(), auxLeftEntity.getName(), auxRightEntity.getName(), this.mapTernary));
          _xblockexpression_11 = null;
        }
        _builder.append(_xblockexpression_11, "\t");
        Object _xblockexpression_12 = null;
        {
          this.mapTernary.clear();
          _xblockexpression_12 = null;
        }
        _builder.append(_xblockexpression_12, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append(");");
        _builder.newLine();
        _builder.newLine();
      }
    }
    {
      final Function1<Relation, Boolean> _function_7 = (Relation i) -> {
        return Boolean.valueOf(((i.getLeftEnding().getTarget() instanceof Entity) && (i.getRightEnding().getTarget() instanceof Relation)));
      };
      Iterable<Relation> _filter_7 = IterableExtensions.<Relation>filter(model.getRelations(), _function_7);
      for(final Relation r_1 : _filter_7) {
        EObject _target_4 = r_1.getLeftEnding().getTarget();
        Entity auxEnt_1 = ((Entity) _target_4);
        _builder.newLineIfNotEmpty();
        EObject _target_5 = r_1.getRightEnding().getTarget();
        Relation auxRel_1 = ((Relation) _target_5);
        _builder.newLineIfNotEmpty();
        EObject _target_6 = auxRel_1.getLeftEnding().getTarget();
        Entity auxLeftEntity_1 = ((Entity) _target_6);
        _builder.newLineIfNotEmpty();
        EObject _target_7 = auxRel_1.getRightEnding().getTarget();
        Entity auxRightEntity_1 = ((Entity) _target_7);
        _builder.newLineIfNotEmpty();
        _builder.append("-- Table: ");
        String _upperCase_2 = r_1.getName().toUpperCase();
        _builder.append(_upperCase_2);
        _builder.newLineIfNotEmpty();
        _builder.append("-- DROP TABLE ");
        String _upperCase_3 = r_1.getName().toUpperCase();
        _builder.append(_upperCase_3);
        _builder.append(";\t");
        _builder.newLineIfNotEmpty();
        _builder.append("CREATE TABLE IF NOT EXISTS ");
        String _lowerCase_5 = r_1.getName().toLowerCase();
        _builder.append(_lowerCase_5);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_8 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_8 = IterableExtensions.<Attribute>filter(auxEnt_1.getAttributes(), _function_8);
          for(final Attribute att_7 : _filter_8) {
            _builder.append("\t");
            String _lowerCase_6 = auxEnt_1.getName().toLowerCase();
            String _plus_6 = (_lowerCase_6 + "_");
            CharSequence _pgsql_AttTypeChecker_4 = this.pgsql_AttTypeChecker(att_7);
            String _plus_7 = (_plus_6 + _pgsql_AttTypeChecker_4);
            _builder.append(_plus_7);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          final Function1<Attribute, Boolean> _function_9 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_9 = IterableExtensions.<Attribute>filter(auxLeftEntity_1.getAttributes(), _function_9);
          for(final Attribute att_8 : _filter_9) {
            _builder.append("\t");
            String _lowerCase_7 = auxLeftEntity_1.getName().toLowerCase();
            String _plus_8 = (_lowerCase_7 + "_");
            CharSequence _pgsql_AttTypeChecker_5 = this.pgsql_AttTypeChecker(att_8);
            String _plus_9 = (_plus_8 + _pgsql_AttTypeChecker_5);
            _builder.append(_plus_9);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          final Function1<Attribute, Boolean> _function_10 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_10 = IterableExtensions.<Attribute>filter(auxRightEntity_1.getAttributes(), _function_10);
          for(final Attribute att_9 : _filter_10) {
            _builder.append("\t");
            String _lowerCase_8 = auxRightEntity_1.getName().toLowerCase();
            String _plus_10 = (_lowerCase_8 + "_");
            CharSequence _pgsql_AttTypeChecker_6 = this.pgsql_AttTypeChecker(att_9);
            String _plus_11 = (_plus_10 + _pgsql_AttTypeChecker_6);
            _builder.append(_plus_11);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Attribute> _attributes_2 = r_1.getAttributes();
          boolean _tripleNotEquals_1 = (_attributes_2 != null);
          if (_tripleNotEquals_1) {
            {
              EList<Attribute> _attributes_3 = r_1.getAttributes();
              for(final Attribute att_10 : _attributes_3) {
                _builder.append("\t");
                CharSequence _pgsql_AttTypeChecker_7 = this.pgsql_AttTypeChecker(att_10);
                _builder.append(_pgsql_AttTypeChecker_7);
                {
                  boolean _isIsKey_1 = att_10.isIsKey();
                  if (_isIsKey_1) {
                    Object _xblockexpression_13 = null;
                    {
                      this.primaryKeys_Ternary.add(att_10.getName().toLowerCase());
                      _xblockexpression_13 = null;
                    }
                    _builder.append(_xblockexpression_13);
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        Object _xblockexpression_14 = null;
        {
          String _name = auxEnt_1.getName();
          ArrayList<Object> _arrayList = new ArrayList<Object>();
          this.mapTernary.put(_name, _arrayList);
          _xblockexpression_14 = null;
        }
        _builder.append(_xblockexpression_14);
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_11 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_11 = IterableExtensions.<Attribute>filter(auxEnt_1.getAttributes(), _function_11);
          for(final Attribute att_11 : _filter_11) {
            Object _xblockexpression_15 = null;
            {
              String _lowerCase_9 = auxEnt_1.getName().toLowerCase();
              String _plus_12 = (_lowerCase_9 + "_");
              String _string_1 = att_11.getName().toString();
              String _plus_13 = (_plus_12 + _string_1);
              this.primaryKeys_Ternary.add(_plus_13);
              _xblockexpression_15 = null;
            }
            _builder.append(_xblockexpression_15);
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_16 = null;
            {
              this.mapTernary.get(auxEnt_1.getName()).add(att_11.getName().toString().toLowerCase());
              _xblockexpression_16 = null;
            }
            _builder.append(_xblockexpression_16);
            _builder.newLineIfNotEmpty();
          }
        }
        Object _xblockexpression_17 = null;
        {
          String _name = auxLeftEntity_1.getName();
          ArrayList<Object> _arrayList = new ArrayList<Object>();
          this.mapTernary.put(_name, _arrayList);
          _xblockexpression_17 = null;
        }
        _builder.append(_xblockexpression_17);
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_12 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_12 = IterableExtensions.<Attribute>filter(auxLeftEntity_1.getAttributes(), _function_12);
          for(final Attribute att_12 : _filter_12) {
            Object _xblockexpression_18 = null;
            {
              String _lowerCase_9 = auxLeftEntity_1.getName().toLowerCase();
              String _plus_12 = (_lowerCase_9 + "_");
              String _lowerCase_10 = att_12.getName().toString().toLowerCase();
              String _plus_13 = (_plus_12 + _lowerCase_10);
              this.primaryKeys_Ternary.add(_plus_13);
              _xblockexpression_18 = null;
            }
            _builder.append(_xblockexpression_18);
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_19 = null;
            {
              ArrayList _get = this.mapTernary.get(auxLeftEntity_1.getName());
              String _lowerCase_9 = auxLeftEntity_1.getName().toLowerCase();
              String _plus_12 = (_lowerCase_9 + "_");
              String _lowerCase_10 = att_12.getName().toString().toLowerCase();
              String _plus_13 = (_plus_12 + _lowerCase_10);
              _get.add(_plus_13);
              _xblockexpression_19 = null;
            }
            _builder.append(_xblockexpression_19);
            _builder.newLineIfNotEmpty();
          }
        }
        Object _xblockexpression_20 = null;
        {
          String _name = auxRightEntity_1.getName();
          ArrayList<Object> _arrayList = new ArrayList<Object>();
          this.mapTernary.put(_name, _arrayList);
          _xblockexpression_20 = null;
        }
        _builder.append(_xblockexpression_20);
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function_13 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_13 = IterableExtensions.<Attribute>filter(auxRightEntity_1.getAttributes(), _function_13);
          for(final Attribute att_13 : _filter_13) {
            Object _xblockexpression_21 = null;
            {
              String _lowerCase_9 = auxRightEntity_1.getName().toLowerCase();
              String _plus_12 = (_lowerCase_9 + "_");
              String _lowerCase_10 = att_13.getName().toString().toLowerCase();
              String _plus_13 = (_plus_12 + _lowerCase_10);
              this.primaryKeys_Ternary.add(_plus_13);
              _xblockexpression_21 = null;
            }
            _builder.append(_xblockexpression_21);
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_22 = null;
            {
              ArrayList _get = this.mapTernary.get(auxRightEntity_1.getName());
              String _lowerCase_9 = auxRightEntity_1.getName().toLowerCase();
              String _plus_12 = (_lowerCase_9 + "_");
              String _lowerCase_10 = att_13.getName().toString().toLowerCase();
              String _plus_13 = (_plus_12 + _lowerCase_10);
              _get.add(_plus_13);
              _xblockexpression_22 = null;
            }
            _builder.append(_xblockexpression_22);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("CONSTRAINT pk_");
        String _lowerCase_9 = r_1.getName().toLowerCase();
        _builder.append(_lowerCase_9, "\t");
        _builder.append(" PRIMARY KEY (");
        {
          boolean _hasElements_1 = false;
          for(final Object pk_1 : this.primaryKeys_Ternary) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _string_1 = pk_1.toString();
            _builder.append(_string_1, "\t");
          }
        }
        _builder.append(") ");
        Object _xblockexpression_23 = null;
        {
          this.primaryKeys_Ternary.clear();
          _xblockexpression_23 = null;
        }
        _builder.append(_xblockexpression_23, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Object _xblockexpression_24 = null;
        {
          this.sc_AlterTbl_1toN.append(this.pgsql_AlterTable_Ternary_RefMapper(r_1.getName(), auxEnt_1.getName(), auxRel_1.getName(), auxLeftEntity_1.getName(), auxRightEntity_1.getName(), this.mapTernary));
          _xblockexpression_24 = null;
        }
        _builder.append(_xblockexpression_24, "\t");
        Object _xblockexpression_25 = null;
        {
          this.mapTernary.clear();
          _xblockexpression_25 = null;
        }
        _builder.append(_xblockexpression_25, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append(");");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_GeneralizationRefMapper(final ERModel m) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Entity, Boolean> _function = (Entity it) -> {
        Entity _is = it.getIs();
        return Boolean.valueOf((_is != null));
      };
      Iterable<Entity> _filter = IterableExtensions.<Entity>filter(m.getEntities(), _function);
      for(final Entity e : _filter) {
        _builder.append("-- GENERALIZATION");
        _builder.newLine();
        _builder.append("ALTER TABLE ONLY public.");
        String _lowerCase = e.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" ADD CONSTRAINT fk_gen_");
        String _lowerCase_1 = e.getName().toLowerCase();
        String _plus = (_lowerCase_1 + "_");
        String _lowerCase_2 = e.getIs().toString().toLowerCase();
        String _plus_1 = (_plus + _lowerCase_2);
        _builder.append(_plus_1);
        _builder.append(" FOREIGN KEY (");
        {
          final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(e.getIs().getAttributes(), _function_1);
          boolean _hasElements = false;
          for(final Attribute a : _filter_1) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _string = a.getName().toString();
            _builder.append(_string);
          }
        }
        _builder.append(") REFERENCES public.");
        String _lowerCase_3 = e.getIs().toString().toLowerCase();
        _builder.append(_lowerCase_3);
        _builder.append(" (");
        {
          final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(e.getIs().getAttributes(), _function_2);
          boolean _hasElements_1 = false;
          for(final Attribute a_1 : _filter_2) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _string_1 = a_1.getName().toString();
            _builder.append(_string_1);
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_AlterTable_1to1_1toN_RefMapper(final Entity alterTbl, final Entity refTbl, final Relation r, final Boolean selfRelWithGen, final Boolean selfRelNoGen, final Boolean relWithOneGen, final Boolean relNoGen, final String cardinalityRel) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((selfRelWithGen).booleanValue()) {
        _builder.append("-- ");
        _builder.append(cardinalityRel);
        _builder.append(": Self-relation WITH generalization");
        _builder.newLineIfNotEmpty();
        _builder.append("ALTER TABLE ONLY public.");
        String _lowerCase = alterTbl.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" ADD CONSTRAINT fk_");
        String _lowerCase_1 = r.getName().toLowerCase();
        _builder.append(_lowerCase_1);
        _builder.append(" FOREIGN KEY (");
        {
          final Function1<Attribute, Boolean> _function = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(refTbl.getAttributes(), _function);
          boolean _hasElements = false;
          for(final Attribute a : _filter) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _lowerCase_2 = r.getName().toLowerCase();
            String _plus = (_lowerCase_2 + "_");
            String _lowerCase_3 = a.getName().toLowerCase();
            String _plus_1 = (_plus + _lowerCase_3);
            _builder.append(_plus_1);
          }
        }
        _builder.append(") REFERENCES public.");
        String _lowerCase_4 = alterTbl.getName().toLowerCase();
        _builder.append(_lowerCase_4);
        _builder.append(" (");
        {
          final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(refTbl.getAttributes(), _function_1);
          boolean _hasElements_1 = false;
          for(final Attribute a_1 : _filter_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _lowerCase_5 = a_1.getName().toLowerCase();
            _builder.append(_lowerCase_5);
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      } else {
        if ((selfRelNoGen).booleanValue()) {
          _builder.append("-- ");
          _builder.append(cardinalityRel);
          _builder.append(": Self-relation WITHOUT generalization");
          _builder.newLineIfNotEmpty();
          _builder.append("ALTER TABLE ONLY public.");
          String _lowerCase_6 = alterTbl.getName().toLowerCase();
          _builder.append(_lowerCase_6);
          _builder.append(" ADD CONSTRAINT fk_");
          String _lowerCase_7 = r.getName().toLowerCase();
          _builder.append(_lowerCase_7);
          _builder.append(" FOREIGN KEY (");
          {
            final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
              return Boolean.valueOf(it.isIsKey());
            };
            Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(alterTbl.getAttributes(), _function_2);
            boolean _hasElements_2 = false;
            for(final Attribute a_2 : _filter_2) {
              if (!_hasElements_2) {
                _hasElements_2 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_8 = r.getName().toLowerCase();
              String _plus_2 = (_lowerCase_8 + "_");
              String _lowerCase_9 = a_2.getName().toLowerCase();
              String _plus_3 = (_plus_2 + _lowerCase_9);
              _builder.append(_plus_3);
            }
          }
          _builder.append(") REFERENCES public.");
          String _lowerCase_10 = refTbl.getName().toLowerCase();
          _builder.append(_lowerCase_10);
          _builder.append(" (");
          {
            final Function1<Attribute, Boolean> _function_3 = (Attribute it) -> {
              return Boolean.valueOf(it.isIsKey());
            };
            Iterable<Attribute> _filter_3 = IterableExtensions.<Attribute>filter(alterTbl.getAttributes(), _function_3);
            boolean _hasElements_3 = false;
            for(final Attribute a_3 : _filter_3) {
              if (!_hasElements_3) {
                _hasElements_3 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_11 = a_3.getName().toLowerCase();
              _builder.append(_lowerCase_11);
            }
          }
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        } else {
          if ((relWithOneGen).booleanValue()) {
            _builder.append("-- ");
            _builder.append(cardinalityRel);
            _builder.append(": Relationship with ONE ENTITY that HAS GENERALIZATION");
            _builder.newLineIfNotEmpty();
            _builder.append("ALTER TABLE ONLY public.");
            String _lowerCase_12 = alterTbl.getName().toLowerCase();
            _builder.append(_lowerCase_12);
            _builder.append(" ADD CONSTRAINT fk_");
            String _lowerCase_13 = r.getName().toLowerCase();
            _builder.append(_lowerCase_13);
            _builder.append(" FOREIGN KEY (");
            {
              final Function1<Attribute, Boolean> _function_4 = (Attribute it) -> {
                return Boolean.valueOf(it.isIsKey());
              };
              Iterable<Attribute> _filter_4 = IterableExtensions.<Attribute>filter(refTbl.getIs().getAttributes(), _function_4);
              boolean _hasElements_4 = false;
              for(final Attribute a_4 : _filter_4) {
                if (!_hasElements_4) {
                  _hasElements_4 = true;
                } else {
                  _builder.appendImmediate(", ", "");
                }
                String _lowerCase_14 = r.getName().toLowerCase();
                String _plus_4 = (_lowerCase_14 + "_");
                String _lowerCase_15 = a_4.getName().toLowerCase();
                String _plus_5 = (_plus_4 + _lowerCase_15);
                _builder.append(_plus_5);
              }
            }
            _builder.append(") REFERENCES public.");
            String _lowerCase_16 = refTbl.getName().toLowerCase();
            _builder.append(_lowerCase_16);
            _builder.append(" (");
            {
              final Function1<Attribute, Boolean> _function_5 = (Attribute it) -> {
                return Boolean.valueOf(it.isIsKey());
              };
              Iterable<Attribute> _filter_5 = IterableExtensions.<Attribute>filter(refTbl.getIs().getAttributes(), _function_5);
              boolean _hasElements_5 = false;
              for(final Attribute a_5 : _filter_5) {
                if (!_hasElements_5) {
                  _hasElements_5 = true;
                } else {
                  _builder.appendImmediate(", ", "");
                }
                String _lowerCase_17 = a_5.getName().toLowerCase();
                _builder.append(_lowerCase_17);
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            if ((relNoGen).booleanValue()) {
              _builder.append("-- ");
              _builder.append(cardinalityRel);
              _builder.append(": Relationship in which BOTH ENTITIES have NO GENERALIZATION");
              _builder.newLineIfNotEmpty();
              _builder.append("ALTER TABLE ONLY public.");
              String _lowerCase_18 = alterTbl.getName().toLowerCase();
              _builder.append(_lowerCase_18);
              _builder.append(" ADD CONSTRAINT fk_");
              String _lowerCase_19 = r.getName().toLowerCase();
              _builder.append(_lowerCase_19);
              _builder.append(" FOREIGN KEY (");
              {
                final Function1<Attribute, Boolean> _function_6 = (Attribute it) -> {
                  return Boolean.valueOf(it.isIsKey());
                };
                Iterable<Attribute> _filter_6 = IterableExtensions.<Attribute>filter(refTbl.getAttributes(), _function_6);
                boolean _hasElements_6 = false;
                for(final Attribute a_6 : _filter_6) {
                  if (!_hasElements_6) {
                    _hasElements_6 = true;
                  } else {
                    _builder.appendImmediate(", ", "");
                  }
                  String _lowerCase_20 = r.getName().toLowerCase();
                  String _plus_6 = (_lowerCase_20 + "_");
                  String _lowerCase_21 = a_6.getName().toLowerCase();
                  String _plus_7 = (_plus_6 + _lowerCase_21);
                  _builder.append(_plus_7);
                }
              }
              _builder.append(") REFERENCES public.");
              String _lowerCase_22 = refTbl.getName().toLowerCase();
              _builder.append(_lowerCase_22);
              _builder.append(" (");
              {
                final Function1<Attribute, Boolean> _function_7 = (Attribute it) -> {
                  return Boolean.valueOf(it.isIsKey());
                };
                Iterable<Attribute> _filter_7 = IterableExtensions.<Attribute>filter(refTbl.getAttributes(), _function_7);
                boolean _hasElements_7 = false;
                for(final Attribute a_7 : _filter_7) {
                  if (!_hasElements_7) {
                    _hasElements_7 = true;
                  } else {
                    _builder.appendImmediate(", ", "");
                  }
                  String _lowerCase_23 = a_7.getName().toLowerCase();
                  _builder.append(_lowerCase_23);
                }
              }
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_AlterTable_NtoN_RefMapper(final Entity leftEnt, final Entity rightEnt, final Relation r, final Boolean selfRelWithGen, final Boolean selfRelNoGen, final Boolean relWithOneGen, final Boolean relNoGen, final String cardinalityRel) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((selfRelWithGen).booleanValue()) {
        _builder.append("-- ");
        _builder.append(cardinalityRel);
        _builder.append(": Self-relation WITH generalization");
        _builder.newLineIfNotEmpty();
        _builder.append("ALTER TABLE ONLY public.");
        String _lowerCase = r.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" ADD CONSTRAINT fk_");
        String _lowerCase_1 = r.getName().toLowerCase();
        String _plus = (_lowerCase_1 + "_");
        String _lowerCase_2 = leftEnt.getName().toLowerCase();
        String _plus_1 = (_plus + _lowerCase_2);
        _builder.append(_plus_1);
        _builder.append("_1 FOREIGN KEY (");
        {
          final Function1<Attribute, Boolean> _function = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter = IterableExtensions.<Attribute>filter(leftEnt.getIs().getAttributes(), _function);
          boolean _hasElements = false;
          for(final Attribute a : _filter) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _lowerCase_3 = leftEnt.getName().toLowerCase();
            String _plus_2 = (_lowerCase_3 + "_");
            String _lowerCase_4 = a.getName().toLowerCase();
            String _plus_3 = (_plus_2 + _lowerCase_4);
            String _plus_4 = (_plus_3 + "_1");
            _builder.append(_plus_4);
          }
        }
        _builder.append(") REFERENCES public.");
        String _lowerCase_5 = leftEnt.getName().toLowerCase();
        _builder.append(_lowerCase_5);
        _builder.append(" (");
        {
          final Function1<Attribute, Boolean> _function_1 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_1 = IterableExtensions.<Attribute>filter(leftEnt.getIs().getAttributes(), _function_1);
          boolean _hasElements_1 = false;
          for(final Attribute a_1 : _filter_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _lowerCase_6 = a_1.getName().toLowerCase();
            _builder.append(_lowerCase_6);
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("ALTER TABLE ONLY public.");
        String _lowerCase_7 = r.getName().toLowerCase();
        _builder.append(_lowerCase_7);
        _builder.append(" ADD CONSTRAINT fk_");
        String _lowerCase_8 = r.getName().toLowerCase();
        String _plus_5 = (_lowerCase_8 + "_");
        String _lowerCase_9 = rightEnt.getName().toLowerCase();
        String _plus_6 = (_plus_5 + _lowerCase_9);
        _builder.append(_plus_6);
        _builder.append("_2 FOREIGN KEY (");
        {
          final Function1<Attribute, Boolean> _function_2 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_2 = IterableExtensions.<Attribute>filter(rightEnt.getIs().getAttributes(), _function_2);
          boolean _hasElements_2 = false;
          for(final Attribute a_2 : _filter_2) {
            if (!_hasElements_2) {
              _hasElements_2 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _lowerCase_10 = rightEnt.getName().toLowerCase();
            String _plus_7 = (_lowerCase_10 + "_");
            String _lowerCase_11 = a_2.getName().toLowerCase();
            String _plus_8 = (_plus_7 + _lowerCase_11);
            String _plus_9 = (_plus_8 + "_2");
            _builder.append(_plus_9);
          }
        }
        _builder.append(") REFERENCES public.");
        String _lowerCase_12 = rightEnt.getName().toLowerCase();
        _builder.append(_lowerCase_12);
        _builder.append(" (");
        {
          final Function1<Attribute, Boolean> _function_3 = (Attribute it) -> {
            return Boolean.valueOf(it.isIsKey());
          };
          Iterable<Attribute> _filter_3 = IterableExtensions.<Attribute>filter(rightEnt.getIs().getAttributes(), _function_3);
          boolean _hasElements_3 = false;
          for(final Attribute a_3 : _filter_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _lowerCase_13 = a_3.getName().toLowerCase();
            _builder.append(_lowerCase_13);
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      } else {
        if ((selfRelNoGen).booleanValue()) {
          _builder.append("-- ");
          _builder.append(cardinalityRel);
          _builder.append(": Self-relation WITHOUT generalization");
          _builder.newLineIfNotEmpty();
          _builder.append("ALTER TABLE ONLY public.");
          String _lowerCase_14 = r.getName().toLowerCase();
          _builder.append(_lowerCase_14);
          _builder.append(" ADD CONSTRAINT fk_");
          String _lowerCase_15 = r.getName().toLowerCase();
          String _plus_10 = (_lowerCase_15 + "_");
          String _lowerCase_16 = leftEnt.getName().toLowerCase();
          String _plus_11 = (_plus_10 + _lowerCase_16);
          _builder.append(_plus_11);
          _builder.append("_1 FOREIGN KEY (");
          {
            final Function1<Attribute, Boolean> _function_4 = (Attribute it) -> {
              return Boolean.valueOf(it.isIsKey());
            };
            Iterable<Attribute> _filter_4 = IterableExtensions.<Attribute>filter(leftEnt.getAttributes(), _function_4);
            boolean _hasElements_4 = false;
            for(final Attribute a_4 : _filter_4) {
              if (!_hasElements_4) {
                _hasElements_4 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_17 = leftEnt.getName().toLowerCase();
              String _plus_12 = (_lowerCase_17 + "_");
              String _lowerCase_18 = a_4.getName().toLowerCase();
              String _plus_13 = (_plus_12 + _lowerCase_18);
              String _plus_14 = (_plus_13 + "_1");
              _builder.append(_plus_14);
            }
          }
          _builder.append(") REFERENCES public.");
          String _lowerCase_19 = leftEnt.getName().toLowerCase();
          _builder.append(_lowerCase_19);
          _builder.append(" (");
          {
            final Function1<Attribute, Boolean> _function_5 = (Attribute it) -> {
              return Boolean.valueOf(it.isIsKey());
            };
            Iterable<Attribute> _filter_5 = IterableExtensions.<Attribute>filter(leftEnt.getAttributes(), _function_5);
            boolean _hasElements_5 = false;
            for(final Attribute a_5 : _filter_5) {
              if (!_hasElements_5) {
                _hasElements_5 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_20 = a_5.getName().toLowerCase();
              _builder.append(_lowerCase_20);
            }
          }
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("ALTER TABLE ONLY public.");
          String _lowerCase_21 = r.getName().toLowerCase();
          _builder.append(_lowerCase_21);
          _builder.append(" ADD CONSTRAINT fk_");
          String _lowerCase_22 = r.getName().toLowerCase();
          String _plus_15 = (_lowerCase_22 + "_");
          String _lowerCase_23 = rightEnt.getName().toLowerCase();
          String _plus_16 = (_plus_15 + _lowerCase_23);
          _builder.append(_plus_16);
          _builder.append("_2 FOREIGN KEY (");
          {
            final Function1<Attribute, Boolean> _function_6 = (Attribute it) -> {
              return Boolean.valueOf(it.isIsKey());
            };
            Iterable<Attribute> _filter_6 = IterableExtensions.<Attribute>filter(rightEnt.getAttributes(), _function_6);
            boolean _hasElements_6 = false;
            for(final Attribute a_6 : _filter_6) {
              if (!_hasElements_6) {
                _hasElements_6 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_24 = rightEnt.getName().toLowerCase();
              String _plus_17 = (_lowerCase_24 + "_");
              String _lowerCase_25 = a_6.getName().toLowerCase();
              String _plus_18 = (_plus_17 + _lowerCase_25);
              String _plus_19 = (_plus_18 + "_2");
              _builder.append(_plus_19);
            }
          }
          _builder.append(") REFERENCES public.");
          String _lowerCase_26 = rightEnt.getName().toLowerCase();
          _builder.append(_lowerCase_26);
          _builder.append(" (");
          {
            final Function1<Attribute, Boolean> _function_7 = (Attribute it) -> {
              return Boolean.valueOf(it.isIsKey());
            };
            Iterable<Attribute> _filter_7 = IterableExtensions.<Attribute>filter(rightEnt.getAttributes(), _function_7);
            boolean _hasElements_7 = false;
            for(final Attribute a_7 : _filter_7) {
              if (!_hasElements_7) {
                _hasElements_7 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_27 = a_7.getName().toLowerCase();
              _builder.append(_lowerCase_27);
            }
          }
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        } else {
          if ((relWithOneGen).booleanValue()) {
            _builder.append("-- ");
            _builder.append(cardinalityRel);
            _builder.append(": Relationship with ONE ENTITY that HAS GENERALIZATION");
            _builder.newLineIfNotEmpty();
            _builder.append("ALTER TABLE ONLY public.");
            String _lowerCase_28 = r.getName().toLowerCase();
            _builder.append(_lowerCase_28);
            _builder.append(" ADD CONSTRAINT fk_");
            String _lowerCase_29 = r.getName().toLowerCase();
            String _plus_20 = (_lowerCase_29 + "_");
            String _lowerCase_30 = leftEnt.getName().toLowerCase();
            String _plus_21 = (_plus_20 + _lowerCase_30);
            _builder.append(_plus_21);
            _builder.append(" FOREIGN KEY (");
            {
              final Function1<Attribute, Boolean> _function_8 = (Attribute it) -> {
                return Boolean.valueOf(it.isIsKey());
              };
              Iterable<Attribute> _filter_8 = IterableExtensions.<Attribute>filter(leftEnt.getIs().getAttributes(), _function_8);
              boolean _hasElements_8 = false;
              for(final Attribute a_8 : _filter_8) {
                if (!_hasElements_8) {
                  _hasElements_8 = true;
                } else {
                  _builder.appendImmediate(", ", "");
                }
                String _lowerCase_31 = leftEnt.getName().toLowerCase();
                String _plus_22 = (_lowerCase_31 + "_");
                String _lowerCase_32 = a_8.getName().toLowerCase();
                String _plus_23 = (_plus_22 + _lowerCase_32);
                _builder.append(_plus_23);
              }
            }
            _builder.append(") REFERENCES public.");
            String _lowerCase_33 = leftEnt.getName().toLowerCase();
            _builder.append(_lowerCase_33);
            _builder.append(" (");
            {
              final Function1<Attribute, Boolean> _function_9 = (Attribute it) -> {
                return Boolean.valueOf(it.isIsKey());
              };
              Iterable<Attribute> _filter_9 = IterableExtensions.<Attribute>filter(leftEnt.getIs().getAttributes(), _function_9);
              boolean _hasElements_9 = false;
              for(final Attribute a_9 : _filter_9) {
                if (!_hasElements_9) {
                  _hasElements_9 = true;
                } else {
                  _builder.appendImmediate(", ", "");
                }
                String _lowerCase_34 = a_9.getName().toLowerCase();
                _builder.append(_lowerCase_34);
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            if ((relNoGen).booleanValue()) {
              _builder.append("-- ");
              _builder.append(cardinalityRel);
              _builder.append(": Relationship in which BOTH ENTITIES have NO GENERALIZATION");
              _builder.newLineIfNotEmpty();
              _builder.append("ALTER TABLE ONLY public.");
              String _lowerCase_35 = r.getName().toLowerCase();
              _builder.append(_lowerCase_35);
              _builder.append(" ADD CONSTRAINT fk_");
              String _lowerCase_36 = r.getName().toLowerCase();
              String _plus_24 = (_lowerCase_36 + "_");
              String _lowerCase_37 = leftEnt.getName().toLowerCase();
              String _plus_25 = (_plus_24 + _lowerCase_37);
              _builder.append(_plus_25);
              _builder.append(" FOREIGN KEY (");
              {
                final Function1<Attribute, Boolean> _function_10 = (Attribute it) -> {
                  return Boolean.valueOf(it.isIsKey());
                };
                Iterable<Attribute> _filter_10 = IterableExtensions.<Attribute>filter(leftEnt.getAttributes(), _function_10);
                boolean _hasElements_10 = false;
                for(final Attribute a_10 : _filter_10) {
                  if (!_hasElements_10) {
                    _hasElements_10 = true;
                  } else {
                    _builder.appendImmediate(", ", "");
                  }
                  String _lowerCase_38 = leftEnt.getName().toLowerCase();
                  String _plus_26 = (_lowerCase_38 + "_");
                  String _lowerCase_39 = a_10.getName().toLowerCase();
                  String _plus_27 = (_plus_26 + _lowerCase_39);
                  _builder.append(_plus_27);
                }
              }
              _builder.append(") REFERENCES public.");
              String _lowerCase_40 = leftEnt.getName().toLowerCase();
              _builder.append(_lowerCase_40);
              _builder.append(" (");
              {
                final Function1<Attribute, Boolean> _function_11 = (Attribute it) -> {
                  return Boolean.valueOf(it.isIsKey());
                };
                Iterable<Attribute> _filter_11 = IterableExtensions.<Attribute>filter(leftEnt.getAttributes(), _function_11);
                boolean _hasElements_11 = false;
                for(final Attribute a_11 : _filter_11) {
                  if (!_hasElements_11) {
                    _hasElements_11 = true;
                  } else {
                    _builder.appendImmediate(", ", "");
                  }
                  String _lowerCase_41 = a_11.getName().toLowerCase();
                  _builder.append(_lowerCase_41);
                }
              }
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence pgsql_AlterTable_Ternary_RefMapper(final String tabelaTernaria, final String tabelaEntidade, final String nomeRelacaoNN, final String leftNN, final String rightNN, final HashMap keysMap) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("-- [Ternary Relationship]");
    _builder.newLine();
    _builder.append("ALTER TABLE ONLY public.");
    _builder.append(tabelaTernaria);
    _builder.append(" ADD CONSTRAINT fk_");
    String _lowerCase = tabelaEntidade.toLowerCase();
    String _plus = ((tabelaTernaria + "_") + _lowerCase);
    _builder.append(_plus);
    _builder.append(" FOREIGN KEY (");
    {
      ArrayList _get = this.mapTernary.get(tabelaEntidade);
      boolean _hasElements = false;
      for(final Object e : _get) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _lowerCase_1 = tabelaEntidade.toString().toLowerCase();
        String _plus_1 = (_lowerCase_1 + "_");
        String _string = e.toString();
        String _plus_2 = (_plus_1 + _string);
        _builder.append(_plus_2);
      }
    }
    _builder.append(") REFERENCES public.");
    _builder.append(tabelaEntidade);
    _builder.append(" (");
    {
      ArrayList _get_1 = this.mapTernary.get(tabelaEntidade);
      boolean _hasElements_1 = false;
      for(final Object e_1 : _get_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _string_1 = e_1.toString();
        _builder.append(_string_1);
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("ALTER TABLE ONLY public.");
    _builder.append(tabelaTernaria);
    _builder.append(" ADD CONSTRAINT fk_");
    String _lowerCase_2 = nomeRelacaoNN.toLowerCase();
    String _plus_3 = ((tabelaTernaria + "_") + _lowerCase_2);
    _builder.append(_plus_3);
    _builder.append(" FOREIGN KEY (");
    {
      ArrayList _get_2 = this.mapTernary.get(leftNN);
      boolean _hasElements_2 = false;
      for(final Object e_2 : _get_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _string_2 = e_2.toString();
        _builder.append(_string_2);
      }
    }
    _builder.append(", ");
    {
      ArrayList _get_3 = this.mapTernary.get(rightNN);
      boolean _hasElements_3 = false;
      for(final Object e_3 : _get_3) {
        if (!_hasElements_3) {
          _hasElements_3 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _string_3 = e_3.toString();
        _builder.append(_string_3);
      }
    }
    _builder.append(") REFERENCES public.");
    _builder.append(nomeRelacaoNN);
    _builder.append(" (");
    {
      ArrayList _get_4 = this.mapTernary.get(leftNN);
      boolean _hasElements_4 = false;
      for(final Object e_4 : _get_4) {
        if (!_hasElements_4) {
          _hasElements_4 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _string_4 = e_4.toString();
        _builder.append(_string_4);
      }
    }
    _builder.append(", ");
    {
      ArrayList _get_5 = this.mapTernary.get(rightNN);
      boolean _hasElements_5 = false;
      for(final Object e_5 : _get_5) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _string_5 = e_5.toString();
        _builder.append(_string_5);
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
