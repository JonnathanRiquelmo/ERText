/**
 * generated by Xtext 2.17.0
 */
package org.xtext.unipampa.erdsl.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.unipampa.erdsl.erDsl.Attribute;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ErDslGenerator extends AbstractGenerator {
  private final ArrayList<Object> myListFKs = CollectionLiterals.<Object>newArrayList();
  
  private int globalFKcounter_1to1 = 0;
  
  private int globalFKcounter_1toN = 0;
  
  private int counter = 0;
  
  private int AuxCounterA = 0;
  
  private int AuxCounterB = 0;
  
  private boolean auxT1 = false;
  
  private boolean auxT2 = false;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    if (((!StringExtensions.isNullOrEmpty(modeloER.getTargetGenerator())) && modeloER.getTargetGenerator().equalsIgnoreCase("logical schema"))) {
      String _name = modeloER.getDomain().getName();
      String _plus = ("LogicalSchema_" + _name);
      String _plus_1 = (_plus + ".html");
      fsa.generateFile(_plus_1, this.CreateLogical(modeloER));
    } else {
      if (((!StringExtensions.isNullOrEmpty(modeloER.getTargetGenerator())) && modeloER.getTargetGenerator().equalsIgnoreCase("postgresql"))) {
        String _name_1 = modeloER.getDomain().getName();
        String _plus_2 = ("PostgreSQL_" + _name_1);
        String _plus_3 = (_plus_2 + ".sql");
        fsa.generateFile(_plus_3, this.postgreSQLCreate(modeloER));
      } else {
        if (((!StringExtensions.isNullOrEmpty(modeloER.getTargetGenerator())) && modeloER.getTargetGenerator().equalsIgnoreCase("mysql"))) {
          String _name_2 = modeloER.getDomain().getName();
          String _plus_4 = ("MySQL_" + _name_2);
          String _plus_5 = (_plus_4 + ".sql");
          fsa.generateFile(_plus_5, this.CreateMySQL(modeloER));
        } else {
          if ((StringExtensions.isNullOrEmpty(modeloER.getTargetGenerator()) || modeloER.getTargetGenerator().equalsIgnoreCase("all"))) {
            String _name_3 = modeloER.getDomain().getName();
            String _plus_6 = ("LogicalSchema_" + _name_3);
            String _plus_7 = (_plus_6 + ".html");
            fsa.generateFile(_plus_7, this.CreateLogical(modeloER));
            String _name_4 = modeloER.getDomain().getName();
            String _plus_8 = ("PostgreSQL_" + _name_4);
            String _plus_9 = (_plus_8 + ".sql");
            fsa.generateFile(_plus_9, this.postgreSQLCreate(modeloER));
            String _name_5 = modeloER.getDomain().getName();
            String _plus_10 = ("MySQL_" + _name_5);
            String _plus_11 = (_plus_10 + ".sql");
            fsa.generateFile(_plus_11, this.CreateMySQL(modeloER));
          }
        }
      }
    }
  }
  
  /**
   * LOGICAL SCHEMA (HTML) GENERATOR CODE
   */
  public CharSequence CreateLogical(final ERModel modeloER) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<title>ERtext Logical schema</title>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" integrity=\"sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN\" crossorigin=\"anonymous\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("body    { background: #ffffff; border: 1px solid black, padding: 5px 0 5px 0}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append(".title  { font: bold 160% serif; color: #0066FF; padding: 10px 0 10px 0; text-align: center; background: #ccc8c8}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append(".stitle { font: bold 120% sans-serif; color: #0044DD; padding: 10px 0 10px 0 }");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append(".sstitle{ font: bold 120% serif; color: #000000; background: #efefef; padding: 5px 0 5px 0; padding-left: 20px; }");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append(".field  { font: 100% sans-serif; color: #000000; padding: 2px; padding-left: 50px; border: 0px solid black}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append(".value  { font: 100% sans-serif; color: #505050 }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body> ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"panel\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"title badge-primary\">ERtext Logical schema</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"sstitle\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<a href=\"#domain\" class=\"btn btn-primary\" data-toggle=\"collapse\"><i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i></a>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("&nbsp Modelled Domain");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div id=\"domain\" class=\"panel-body collapse in\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"field\">");
    String _upperCase = modeloER.getDomain().getName().toUpperCase();
    _builder.append(_upperCase, "\t");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<hr style=\"width:100%;text-align:left;margin-left:0\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"sstitle\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<a href=\"#entities\" class=\"btn btn-primary\" data-toggle=\"collapse\"><i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i></a>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("&nbsp Resulting Entities");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</p>\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div id=\"entities\" class=\"panel-body collapse in\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"field\">");
    _builder.newLine();
    {
      EList<Entity> _entities = modeloER.getEntities();
      boolean _hasElements = false;
      for(final Entity entity : _entities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" )</br></br>", "");
        }
        _builder.append("\t\t");
        _builder.append("<span class=\"badge badge-secondary\">");
        String _upperCase_1 = entity.getName().toUpperCase();
        _builder.append(_upperCase_1, "\t\t");
        _builder.append("</span> (");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        {
          Entity _is = entity.getIs();
          boolean _tripleEquals = (_is == null);
          boolean _not = (!_tripleEquals);
          if (_not) {
            {
              EList<Entity> _entities_1 = modeloER.getEntities();
              for(final Entity aux : _entities_1) {
                {
                  boolean _equalsIgnoreCase = aux.getName().equalsIgnoreCase(entity.getIs().toString());
                  if (_equalsIgnoreCase) {
                    {
                      EList<Attribute> _attributes = aux.getAttributes();
                      for(final Attribute auxAttributes : _attributes) {
                        {
                          boolean _isIsKey = auxAttributes.isIsKey();
                          if (_isIsKey) {
                            _builder.append("\t\t");
                            _builder.append("<font color=\"blue\"><b>");
                            String _name = auxAttributes.getName();
                            _builder.append(_name, "\t\t");
                            _builder.append("</b></font><font color=\"red\"><b>*</b></font>, ");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.newLine();
        {
          EList<Attribute> _attributes_1 = entity.getAttributes();
          boolean _hasElements_1 = false;
          for(final Attribute attribute : _attributes_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "\t\t");
            }
            {
              boolean _isIsKey_1 = attribute.isIsKey();
              if (_isIsKey_1) {
                _builder.append("\t\t");
                _builder.append("<font color=\"red\"><b>");
                String _name_1 = attribute.getName();
                _builder.append(_name_1, "\t\t");
                _builder.append("*</b></font>");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _isIsKey_2 = attribute.isIsKey();
                boolean _not_1 = (!_isIsKey_2);
                if (_not_1) {
                  _builder.append("\t\t");
                  String _name_2 = attribute.getName();
                  _builder.append(_name_2, "\t\t");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        {
          EList<Relation> _relations = modeloER.getRelations();
          for(final Relation relation : _relations) {
            _builder.append("\t\t");
            _builder.newLine();
            {
              if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
                _builder.append("\t\t");
                _builder.newLine();
                {
                  boolean _equalsIgnoreCase_1 = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity.getName());
                  if (_equalsIgnoreCase_1) {
                    {
                      EList<Entity> _entities_2 = modeloER.getEntities();
                      for(final Entity aux_1 : _entities_2) {
                        {
                          boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux_1.getName());
                          if (_equalsIgnoreCase_2) {
                            {
                              Entity _is_1 = aux_1.getIs();
                              boolean _tripleEquals_1 = (_is_1 == null);
                              if (_tripleEquals_1) {
                                {
                                  EList<Attribute> _attributes_2 = aux_1.getAttributes();
                                  for(final Attribute aux2 : _attributes_2) {
                                    {
                                      boolean _isIsKey_3 = aux2.isIsKey();
                                      if (_isIsKey_3) {
                                        _builder.append("\t\t");
                                        _builder.append(", <font color=\"blue\"><b>");
                                        String _string = relation.getLeftEnding().getTarget().toString();
                                        _builder.append(_string, "\t\t");
                                        _builder.append("_fk</b></font>");
                                        _builder.newLineIfNotEmpty();
                                      }
                                    }
                                  }
                                }
                              } else {
                                Entity _is_2 = aux_1.getIs();
                                boolean _tripleEquals_2 = (_is_2 == null);
                                boolean _not_2 = (!_tripleEquals_2);
                                if (_not_2) {
                                  _builder.append("\t\t");
                                  _builder.append(", <font color=\"blue\"><b>");
                                  String _string_1 = aux_1.getIs().toString();
                                  _builder.append(_string_1, "\t\t");
                                  _builder.append("_fk</b></font>");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          EList<Relation> _relations_1 = modeloER.getRelations();
          for(final Relation relation_1 : _relations_1) {
            {
              if ((((relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
                _builder.append("\t\t");
                _builder.newLine();
                {
                  boolean _equalsIgnoreCase_3 = relation_1.getRightEnding().getTarget().toString().equalsIgnoreCase(entity.getName());
                  if (_equalsIgnoreCase_3) {
                    {
                      EList<Entity> _entities_3 = modeloER.getEntities();
                      for(final Entity aux_2 : _entities_3) {
                        {
                          boolean _equalsIgnoreCase_4 = relation_1.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux_2.getName());
                          if (_equalsIgnoreCase_4) {
                            {
                              Entity _is_3 = aux_2.getIs();
                              boolean _tripleEquals_3 = (_is_3 == null);
                              if (_tripleEquals_3) {
                                _builder.append("\t\t");
                                _builder.append(", <font color=\"blue\"><b>");
                                String _name_3 = aux_2.getName();
                                _builder.append(_name_3, "\t\t");
                                _builder.append("_fk</b></font>");
                                _builder.newLineIfNotEmpty();
                              } else {
                                Entity _is_4 = aux_2.getIs();
                                boolean _tripleEquals_4 = (_is_4 == null);
                                boolean _not_3 = (!_tripleEquals_4);
                                if (_not_3) {
                                  {
                                    boolean _equalsIgnoreCase_5 = relation_1.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation_1.getRightEnding().getTarget().toString());
                                    if (_equalsIgnoreCase_5) {
                                      _builder.append("\t\t");
                                      _builder.append(", <font color=\"blue\"><b>");
                                      String _string_2 = relation_1.getName().toString();
                                      _builder.append(_string_2, "\t\t");
                                      _builder.append("_fk</b></font>");
                                      _builder.newLineIfNotEmpty();
                                    } else {
                                      boolean _equalsIgnoreCase_6 = relation_1.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation_1.getRightEnding().getTarget().toString());
                                      boolean _not_4 = (!_equalsIgnoreCase_6);
                                      if (_not_4) {
                                        _builder.append("\t\t");
                                        _builder.append(", <font color=\"blue\"><b>");
                                        String _string_3 = relation_1.getLeftEnding().getTarget().toString();
                                        _builder.append(_string_3, "\t\t");
                                        _builder.append("_fk</b></font>");
                                        _builder.newLineIfNotEmpty();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
      }
      if (_hasElements) {
        _builder.append(")</br>", "\t");
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Relation> _relations_2 = modeloER.getRelations();
      for(final Relation relation_2 : _relations_2) {
        {
          if (((relation_2.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_2.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation_2.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_2.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            {
              boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(relation_2.getName());
              if (_isNullOrEmpty) {
                _builder.append("\t\t\t");
                _builder.append("</br><span class=\"badge badge-secondary\">");
                String _upperCase_2 = relation_2.getLeftEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_2, "\t\t\t");
                String _upperCase_3 = relation_2.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_3, "\t\t\t");
                _builder.append("</span> (");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("<font color=\"red\"><b>id");
                String _upperCase_4 = relation_2.getLeftEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_4, "\t\t\t");
                String _string_4 = relation_2.getRightEnding().getTarget().toString();
                _builder.append(_string_4, "\t\t\t");
                _builder.append("*</b></font>,");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(relation_2.getName());
                boolean _not_5 = (!_isNullOrEmpty_1);
                if (_not_5) {
                  _builder.append("\t\t\t");
                  _builder.append("</br><span class=\"badge badge-secondary\">");
                  String _upperCase_5 = relation_2.getName().toUpperCase();
                  _builder.append(_upperCase_5, "\t\t\t");
                  _builder.append("</span> (");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("<font color=\"red\"><b>id");
                  String _name_4 = relation_2.getName();
                  _builder.append(_name_4, "\t\t\t");
                  _builder.append("*</b></font>,");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.append("\t\t\t");
            _builder.newLine();
            {
              EList<Entity> _entities_4 = modeloER.getEntities();
              for(final Entity entity_1 : _entities_4) {
                _builder.append("\t\t\t");
                _builder.newLine();
                {
                  if ((relation_2.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && (relation_2.getLeftEnding().getTarget().toString() != relation_2.getRightEnding().getTarget().toString()))) {
                    _builder.append("\t\t\t");
                    _builder.append("<font color=\"blue\"><b>");
                    String _string_5 = relation_2.getLeftEnding().getTarget().toString();
                    _builder.append(_string_5, "\t\t\t");
                    _builder.append("_fk</b></font>,");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t\t");
                _builder.newLine();
                {
                  if ((relation_2.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && (relation_2.getRightEnding().getTarget().toString() != relation_2.getLeftEnding().getTarget().toString()))) {
                    _builder.append("\t\t\t");
                    _builder.append("<font color=\"blue\"><b>");
                    String _string_6 = relation_2.getRightEnding().getTarget().toString();
                    _builder.append(_string_6, "\t\t\t");
                    _builder.append("_fk</b></font>");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t\t");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("\t\t\t\t");
                _builder.newLine();
                {
                  if ((relation_2.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && relation_2.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation_2.getRightEnding().getTarget().toString()))) {
                    _builder.append("\t\t\t");
                    _builder.newLine();
                    {
                      EList<Attribute> _attributes_3 = entity_1.getAttributes();
                      for(final Attribute attribute_1 : _attributes_3) {
                        {
                          boolean _isIsKey_4 = attribute_1.isIsKey();
                          if (_isIsKey_4) {
                            _builder.append("\t\t\t");
                            _builder.append("<font color=\"blue\"><b>");
                            String _name_5 = attribute_1.getName();
                            _builder.append(_name_5, "\t\t\t");
                            _builder.append("__fk1</b></font>,");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t\t");
                _builder.newLine();
                {
                  if ((relation_2.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && relation_2.getRightEnding().getTarget().toString().equalsIgnoreCase(relation_2.getLeftEnding().getTarget().toString()))) {
                    {
                      EList<Attribute> _attributes_4 = entity_1.getAttributes();
                      for(final Attribute attribute_2 : _attributes_4) {
                        {
                          boolean _isIsKey_5 = attribute_2.isIsKey();
                          if (_isIsKey_5) {
                            _builder.append("\t\t\t");
                            _builder.append("<font color=\"blue\"><b>");
                            String _name_6 = attribute_2.getName();
                            _builder.append(_name_6, "\t\t\t");
                            _builder.append("__fk2</b></font>");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t\t");
                _builder.append("\t\t");
                _builder.newLine();
              }
            }
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t");
            _builder.newLine();
            {
              EList<Attribute> _attributes_5 = relation_2.getAttributes();
              for(final Attribute attribute_3 : _attributes_5) {
                {
                  if (((!StringExtensions.isNullOrEmpty(attribute_3.getName())) && attribute_3.isIsKey())) {
                    _builder.append("\t\t\t");
                    _builder.append(", <font color=\"red\"><b>");
                    String _name_7 = attribute_3.getName();
                    _builder.append(_name_7, "\t\t\t");
                    _builder.append("*</b></font>");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.newLine();
            {
              EList<Attribute> _attributes_6 = relation_2.getAttributes();
              for(final Attribute attribute_4 : _attributes_6) {
                {
                  if (((!StringExtensions.isNullOrEmpty(attribute_4.getName())) && (!attribute_4.isIsKey()))) {
                    _builder.append("\t\t\t");
                    _builder.append(", ");
                    String _name_8 = attribute_4.getName();
                    _builder.append(_name_8, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append(")</br>");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("</br>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Relation> _relations_3 = modeloER.getRelations();
      for(final Relation relation_3 : _relations_3) {
        {
          if (((relation_3.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_3.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation_3.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_3.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            {
              EList<Relation> _relations_4 = modeloER.getRelations();
              for(final Relation aux_3 : _relations_4) {
                _builder.append("\t");
                _builder.newLine();
                {
                  if (((!StringExtensions.isNullOrEmpty(relation_3.getName())) && relation_3.getName().equals(aux_3.getLeftEnding().getTarget().toString()))) {
                    _builder.append("\t");
                    _builder.append("<span class=\"badge badge-secondary\">");
                    String _upperCase_6 = aux_3.getName().toUpperCase();
                    _builder.append(_upperCase_6, "\t");
                    _builder.append("</span> (");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("<font color=\"red\"><b>id");
                    String _name_9 = aux_3.getName();
                    _builder.append(_name_9, "\t");
                    _builder.append("*</b></font>, ");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("<font color=\"blue\"><b>");
                    String _string_7 = aux_3.getLeftEnding().getTarget().toString();
                    _builder.append(_string_7, "\t");
                    _builder.append("_FK</b></font>, ");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Entity> _entities_5 = modeloER.getEntities();
                      for(final Entity aux2_1 : _entities_5) {
                        {
                          boolean _equalsIgnoreCase_7 = aux_3.getRightEnding().getTarget().toString().equalsIgnoreCase(aux2_1.getName());
                          if (_equalsIgnoreCase_7) {
                            _builder.append("\t\t\t");
                            _builder.append("<font color=\"blue\"><b>");
                            _builder.append(aux2_1, "\t\t\t");
                            _builder.append("_FK</b></font>");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t");
                            _builder.newLine();
                            {
                              EList<Attribute> _attributes_7 = aux_3.getAttributes();
                              for(final Attribute attribute_5 : _attributes_7) {
                                {
                                  if (((!StringExtensions.isNullOrEmpty(attribute_5.getName())) && attribute_5.isIsKey())) {
                                    _builder.append("\t\t\t");
                                    _builder.append(", <font color=\"red\"><b>");
                                    String _name_10 = attribute_5.getName();
                                    _builder.append(_name_10, "\t\t\t");
                                    _builder.append("*</b></font>");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                            _builder.newLine();
                            {
                              EList<Attribute> _attributes_8 = aux_3.getAttributes();
                              for(final Attribute attribute_6 : _attributes_8) {
                                {
                                  if (((!StringExtensions.isNullOrEmpty(attribute_6.getName())) && (!attribute_6.isIsKey()))) {
                                    _builder.append("\t\t\t");
                                    _builder.append(", ");
                                    String _name_11 = attribute_6.getName();
                                    _builder.append(_name_11, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                            _builder.append("\t\t\t");
                            _builder.append(")</br>");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  } else {
                    if (((!StringExtensions.isNullOrEmpty(relation_3.getName())) && relation_3.getName().equals(aux_3.getRightEnding().getTarget().toString()))) {
                      _builder.append("\t");
                      String _upperCase_7 = aux_3.getName().toUpperCase();
                      _builder.append(_upperCase_7, "\t");
                      _builder.append(" (");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("<font color=\"blue\"><b>");
                      String _string_8 = aux_3.getRightEnding().getTarget().toString();
                      _builder.append(_string_8, "\t");
                      _builder.append("_FK</b></font>,");
                      _builder.newLineIfNotEmpty();
                      {
                        EList<Entity> _entities_6 = modeloER.getEntities();
                        for(final Entity aux2_2 : _entities_6) {
                          {
                            boolean _equalsIgnoreCase_8 = aux_3.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux2_2.getName());
                            if (_equalsIgnoreCase_8) {
                              _builder.append("\t\t\t");
                              _builder.append("<font color=\"blue\"><b>");
                              _builder.append(aux2_2, "\t\t\t");
                              _builder.append("_FK</b></font>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t\t\t\t");
                              _builder.newLine();
                              {
                                EList<Attribute> _attributes_9 = relation_3.getAttributes();
                                for(final Attribute attribute_7 : _attributes_9) {
                                  {
                                    if (((!StringExtensions.isNullOrEmpty(attribute_7.getName())) && attribute_7.isIsKey())) {
                                      _builder.append("\t\t\t");
                                      _builder.append(", <font color=\"red\"><b>");
                                      String _name_12 = attribute_7.getName();
                                      _builder.append(_name_12, "\t\t\t");
                                      _builder.append("*</b></font>");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                              _builder.newLine();
                              {
                                EList<Attribute> _attributes_10 = relation_3.getAttributes();
                                for(final Attribute attribute_8 : _attributes_10) {
                                  {
                                    if (((!StringExtensions.isNullOrEmpty(attribute_8.getName())) && (!attribute_8.isIsKey()))) {
                                      _builder.append("\t\t\t");
                                      _builder.append(", ");
                                      String _name_13 = attribute_8.getName();
                                      _builder.append(_name_13, "\t\t\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                              _builder.append("\t\t\t");
                              _builder.append(")</br>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<hr style=\"width:100%;text-align:left;margin-left:0\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"sstitle\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<a href=\"#references\" class=\"btn btn-primary\" data-toggle=\"collapse\"><i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i></a>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("&nbsp Mapped References");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</p>\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div id=\"references\" class=\"panel-body collapse in\">\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"field\">");
    _builder.newLine();
    {
      EList<Relation> _relations_5 = modeloER.getRelations();
      boolean _hasElements_2 = false;
      for(final Relation relation_4 : _relations_5) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate("</br>", "");
        }
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t ");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_2) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_3 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_6 = (!_isNullOrEmpty_3);
                if (_not_6) {
                  String _name_14 = relation_4.getName();
                  _builder.append(_name_14);
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_9 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_9);
            _builder.append(" ");
            EObject _target = relation_4.getLeftEnding().getTarget();
            _builder.append(_target);
            _builder.append(" relates ");
            String _string_10 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_10);
            _builder.append(" ");
            String _cardinality = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality);
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_11 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_11);
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_8 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_8);
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_9 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_9);
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_4 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_4) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_5 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_7 = (!_isNullOrEmpty_5);
                if (_not_7) {
                  String _name_15 = relation_4.getName();
                  _builder.append(_name_15, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_12 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_12, "\t");
            _builder.append(" ");
            EObject _target_1 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_1, "\t");
            _builder.append(" relates ");
            String _string_13 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_13, "\t");
            _builder.append(" ");
            String _cardinality_1 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_1, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_14 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_14, "\t");
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_10 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_10, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_11 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_11, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_6 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_6) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_7 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_8 = (!_isNullOrEmpty_7);
                if (_not_8) {
                  String _name_16 = relation_4.getName();
                  _builder.append(_name_16, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_15 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_15, "\t");
            _builder.append(" ");
            EObject _target_2 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_2, "\t");
            _builder.append(" relates ");
            String _string_16 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_16, "\t");
            _builder.append(" ");
            String _cardinality_2 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_2, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_17 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_17, "\t");
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_12 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_12, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_13 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_13, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_8 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_8) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_9 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_9 = (!_isNullOrEmpty_9);
                if (_not_9) {
                  String _name_17 = relation_4.getName();
                  _builder.append(_name_17, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_18 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_18, "\t");
            _builder.append(" ");
            EObject _target_3 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_3, "\t");
            _builder.append(" relates ");
            String _string_19 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_19, "\t");
            _builder.append(" ");
            String _cardinality_3 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_3, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_20 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_20, "\t");
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_14 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_14, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_15 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_15, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_10 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_10) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_11 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_10 = (!_isNullOrEmpty_11);
                if (_not_10) {
                  String _name_18 = relation_4.getName();
                  _builder.append(_name_18);
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_21 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_21);
            _builder.append(" ");
            EObject _target_4 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_4);
            _builder.append(" relates ");
            String _string_22 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_22);
            _builder.append(" ");
            String _cardinality_4 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_4);
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_7 = modeloER.getEntities();
              for(final Entity aux_4 : _entities_7) {
                {
                  boolean _equalsIgnoreCase_9 = aux_4.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_9) {
                    {
                      Entity _is_5 = aux_4.getIs();
                      boolean _tripleEquals_5 = (_is_5 == null);
                      if (_tripleEquals_5) {
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_23 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_23, "\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_16 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_16, "\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_17 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_17, "\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_6 = aux_4.getIs();
                        boolean _tripleEquals_6 = (_is_6 == null);
                        boolean _not_11 = (!_tripleEquals_6);
                        if (_not_11) {
                          {
                            boolean _equals = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals) {
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_19 = relation_4.getName();
                              _builder.append(_name_19, "\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_18 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_18, "\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_19 = aux_4.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_19, "\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_24 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_24, "\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_20 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_20, "\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_21 = aux_4.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_21, "\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_6 = modeloER.getRelations();
              for(final Relation aux_5 : _relations_6) {
                {
                  boolean _equalsIgnoreCase_10 = aux_5.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_10) {
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_25 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_25, "\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_22 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_22, "\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_23 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_23, "\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_26 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_26, "\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_24 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_24, "\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_25 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_25, "\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_11 = aux_5.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_11) {
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_27 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_27, "\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_26 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_26, "\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_27 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_27, "\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_28 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_28, "\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_28 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_28, "\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_29 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_29, "\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_12 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_12) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_13 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_12 = (!_isNullOrEmpty_13);
                if (_not_12) {
                  String _name_20 = relation_4.getName();
                  _builder.append(_name_20, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_29 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_29, "\t");
            _builder.append(" ");
            EObject _target_5 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_5, "\t");
            _builder.append(" relates ");
            String _string_30 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_30, "\t");
            _builder.append(" ");
            String _cardinality_5 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_5, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_8 = modeloER.getEntities();
              for(final Entity aux_6 : _entities_8) {
                {
                  boolean _equalsIgnoreCase_12 = aux_6.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_12) {
                    {
                      Entity _is_7 = aux_6.getIs();
                      boolean _tripleEquals_7 = (_is_7 == null);
                      if (_tripleEquals_7) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_31 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_31, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_30 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_30, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_31 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_31, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_8 = aux_6.getIs();
                        boolean _tripleEquals_8 = (_is_8 == null);
                        boolean _not_13 = (!_tripleEquals_8);
                        if (_not_13) {
                          {
                            boolean _equals_1 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_1) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_21 = relation_4.getName();
                              _builder.append(_name_21, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_32 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_32, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_33 = aux_6.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_33, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_32 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_32, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_34 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_34, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_35 = aux_6.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_35, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_7 = modeloER.getRelations();
              for(final Relation aux_7 : _relations_7) {
                {
                  boolean _equalsIgnoreCase_13 = aux_7.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_13) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_33 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_33, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_36 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_36, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_37 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_37, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_34 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_34, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_38 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_38, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_39 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_39, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_14 = aux_7.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_14) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_35 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_35, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_40 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_40, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_41 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_41, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_36 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_36, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_42 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_42, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_43 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_43, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_14 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_14) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_15 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_14 = (!_isNullOrEmpty_15);
                if (_not_14) {
                  String _name_22 = relation_4.getName();
                  _builder.append(_name_22, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_37 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_37, "\t");
            _builder.append(" ");
            EObject _target_6 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_6, "\t");
            _builder.append(" relates ");
            String _string_38 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_38, "\t");
            _builder.append(" ");
            String _cardinality_6 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_6, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_9 = modeloER.getEntities();
              for(final Entity aux_8 : _entities_9) {
                {
                  boolean _equalsIgnoreCase_15 = aux_8.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_15) {
                    {
                      Entity _is_9 = aux_8.getIs();
                      boolean _tripleEquals_9 = (_is_9 == null);
                      if (_tripleEquals_9) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_39 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_39, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_44 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_44, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_45 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_45, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_10 = aux_8.getIs();
                        boolean _tripleEquals_10 = (_is_10 == null);
                        boolean _not_15 = (!_tripleEquals_10);
                        if (_not_15) {
                          {
                            boolean _equals_2 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_2) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_23 = relation_4.getName();
                              _builder.append(_name_23, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_46 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_46, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_47 = aux_8.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_47, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_40 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_40, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_48 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_48, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_49 = aux_8.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_49, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_8 = modeloER.getRelations();
              for(final Relation aux_9 : _relations_8) {
                {
                  boolean _equalsIgnoreCase_16 = aux_9.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_16) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_41 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_41, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_50 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_50, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_51 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_51, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_42 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_42, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_52 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_52, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_53 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_53, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_17 = aux_9.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_17) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_43 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_43, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_54 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_54, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_55 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_55, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_44 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_44, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_56 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_56, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_57 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_57, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_16 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_16) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_17 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_16 = (!_isNullOrEmpty_17);
                if (_not_16) {
                  String _name_24 = relation_4.getName();
                  _builder.append(_name_24, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_45 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_45, "\t");
            _builder.append(" ");
            EObject _target_7 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_7, "\t");
            _builder.append(" relates ");
            String _string_46 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_46, "\t");
            _builder.append(" ");
            String _cardinality_7 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_7, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_10 = modeloER.getEntities();
              for(final Entity aux_10 : _entities_10) {
                {
                  boolean _equalsIgnoreCase_18 = aux_10.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_18) {
                    {
                      Entity _is_11 = aux_10.getIs();
                      boolean _tripleEquals_11 = (_is_11 == null);
                      if (_tripleEquals_11) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_47 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_47, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_58 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_58, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_59 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_59, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_12 = aux_10.getIs();
                        boolean _tripleEquals_12 = (_is_12 == null);
                        boolean _not_17 = (!_tripleEquals_12);
                        if (_not_17) {
                          {
                            boolean _equals_3 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_3) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_25 = relation_4.getName();
                              _builder.append(_name_25, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_60 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_60, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_61 = aux_10.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_61, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_48 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_48, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_62 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_62, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_63 = aux_10.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_63, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_9 = modeloER.getRelations();
              for(final Relation aux_11 : _relations_9) {
                {
                  boolean _equalsIgnoreCase_19 = aux_11.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_19) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_49 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_49, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_64 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_64, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_65 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_65, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_50 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_50, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_66 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_66, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_67 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_67, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_20 = aux_11.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_20) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_51 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_51, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_68 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_68, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_69 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_69, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_52 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_52, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_70 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_70, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_71 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_71, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_18 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_18) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_19 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_18 = (!_isNullOrEmpty_19);
                if (_not_18) {
                  String _name_26 = relation_4.getName();
                  _builder.append(_name_26, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_53 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_53, "\t");
            _builder.append(" ");
            EObject _target_8 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_8, "\t");
            _builder.append(" relates ");
            String _string_54 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_54, "\t");
            _builder.append(" ");
            String _cardinality_8 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_8, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_11 = modeloER.getEntities();
              for(final Entity aux_12 : _entities_11) {
                {
                  boolean _equalsIgnoreCase_21 = aux_12.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_21) {
                    {
                      Entity _is_13 = aux_12.getIs();
                      boolean _tripleEquals_13 = (_is_13 == null);
                      if (_tripleEquals_13) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_55 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_55, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_72 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_72, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_73 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_73, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_14 = aux_12.getIs();
                        boolean _tripleEquals_14 = (_is_14 == null);
                        boolean _not_19 = (!_tripleEquals_14);
                        if (_not_19) {
                          {
                            boolean _equals_4 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_4) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_27 = relation_4.getName();
                              _builder.append(_name_27, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_74 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_74, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_75 = aux_12.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_75, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_56 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_56, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_76 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_76, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_77 = aux_12.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_77, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_10 = modeloER.getRelations();
              for(final Relation aux_13 : _relations_10) {
                {
                  boolean _equalsIgnoreCase_22 = aux_13.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_22) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_57 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_57, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_78 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_78, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_79 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_79, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_58 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_58, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_80 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_80, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_81 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_81, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_23 = aux_13.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_23) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_59 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_59, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_82 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_82, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_83 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_83, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_60 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_60, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_84 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_84, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_85 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_85, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_20 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_20) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_21 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_20 = (!_isNullOrEmpty_21);
                if (_not_20) {
                  String _name_28 = relation_4.getName();
                  _builder.append(_name_28, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_61 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_61, "\t");
            _builder.append(" ");
            EObject _target_9 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_9, "\t");
            _builder.append(" relates ");
            String _string_62 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_62, "\t");
            _builder.append(" ");
            String _cardinality_9 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_9, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_12 = modeloER.getEntities();
              for(final Entity aux_14 : _entities_12) {
                {
                  boolean _equalsIgnoreCase_24 = aux_14.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_24) {
                    {
                      Entity _is_15 = aux_14.getIs();
                      boolean _tripleEquals_15 = (_is_15 == null);
                      if (_tripleEquals_15) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_63 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_63, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_86 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_86, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_87 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_87, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_16 = aux_14.getIs();
                        boolean _tripleEquals_16 = (_is_16 == null);
                        boolean _not_21 = (!_tripleEquals_16);
                        if (_not_21) {
                          {
                            boolean _equals_5 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_5) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_29 = relation_4.getName();
                              _builder.append(_name_29, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_88 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_88, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_89 = aux_14.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_89, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_64 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_64, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_90 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_90, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_91 = aux_14.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_91, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_11 = modeloER.getRelations();
              for(final Relation aux_15 : _relations_11) {
                {
                  boolean _equalsIgnoreCase_25 = aux_15.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_25) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_65 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_65, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_92 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_92, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_93 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_93, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_66 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_66, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_94 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_94, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_95 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_95, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_26 = aux_15.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_26) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_67 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_67, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_96 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_96, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_97 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_97, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_68 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_68, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_98 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_98, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_99 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_99, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_22 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_22) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_23 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_22 = (!_isNullOrEmpty_23);
                if (_not_22) {
                  String _name_30 = relation_4.getName();
                  _builder.append(_name_30, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_69 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_69, "\t");
            _builder.append(" ");
            EObject _target_10 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_10, "\t");
            _builder.append(" relates ");
            String _string_70 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_70, "\t");
            _builder.append(" ");
            String _cardinality_10 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_10, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_13 = modeloER.getEntities();
              for(final Entity aux_16 : _entities_13) {
                {
                  boolean _equalsIgnoreCase_27 = aux_16.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_27) {
                    {
                      Entity _is_17 = aux_16.getIs();
                      boolean _tripleEquals_17 = (_is_17 == null);
                      if (_tripleEquals_17) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_71 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_71, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_100 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_100, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_101 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_101, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_18 = aux_16.getIs();
                        boolean _tripleEquals_18 = (_is_18 == null);
                        boolean _not_23 = (!_tripleEquals_18);
                        if (_not_23) {
                          {
                            boolean _equals_6 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_6) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_31 = relation_4.getName();
                              _builder.append(_name_31, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_102 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_102, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_103 = aux_16.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_103, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_72 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_72, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_104 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_104, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_105 = aux_16.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_105, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_12 = modeloER.getRelations();
              for(final Relation aux_17 : _relations_12) {
                {
                  boolean _equalsIgnoreCase_28 = aux_17.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_28) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_73 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_73, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_106 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_106, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_107 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_107, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_74 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_74, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_108 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_108, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_109 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_109, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_29 = aux_17.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_29) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_75 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_75, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_110 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_110, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_111 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_111, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_76 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_76, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_112 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_112, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_113 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_113, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_24 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_24) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_25 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_24 = (!_isNullOrEmpty_25);
                if (_not_24) {
                  String _name_32 = relation_4.getName();
                  _builder.append(_name_32, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_77 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_77, "\t");
            _builder.append(" ");
            EObject _target_11 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_11, "\t");
            _builder.append(" relates ");
            String _string_78 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_78, "\t");
            _builder.append(" ");
            String _cardinality_11 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_11, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_14 = modeloER.getEntities();
              for(final Entity aux_18 : _entities_14) {
                {
                  boolean _equalsIgnoreCase_30 = aux_18.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_30) {
                    {
                      Entity _is_19 = aux_18.getIs();
                      boolean _tripleEquals_19 = (_is_19 == null);
                      if (_tripleEquals_19) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("Attribute \"<font color=\"blue\"><b>");
                        String _string_79 = relation_4.getLeftEnding().getTarget().toString();
                        _builder.append(_string_79, "\t\t");
                        _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                        String _upperCase_114 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_114, "\t\t");
                        _builder.append("</span> references <span class=\"badge badge-secondary\">");
                        String _upperCase_115 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                        _builder.append(_upperCase_115, "\t\t");
                        _builder.append("</span>\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        Entity _is_20 = aux_18.getIs();
                        boolean _tripleEquals_20 = (_is_20 == null);
                        boolean _not_25 = (!_tripleEquals_20);
                        if (_not_25) {
                          {
                            boolean _equals_7 = relation_4.getLeftEnding().getTarget().toString().equals(relation_4.getRightEnding().getTarget().toString());
                            if (_equals_7) {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _name_33 = relation_4.getName();
                              _builder.append(_name_33, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_116 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_116, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_117 = aux_18.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_117, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("\t");
                              _builder.append("\t");
                              _builder.append("Attribute \"<font color=\"blue\"><b>");
                              String _string_80 = relation_4.getLeftEnding().getTarget().toString();
                              _builder.append(_string_80, "\t\t");
                              _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                              String _upperCase_118 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                              _builder.append(_upperCase_118, "\t\t");
                              _builder.append("</span> references <span class=\"badge badge-secondary\">");
                              String _upperCase_119 = aux_18.getIs().toString().toUpperCase();
                              _builder.append(_upperCase_119, "\t\t");
                              _builder.append("</span>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Relation> _relations_13 = modeloER.getRelations();
              for(final Relation aux_19 : _relations_13) {
                {
                  boolean _equalsIgnoreCase_31 = aux_19.getName().equalsIgnoreCase(relation_4.getLeftEnding().getTarget().toString());
                  if (_equalsIgnoreCase_31) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_81 = relation_4.getLeftEnding().getTarget().toString();
                    _builder.append(_string_81, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_120 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_120, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_121 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_121, "\t\t");
                    _builder.append("</span></br>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Attribute \"<font color=\"blue\"><b>");
                    String _string_82 = relation_4.getRightEnding().getTarget().toString();
                    _builder.append(_string_82, "\t\t");
                    _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                    String _upperCase_122 = relation_4.getName().toUpperCase();
                    _builder.append(_upperCase_122, "\t\t");
                    _builder.append("</span> references <span class=\"badge badge-secondary\">");
                    String _upperCase_123 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                    _builder.append(_upperCase_123, "\t\t");
                    _builder.append("</span>\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equalsIgnoreCase_32 = aux_19.getName().equalsIgnoreCase(relation_4.getRightEnding().getTarget().toString());
                    if (_equalsIgnoreCase_32) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_83 = relation_4.getRightEnding().getTarget().toString();
                      _builder.append(_string_83, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_124 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_124, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_125 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_125, "\t\t");
                      _builder.append("</span></br>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("Attribute \"<font color=\"blue\"><b>");
                      String _string_84 = relation_4.getLeftEnding().getTarget().toString();
                      _builder.append(_string_84, "\t\t");
                      _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
                      String _upperCase_126 = relation_4.getName().toUpperCase();
                      _builder.append(_upperCase_126, "\t\t");
                      _builder.append("</span> references <span class=\"badge badge-secondary\">");
                      String _upperCase_127 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
                      _builder.append(_upperCase_127, "\t\t");
                      _builder.append("</span>\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</br>\t");
            _builder.newLine();
          }
        }
        _builder.newLine();
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_26 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_26) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_27 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_26 = (!_isNullOrEmpty_27);
                if (_not_26) {
                  String _name_34 = relation_4.getName();
                  _builder.append(_name_34);
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_85 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_85);
            _builder.append(" ");
            EObject _target_12 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_12);
            _builder.append(" relates ");
            String _string_86 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_86);
            _builder.append(" ");
            String _cardinality_12 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_12);
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_87 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_87);
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_128 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_128);
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_129 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_129);
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("</br>");
            _builder.newLine();
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_88 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_88);
            _builder.append("_fk</b></font>\" In <span class=\"badge badge-secondary\">");
            String _upperCase_130 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_130);
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_131 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_131);
            _builder.append("</span>\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_28 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_28) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_29 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_27 = (!_isNullOrEmpty_29);
                if (_not_27) {
                  String _name_35 = relation_4.getName();
                  _builder.append(_name_35, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_89 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_89, "\t");
            _builder.append(" ");
            EObject _target_13 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_13, "\t");
            _builder.append(" relates ");
            String _string_90 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_90, "\t");
            _builder.append(" ");
            String _cardinality_13 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_13, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_91 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_91, "\t");
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_132 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_132, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_133 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_133, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_92 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_92, "\t");
            _builder.append("_fk</b></font>\" In <span class=\"badge badge-secondary\">");
            String _upperCase_134 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_134, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_135 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_135, "\t");
            _builder.append("</span>\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Relationship: ");
            {
              boolean _isNullOrEmpty_30 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_30) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_31 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_28 = (!_isNullOrEmpty_31);
                if (_not_28) {
                  String _name_36 = relation_4.getName();
                  _builder.append(_name_36, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_93 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_93, "\t");
            _builder.append(" ");
            EObject _target_14 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_14, "\t");
            _builder.append(" relates ");
            String _string_94 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_94, "\t");
            _builder.append(" ");
            String _cardinality_14 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_14, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_95 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_95, "\t");
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_136 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_136, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_137 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_137, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_96 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_96, "\t");
            _builder.append("_fk</b></font>\" In <span class=\"badge badge-secondary\">");
            String _upperCase_138 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_138, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_139 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_139, "\t");
            _builder.append("</span>\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.newLine();
        {
          if ((relation_4.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && relation_4.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
            _builder.append("\t");
            _builder.append("<font color=\"#505050\">Modelled Relationship: ");
            {
              boolean _isNullOrEmpty_32 = StringExtensions.isNullOrEmpty(relation_4.getName());
              if (_isNullOrEmpty_32) {
                _builder.append("<i>_UnnamedEntity_</i>");
              } else {
                boolean _isNullOrEmpty_33 = StringExtensions.isNullOrEmpty(relation_4.getName());
                boolean _not_29 = (!_isNullOrEmpty_33);
                if (_not_29) {
                  String _name_37 = relation_4.getName();
                  _builder.append(_name_37, "\t");
                }
              }
            }
            _builder.append(" <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ");
            String _string_97 = relation_4.getLeftEnding().getCardinality().toString();
            _builder.append(_string_97, "\t");
            _builder.append(" ");
            EObject _target_15 = relation_4.getLeftEnding().getTarget();
            _builder.append(_target_15, "\t");
            _builder.append(" relates ");
            String _string_98 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_98, "\t");
            _builder.append(" ");
            String _cardinality_15 = relation_4.getRightEnding().getCardinality();
            _builder.append(_cardinality_15, "\t");
            _builder.append("</font></br>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_99 = relation_4.getLeftEnding().getTarget().toString();
            _builder.append(_string_99, "\t");
            _builder.append("_fk</b></font>\" in <span class=\"badge badge-secondary\">");
            String _upperCase_140 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_140, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_141 = relation_4.getLeftEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_141, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Attribute \"<font color=\"blue\"><b>");
            String _string_100 = relation_4.getRightEnding().getTarget().toString();
            _builder.append(_string_100, "\t");
            _builder.append("_fk</b></font>\" In <span class=\"badge badge-secondary\">");
            String _upperCase_142 = relation_4.getName().toUpperCase();
            _builder.append(_upperCase_142, "\t");
            _builder.append("</span> references <span class=\"badge badge-secondary\">");
            String _upperCase_143 = relation_4.getRightEnding().getTarget().toString().toUpperCase();
            _builder.append(_upperCase_143, "\t");
            _builder.append("</span>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("</br>");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * PHYSICAL SCHEMA (PostgreSQL) GENERATOR CODE
   */
  public CharSequence postgreSQLCreate(final ERModel e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* PostGreSQL TEMPLATE GENERATED BY ERtext */");
    _builder.newLine();
    _builder.newLine();
    _builder.append("-- Database: ");
    String _upperCase = e.getDomain().getName().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("-- DROP DATABASE ");
    String _upperCase_1 = e.getDomain().getName().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("CREATE DATABASE ");
    String _upperCase_2 = e.getDomain().getName().toUpperCase();
    _builder.append(_upperCase_2);
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("WITH ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("OWNER = postgres");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ENCODING = \'UTF8\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("TABLESPACE = pg_default");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CONNECTION LIMIT = -1; ");
    int ListExendPKsLenght = 0;
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity entity : _entities) {
        final ArrayList<String> myListPKs = CollectionLiterals.<String>newArrayList();
        _builder.newLineIfNotEmpty();
        final ArrayList<Object> myListExtendPKs = CollectionLiterals.<Object>newArrayList();
        _builder.newLineIfNotEmpty();
        CharSequence _postgreSQLHaveFK = this.postgreSQLHaveFK(e, entity);
        _builder.append(_postgreSQLHaveFK);
        _builder.newLineIfNotEmpty();
        {
          boolean _isNullOrEmpty = IterableExtensions.isNullOrEmpty(this.myListFKs);
          if (_isNullOrEmpty) {
            _builder.append("-- SEM DEPENDENCIA");
            _builder.newLineIfNotEmpty();
            _builder.append("-- Table: ");
            String _upperCase_3 = entity.getName().toUpperCase();
            _builder.append(_upperCase_3);
            _builder.newLineIfNotEmpty();
            {
              boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(entity.getGeneralization());
              boolean _not = (!_isNullOrEmpty_1);
              if (_not) {
                _builder.append("-- Generalization/Specialization ");
                String _upperCase_4 = entity.getGeneralization().toString().toUpperCase();
                _builder.append(_upperCase_4);
                _builder.append(" from table ");
                String _upperCase_5 = entity.getIs().toString().toUpperCase();
                _builder.append(_upperCase_5);
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("-- DROP TABLE ");
            String _upperCase_6 = entity.getName().toUpperCase();
            _builder.append(_upperCase_6);
            _builder.append(";\t");
            _builder.newLineIfNotEmpty();
            _builder.append("CREATE TABLE IF NOT EXISTS ");
            String _lowerCase = entity.getName().toLowerCase();
            _builder.append(_lowerCase);
            _builder.append(" (");
            _builder.newLineIfNotEmpty();
            {
              Entity _is = entity.getIs();
              boolean _tripleEquals = (_is == null);
              boolean _not_1 = (!_tripleEquals);
              if (_not_1) {
                {
                  EList<Entity> _entities_1 = e.getEntities();
                  for(final Entity aux : _entities_1) {
                    {
                      boolean _equalsIgnoreCase = aux.getName().equalsIgnoreCase(entity.getIs().toString());
                      if (_equalsIgnoreCase) {
                        {
                          EList<Attribute> _attributes = aux.getAttributes();
                          for(final Attribute auxAttributes : _attributes) {
                            {
                              boolean _isIsKey = auxAttributes.isIsKey();
                              if (_isIsKey) {
                                _builder.append("\t");
                                CharSequence _postgreSQLAttTypeChecker = this.postgreSQLAttTypeChecker(auxAttributes);
                                _builder.append(_postgreSQLAttTypeChecker, "\t");
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.append("\t");
            {
              EList<Attribute> _attributes_1 = entity.getAttributes();
              for(final Attribute attribute : _attributes_1) {
                CharSequence _postgreSQLAttTypeChecker_1 = this.postgreSQLAttTypeChecker(attribute);
                _builder.append(_postgreSQLAttTypeChecker_1, "\t");
              }
            }
            _builder.newLineIfNotEmpty();
            {
              Entity _is_1 = entity.getIs();
              boolean _tripleEquals_1 = (_is_1 == null);
              boolean _not_2 = (!_tripleEquals_1);
              if (_not_2) {
                {
                  EList<Entity> _entities_2 = e.getEntities();
                  for(final Entity aux_1 : _entities_2) {
                    {
                      boolean _equalsIgnoreCase_1 = aux_1.getName().equalsIgnoreCase(entity.getIs().toString());
                      if (_equalsIgnoreCase_1) {
                        {
                          EList<Attribute> _attributes_2 = aux_1.getAttributes();
                          for(final Attribute auxAttributes_1 : _attributes_2) {
                            {
                              boolean _isIsKey_1 = auxAttributes_1.isIsKey();
                              if (_isIsKey_1) {
                                _builder.append("\t");
                                String _xblockexpression = null;
                                {
                                  myListPKs.add(auxAttributes_1.getName().toLowerCase());
                                  _xblockexpression = "";
                                }
                                _builder.append(_xblockexpression, "\t");
                                String _xblockexpression_1 = null;
                                {
                                  myListExtendPKs.add(auxAttributes_1.getName().toLowerCase());
                                  _xblockexpression_1 = "";
                                }
                                _builder.append(_xblockexpression_1, "\t");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              EList<Attribute> _attributes_3 = entity.getAttributes();
              for(final Attribute attribute_1 : _attributes_3) {
                {
                  boolean _isIsKey_2 = attribute_1.isIsKey();
                  if (_isIsKey_2) {
                    String _xblockexpression_2 = null;
                    {
                      myListPKs.add(attribute_1.getName().toString());
                      _xblockexpression_2 = "";
                    }
                    _builder.append(_xblockexpression_2, "\t");
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _postgreSQLVerifyFKsAttributesRelation1to1 = this.postgreSQLVerifyFKsAttributesRelation1to1(e, entity.getName());
            _builder.append(_postgreSQLVerifyFKsAttributesRelation1to1, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _postgreSQLVerifyFKsAttributesRelation1toN = this.postgreSQLVerifyFKsAttributesRelation1toN(e, entity.getName());
            _builder.append(_postgreSQLVerifyFKsAttributesRelation1toN, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("PRIMARY KEY (");
            {
              boolean _hasElements = false;
              for(final String x : myListPKs) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(", ", "\t");
                }
                String _println = InputOutput.<String>println(x.toLowerCase());
                _builder.append(_println, "\t");
              }
              if (_hasElements) {
                _builder.append(")", "\t");
              }
            }
            {
              if (((!IterableExtensions.isNullOrEmpty(myListExtendPKs)) || (!IterableExtensions.isNullOrEmpty(this.myListFKs)))) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Object _xblockexpression_3 = null;
            {
              ListExendPKsLenght = myListExtendPKs.size();
              _xblockexpression_3 = null;
            }
            _builder.append(_xblockexpression_3, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              boolean _hasElements_1 = false;
              for(final Object x_1 : myListExtendPKs) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                _builder.append("FOREIGN KEY (");
                String _println_1 = InputOutput.<String>println(x_1.toString().toLowerCase());
                _builder.append(_println_1, "\t");
                _builder.append(") REFERENCES ");
                CharSequence _postgreSQLDiscoverInheritedPKtoFK = this.postgreSQLDiscoverInheritedPKtoFK(e, x_1.toString(), ListExendPKsLenght, entity.getName());
                _builder.append(_postgreSQLDiscoverInheritedPKtoFK, "\t");
              }
            }
            myListPKs.clear();
            myListExtendPKs.clear();
            this.myListFKs.clear();
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Object _xblockexpression_4 = null;
            {
              this.postgreSQL_COUNT_FKsRelation1to1(e, entity.getName());
              _xblockexpression_4 = null;
            }
            _builder.append(_xblockexpression_4, "\t");
            Object _xblockexpression_5 = null;
            {
              this.counter = this.globalFKcounter_1to1;
              this.AuxCounterA = this.globalFKcounter_1to1;
              _xblockexpression_5 = null;
            }
            _builder.append(_xblockexpression_5, "\t");
            _builder.append(" ");
            Object _xblockexpression_6 = null;
            {
              this.globalFKcounter_1to1 = 0;
              _xblockexpression_6 = null;
            }
            _builder.append(_xblockexpression_6, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _postgreSQLDefineFKsRelation1to1 = this.postgreSQLDefineFKsRelation1to1(e, entity.getName(), this.counter);
            _builder.append(_postgreSQLDefineFKsRelation1to1, "\t");
            Object _xblockexpression_7 = null;
            {
              this.counter = 0;
              _xblockexpression_7 = null;
            }
            _builder.append(_xblockexpression_7, "\t");
            Object _xblockexpression_8 = null;
            {
              this.postgreSQL_COUNT_FKsRelation1toN(e, entity.getName());
              _xblockexpression_8 = null;
            }
            _builder.append(_xblockexpression_8, "\t");
            Object _xblockexpression_9 = null;
            {
              this.counter = this.globalFKcounter_1toN;
              this.AuxCounterB = this.globalFKcounter_1toN;
              _xblockexpression_9 = null;
            }
            _builder.append(_xblockexpression_9, "\t");
            Object _xblockexpression_10 = null;
            {
              this.globalFKcounter_1toN = 0;
              _xblockexpression_10 = null;
            }
            _builder.append(_xblockexpression_10, "\t");
            {
              if (((this.AuxCounterA > 0) && (this.AuxCounterB > 0))) {
                _builder.append(",");
              }
            }
            Object _xblockexpression_11 = null;
            {
              this.AuxCounterA = 0;
              _xblockexpression_11 = null;
            }
            _builder.append(_xblockexpression_11, "\t");
            Object _xblockexpression_12 = null;
            {
              this.AuxCounterB = 0;
              _xblockexpression_12 = null;
            }
            _builder.append(_xblockexpression_12, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _postgreSQLDefineFKsRelation1toN = this.postgreSQLDefineFKsRelation1toN(e, entity.getName(), this.counter);
            _builder.append(_postgreSQLDefineFKsRelation1toN, "\t");
            _builder.append(" ");
            Object _xblockexpression_13 = null;
            {
              this.counter = 0;
              _xblockexpression_13 = null;
            }
            _builder.append(_xblockexpression_13, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isNullOrEmpty_2 = IterableExtensions.isNullOrEmpty(this.myListFKs);
          if (_isNullOrEmpty_2) {
            InputOutput.println();
            _builder.append(");");
            InputOutput.println();
          }
        }
        this.myListFKs.clear();
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Entity> _entities_3 = e.getEntities();
      for(final Entity entity_1 : _entities_3) {
        final ArrayList<String> myListPKs_1 = CollectionLiterals.<String>newArrayList();
        _builder.newLineIfNotEmpty();
        final ArrayList<Object> myListExtendPKs_1 = CollectionLiterals.<Object>newArrayList();
        _builder.newLineIfNotEmpty();
        CharSequence _postgreSQLHaveFK_1 = this.postgreSQLHaveFK(e, entity_1);
        _builder.append(_postgreSQLHaveFK_1);
        _builder.newLineIfNotEmpty();
        {
          boolean _isNullOrEmpty_3 = IterableExtensions.isNullOrEmpty(this.myListFKs);
          boolean _not_3 = (!_isNullOrEmpty_3);
          if (_not_3) {
            _builder.append("-- COM DEPENDENCIA");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("-- Table: ");
            String _upperCase_7 = entity_1.getName().toUpperCase();
            _builder.append(_upperCase_7, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              boolean _isNullOrEmpty_4 = StringExtensions.isNullOrEmpty(entity_1.getGeneralization());
              boolean _not_4 = (!_isNullOrEmpty_4);
              if (_not_4) {
                _builder.append("-- Generalization/Specialization ");
                String _upperCase_8 = entity_1.getGeneralization().toString().toUpperCase();
                _builder.append(_upperCase_8, "\t");
                _builder.append(" from table ");
                String _upperCase_9 = entity_1.getIs().toString().toUpperCase();
                _builder.append(_upperCase_9, "\t");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("-- DROP TABLE ");
            String _upperCase_10 = entity_1.getName().toUpperCase();
            _builder.append(_upperCase_10, "\t");
            _builder.append(";\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("CREATE TABLE IF NOT EXISTS ");
            String _lowerCase_1 = entity_1.getName().toLowerCase();
            _builder.append(_lowerCase_1, "\t");
            _builder.append(" (");
            _builder.newLineIfNotEmpty();
            {
              Entity _is_2 = entity_1.getIs();
              boolean _tripleEquals_2 = (_is_2 == null);
              boolean _not_5 = (!_tripleEquals_2);
              if (_not_5) {
                {
                  EList<Entity> _entities_4 = e.getEntities();
                  for(final Entity aux_2 : _entities_4) {
                    {
                      boolean _equalsIgnoreCase_2 = aux_2.getName().equalsIgnoreCase(entity_1.getIs().toString());
                      if (_equalsIgnoreCase_2) {
                        {
                          EList<Attribute> _attributes_4 = aux_2.getAttributes();
                          for(final Attribute auxAttributes_2 : _attributes_4) {
                            {
                              boolean _isIsKey_3 = auxAttributes_2.isIsKey();
                              if (_isIsKey_3) {
                                CharSequence _postgreSQLAttTypeChecker_2 = this.postgreSQLAttTypeChecker(auxAttributes_2);
                                _builder.append(_postgreSQLAttTypeChecker_2);
                                _builder.newLineIfNotEmpty();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Attribute> _attributes_5 = entity_1.getAttributes();
              for(final Attribute attribute_2 : _attributes_5) {
                CharSequence _postgreSQLAttTypeChecker_3 = this.postgreSQLAttTypeChecker(attribute_2);
                _builder.append(_postgreSQLAttTypeChecker_3);
              }
            }
            _builder.newLineIfNotEmpty();
            {
              Entity _is_3 = entity_1.getIs();
              boolean _tripleEquals_3 = (_is_3 == null);
              boolean _not_6 = (!_tripleEquals_3);
              if (_not_6) {
                {
                  EList<Entity> _entities_5 = e.getEntities();
                  for(final Entity aux_3 : _entities_5) {
                    {
                      boolean _equalsIgnoreCase_3 = aux_3.getName().equalsIgnoreCase(entity_1.getIs().toString());
                      if (_equalsIgnoreCase_3) {
                        {
                          EList<Attribute> _attributes_6 = aux_3.getAttributes();
                          for(final Attribute auxAttributes_3 : _attributes_6) {
                            {
                              boolean _isIsKey_4 = auxAttributes_3.isIsKey();
                              if (_isIsKey_4) {
                                String _xblockexpression_14 = null;
                                {
                                  myListPKs_1.add(auxAttributes_3.getName().toLowerCase());
                                  _xblockexpression_14 = "";
                                }
                                _builder.append(_xblockexpression_14);
                                String _xblockexpression_15 = null;
                                {
                                  myListExtendPKs_1.add(auxAttributes_3.getName().toLowerCase());
                                  _xblockexpression_15 = "";
                                }
                                _builder.append(_xblockexpression_15);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
            {
              EList<Attribute> _attributes_7 = entity_1.getAttributes();
              for(final Attribute attribute_3 : _attributes_7) {
                {
                  boolean _isIsKey_5 = attribute_3.isIsKey();
                  if (_isIsKey_5) {
                    String _xblockexpression_16 = null;
                    {
                      myListPKs_1.add(attribute_3.getName().toString());
                      _xblockexpression_16 = "";
                    }
                    _builder.append(_xblockexpression_16);
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
            CharSequence _postgreSQLVerifyFKsAttributesRelation1to1_1 = this.postgreSQLVerifyFKsAttributesRelation1to1(e, entity_1.getName());
            _builder.append(_postgreSQLVerifyFKsAttributesRelation1to1_1);
            _builder.newLineIfNotEmpty();
            CharSequence _postgreSQLVerifyFKsAttributesRelation1toN_1 = this.postgreSQLVerifyFKsAttributesRelation1toN(e, entity_1.getName());
            _builder.append(_postgreSQLVerifyFKsAttributesRelation1toN_1);
            _builder.newLineIfNotEmpty();
            _builder.append("PRIMARY KEY (");
            {
              boolean _hasElements_2 = false;
              for(final String x_2 : myListPKs_1) {
                if (!_hasElements_2) {
                  _hasElements_2 = true;
                } else {
                  _builder.appendImmediate(", ", "");
                }
                String _println_2 = InputOutput.<String>println(x_2.toLowerCase());
                _builder.append(_println_2);
              }
              if (_hasElements_2) {
                _builder.append(")");
              }
            }
            {
              if (((!IterableExtensions.isNullOrEmpty(myListExtendPKs_1)) || (!IterableExtensions.isNullOrEmpty(this.myListFKs)))) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_17 = null;
            {
              ListExendPKsLenght = myListExtendPKs_1.size();
              _xblockexpression_17 = null;
            }
            _builder.append(_xblockexpression_17);
            _builder.newLineIfNotEmpty();
            {
              boolean _hasElements_3 = false;
              for(final Object x_3 : myListExtendPKs_1) {
                if (!_hasElements_3) {
                  _hasElements_3 = true;
                } else {
                  _builder.appendImmediate(",\n", "");
                }
                _builder.append("FOREIGN KEY (");
                String _println_3 = InputOutput.<String>println(x_3.toString().toLowerCase());
                _builder.append(_println_3);
                _builder.append(") REFERENCES ");
                CharSequence _postgreSQLDiscoverInheritedPKtoFK_1 = this.postgreSQLDiscoverInheritedPKtoFK(e, x_3.toString(), ListExendPKsLenght, entity_1.getName());
                _builder.append(_postgreSQLDiscoverInheritedPKtoFK_1);
              }
            }
            myListPKs_1.clear();
            myListExtendPKs_1.clear();
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_18 = null;
            {
              this.postgreSQL_COUNT_FKsRelation1to1(e, entity_1.getName());
              _xblockexpression_18 = null;
            }
            _builder.append(_xblockexpression_18);
            Object _xblockexpression_19 = null;
            {
              this.counter = this.globalFKcounter_1to1;
              this.AuxCounterA = this.globalFKcounter_1to1;
              _xblockexpression_19 = null;
            }
            _builder.append(_xblockexpression_19);
            _builder.append(" ");
            Object _xblockexpression_20 = null;
            {
              this.globalFKcounter_1to1 = 0;
              _xblockexpression_20 = null;
            }
            _builder.append(_xblockexpression_20);
            _builder.newLineIfNotEmpty();
            CharSequence _postgreSQLDefineFKsRelation1to1_1 = this.postgreSQLDefineFKsRelation1to1(e, entity_1.getName(), this.counter);
            _builder.append(_postgreSQLDefineFKsRelation1to1_1);
            Object _xblockexpression_21 = null;
            {
              this.counter = 0;
              _xblockexpression_21 = null;
            }
            _builder.append(_xblockexpression_21);
            Object _xblockexpression_22 = null;
            {
              this.postgreSQL_COUNT_FKsRelation1toN(e, entity_1.getName());
              _xblockexpression_22 = null;
            }
            _builder.append(_xblockexpression_22);
            Object _xblockexpression_23 = null;
            {
              this.counter = this.globalFKcounter_1toN;
              this.AuxCounterB = this.globalFKcounter_1toN;
              _xblockexpression_23 = null;
            }
            _builder.append(_xblockexpression_23);
            Object _xblockexpression_24 = null;
            {
              this.globalFKcounter_1toN = 0;
              _xblockexpression_24 = null;
            }
            _builder.append(_xblockexpression_24);
            {
              if (((this.AuxCounterA > 0) && (this.AuxCounterB > 0))) {
                _builder.append(",");
              }
            }
            Object _xblockexpression_25 = null;
            {
              this.AuxCounterA = 0;
              _xblockexpression_25 = null;
            }
            _builder.append(_xblockexpression_25);
            Object _xblockexpression_26 = null;
            {
              this.AuxCounterB = 0;
              _xblockexpression_26 = null;
            }
            _builder.append(_xblockexpression_26);
            _builder.newLineIfNotEmpty();
            CharSequence _postgreSQLDefineFKsRelation1toN_1 = this.postgreSQLDefineFKsRelation1toN(e, entity_1.getName(), this.counter);
            _builder.append(_postgreSQLDefineFKsRelation1toN_1);
            _builder.append(" ");
            Object _xblockexpression_27 = null;
            {
              this.counter = 0;
              _xblockexpression_27 = null;
            }
            _builder.append(_xblockexpression_27);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isNullOrEmpty_5 = IterableExtensions.isNullOrEmpty(this.myListFKs);
          boolean _not_7 = (!_isNullOrEmpty_5);
          if (_not_7) {
            InputOutput.println();
            _builder.append(");");
            InputOutput.println();
          }
        }
        this.myListFKs.clear();
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("/* RELAÇÕES N PARA N */ ");
    _builder.append("\t");
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        _builder.newLineIfNotEmpty();
        final ArrayList<String> myListPKsFKs = CollectionLiterals.<String>newArrayList();
        _builder.newLineIfNotEmpty();
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            {
              boolean _isNullOrEmpty_6 = StringExtensions.isNullOrEmpty(relation.getName());
              if (_isNullOrEmpty_6) {
                String _upperCase_11 = relation.getLeftEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_11);
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                _builder.append("-- Table: ");
                String _upperCase_12 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_12);
                _builder.newLineIfNotEmpty();
                _builder.append("-- DROP TABLE ");
                String _upperCase_13 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_13);
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("CREATE TABLE IF NOT EXISTS ");
                String _upperCase_14 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_14);
                _builder.append(" (");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _isNullOrEmpty_7 = StringExtensions.isNullOrEmpty(relation.getName());
                boolean _not_8 = (!_isNullOrEmpty_7);
                if (_not_8) {
                  _builder.newLine();
                  _builder.append("-- Table: ");
                  String _upperCase_15 = relation.getName().toUpperCase();
                  _builder.append(_upperCase_15);
                  _builder.newLineIfNotEmpty();
                  _builder.append("-- DROP TABLE ");
                  String _upperCase_16 = relation.getName().toUpperCase();
                  _builder.append(_upperCase_16);
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                  _builder.append("CREATE TABLE IF NOT EXISTS ");
                  String _lowerCase_2 = relation.getName().toLowerCase();
                  _builder.append(_lowerCase_2);
                  _builder.append(" (");
                }
              }
            }
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_6 = e.getEntities();
              for(final Entity entity_2 : _entities_6) {
                {
                  if ((relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_2.getName()) && (relation.getLeftEnding().getTarget().toString() != relation.getRightEnding().getTarget().toString()))) {
                    String _xblockexpression_28 = null;
                    {
                      myListPKsFKs.add(relation.getLeftEnding().getTarget().toString());
                      _xblockexpression_28 = "";
                    }
                    _builder.append(_xblockexpression_28);
                    _builder.append("\t");
                    String _lowerCase_3 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_3);
                    CharSequence _postgreSQLAttTypeCheckerNtoNLeft = this.postgreSQLAttTypeCheckerNtoNLeft(e, relation);
                    _builder.append(_postgreSQLAttTypeCheckerNtoNLeft);
                  }
                }
                _builder.newLineIfNotEmpty();
                {
                  if ((relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_2.getName()) && (relation.getRightEnding().getTarget().toString() != relation.getLeftEnding().getTarget().toString()))) {
                    String _xblockexpression_29 = null;
                    {
                      myListPKsFKs.add(relation.getRightEnding().getTarget().toString());
                      _xblockexpression_29 = "";
                    }
                    _builder.append(_xblockexpression_29);
                    _builder.append("\t");
                    String _lowerCase_4 = relation.getRightEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_4);
                    CharSequence _postgreSQLAttTypeCheckerNtoNRight = this.postgreSQLAttTypeCheckerNtoNRight(e, relation);
                    _builder.append(_postgreSQLAttTypeCheckerNtoNRight);
                  }
                }
                _builder.newLineIfNotEmpty();
                {
                  if ((relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_2.getName()) && relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString()))) {
                    String _xblockexpression_30 = null;
                    {
                      myListPKsFKs.add(relation.getLeftEnding().getTarget().toString());
                      _xblockexpression_30 = "";
                    }
                    _builder.append(_xblockexpression_30);
                    _builder.append("\t");
                    String _lowerCase_5 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_5);
                    _builder.append("_");
                    String _lowerCase_6 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_6);
                    _builder.append("_1");
                    Object _xblockexpression_31 = null;
                    {
                      this.auxT1 = true;
                      _xblockexpression_31 = null;
                    }
                    _builder.append(_xblockexpression_31);
                    CharSequence _postgreSQLAttTypeCheckerNtoNLeft_1 = this.postgreSQLAttTypeCheckerNtoNLeft(e, relation);
                    _builder.append(_postgreSQLAttTypeCheckerNtoNLeft_1);
                  }
                }
                _builder.newLineIfNotEmpty();
                {
                  if ((relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_2.getName()) && relation.getRightEnding().getTarget().toString().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString()))) {
                    String _xblockexpression_32 = null;
                    {
                      myListPKsFKs.add(relation.getRightEnding().getTarget().toString());
                      _xblockexpression_32 = "";
                    }
                    _builder.append(_xblockexpression_32);
                    _builder.append("\t");
                    String _lowerCase_7 = relation.getRightEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_7);
                    _builder.append("_");
                    String _lowerCase_8 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_8);
                    _builder.append("_2");
                    Object _xblockexpression_33 = null;
                    {
                      this.auxT2 = true;
                      _xblockexpression_33 = null;
                    }
                    _builder.append(_xblockexpression_33);
                    CharSequence _postgreSQLAttTypeCheckerNtoNRight_1 = this.postgreSQLAttTypeCheckerNtoNRight(e, relation);
                    _builder.append(_postgreSQLAttTypeCheckerNtoNRight_1);
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
            int iterCounter = 1;
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              boolean _isNullOrEmpty_8 = IterableExtensions.isNullOrEmpty(relation.getAttributes());
              boolean _not_9 = (!_isNullOrEmpty_8);
              if (_not_9) {
                {
                  EList<Attribute> _attributes_8 = relation.getAttributes();
                  for(final Attribute aux_4 : _attributes_8) {
                    CharSequence _postgreSQLAttTypeChecker_4 = this.postgreSQLAttTypeChecker(aux_4);
                    _builder.append(_postgreSQLAttTypeChecker_4, "\t");
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("PRIMARY KEY (");
            {
              EList<Attribute> _attributes_9 = relation.getAttributes();
              for(final Attribute aux_5 : _attributes_9) {
                {
                  boolean _isIsKey_6 = aux_5.isIsKey();
                  if (_isIsKey_6) {
                    String _lowerCase_9 = aux_5.getName().toString().toLowerCase();
                    _builder.append(_lowerCase_9, "\t");
                    _builder.append(", ");
                  }
                }
              }
            }
            {
              boolean _hasElements_4 = false;
              for(final String x_4 : myListPKsFKs) {
                if (!_hasElements_4) {
                  _hasElements_4 = true;
                } else {
                  _builder.appendImmediate(", ", "\t");
                }
                String _println_4 = InputOutput.<String>println(x_4.toLowerCase());
                _builder.append(_println_4, "\t");
                {
                  if ((this.auxT1 && this.auxT2)) {
                    _builder.append("_");
                    String _lowerCase_10 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_10, "\t");
                    _builder.append("_");
                    int _plusPlus = iterCounter++;
                    _builder.append(_plusPlus, "\t");
                  }
                }
              }
              if (_hasElements_4) {
                _builder.append("),", "\t");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            final int ListPKsFKsLenght = myListPKsFKs.size();
            Object _xblockexpression_34 = null;
            {
              iterCounter = 1;
              _xblockexpression_34 = null;
            }
            _builder.append(_xblockexpression_34, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              boolean _hasElements_5 = false;
              for(final String x_5 : myListPKsFKs) {
                if (!_hasElements_5) {
                  _hasElements_5 = true;
                } else {
                  _builder.appendImmediate("),\n", "\t");
                }
                _builder.append("FOREIGN KEY (");
                String _println_5 = InputOutput.<String>println(x_5.toString().toLowerCase());
                _builder.append(_println_5, "\t");
                {
                  if ((this.auxT1 && this.auxT2)) {
                    _builder.append("_");
                    String _lowerCase_11 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_11, "\t");
                    _builder.append("_");
                    int _plusPlus_1 = iterCounter++;
                    _builder.append(_plusPlus_1, "\t");
                  }
                }
                _builder.append(") REFERENCES ");
                String _print = InputOutput.<String>print(x_5.toString().toLowerCase());
                _builder.append(_print, "\t");
                _builder.append(" (");
                CharSequence _postgreSQLDiscoverPKtoFK = this.postgreSQLDiscoverPKtoFK(e, x_5, ListPKsFKsLenght);
                _builder.append(_postgreSQLDiscoverPKtoFK, "\t");
                CharSequence _postgreSQLDiscoverAutoInheritedPKtoFK = this.postgreSQLDiscoverAutoInheritedPKtoFK(e, x_5);
                _builder.append(_postgreSQLDiscoverAutoInheritedPKtoFK, "\t");
              }
            }
            _builder.append(")");
            myListPKsFKs.clear();
            _builder.newLineIfNotEmpty();
            _builder.append(");");
            Object _xblockexpression_35 = null;
            {
              iterCounter = 1;
              _xblockexpression_35 = null;
            }
            _builder.append(_xblockexpression_35);
            Object _xblockexpression_36 = null;
            {
              this.auxT1 = false;
              _xblockexpression_36 = null;
            }
            _builder.append(_xblockexpression_36);
            Object _xblockexpression_37 = null;
            {
              this.auxT2 = false;
              _xblockexpression_37 = null;
            }
            _builder.append(_xblockexpression_37);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/* RELAÇÕES TERNÁRIAS */ ");
    _builder.newLine();
    String artificialEntName1 = null;
    String artificialEntKey1 = null;
    String artificialEntKeyAlt1 = null;
    _builder.newLineIfNotEmpty();
    String artificialEntName2 = null;
    String artificialEntKey2 = null;
    String artificialEntKeyAlt2 = null;
    _builder.newLineIfNotEmpty();
    String realEntName = null;
    String realEntKey = null;
    _builder.newLineIfNotEmpty();
    {
      EList<Relation> _relations_1 = e.getRelations();
      for(final Relation relation_1 : _relations_1) {
        {
          if (((relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            {
              EList<Relation> _relations_2 = e.getRelations();
              for(final Relation aux_6 : _relations_2) {
                {
                  if (((!StringExtensions.isNullOrEmpty(relation_1.getName())) && relation_1.getName().equals(aux_6.getLeftEnding().getTarget().toString()))) {
                    _builder.append("-- Table: ");
                    String _upperCase_17 = aux_6.getName().toUpperCase();
                    _builder.append(_upperCase_17);
                    _builder.newLineIfNotEmpty();
                    _builder.append("-- DROP TABLE ");
                    String _upperCase_18 = aux_6.getName().toUpperCase();
                    _builder.append(_upperCase_18);
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("CREATE TABLE IF NOT EXISTS ");
                    String _lowerCase_12 = aux_6.getName().toLowerCase();
                    _builder.append(_lowerCase_12);
                    _builder.append(" (\t");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Entity> _entities_7 = e.getEntities();
                      for(final Entity entAux : _entities_7) {
                        {
                          boolean _equalsIgnoreCase_4 = entAux.getName().toString().equalsIgnoreCase(aux_6.getRightEnding().getTarget().toString());
                          if (_equalsIgnoreCase_4) {
                            {
                              EList<Attribute> _attributes_10 = entAux.getAttributes();
                              for(final Attribute attAux : _attributes_10) {
                                {
                                  boolean _isIsKey_7 = attAux.isIsKey();
                                  if (_isIsKey_7) {
                                    _builder.append("\t");
                                    CharSequence _postgreSQLAttTypeChecker_5 = this.postgreSQLAttTypeChecker(attAux);
                                    _builder.append(_postgreSQLAttTypeChecker_5, "\t");
                                    Object _xblockexpression_38 = null;
                                    {
                                      realEntName = entAux.getName().toString().toLowerCase();
                                      _xblockexpression_38 = null;
                                    }
                                    _builder.append(_xblockexpression_38, "\t");
                                    Object _xblockexpression_39 = null;
                                    {
                                      realEntKey = attAux.getName().toString().toLowerCase();
                                      _xblockexpression_39 = null;
                                    }
                                    _builder.append(_xblockexpression_39, "\t");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      EList<Relation> _relations_3 = e.getRelations();
                      for(final Relation relEntArtifial1 : _relations_3) {
                        {
                          boolean _equalsIgnoreCase_5 = relEntArtifial1.getName().equalsIgnoreCase(aux_6.getLeftEnding().getTarget().toString());
                          if (_equalsIgnoreCase_5) {
                            {
                              EList<Entity> _entities_8 = e.getEntities();
                              for(final Entity ent1 : _entities_8) {
                                {
                                  boolean _equalsIgnoreCase_6 = ent1.getName().equalsIgnoreCase(relEntArtifial1.getLeftEnding().getTarget().toString());
                                  if (_equalsIgnoreCase_6) {
                                    {
                                      EList<Attribute> _attributes_11 = ent1.getAttributes();
                                      for(final Attribute ent1Att : _attributes_11) {
                                        {
                                          boolean _isIsKey_8 = ent1Att.isIsKey();
                                          if (_isIsKey_8) {
                                            _builder.append("\t");
                                            CharSequence _postgreSQLAttTypeChecker_6 = this.postgreSQLAttTypeChecker(ent1Att);
                                            _builder.append(_postgreSQLAttTypeChecker_6, "\t");
                                            Object _xblockexpression_40 = null;
                                            {
                                              artificialEntName1 = aux_6.getLeftEnding().getTarget().toString().toLowerCase();
                                              _xblockexpression_40 = null;
                                            }
                                            _builder.append(_xblockexpression_40, "\t");
                                            Object _xblockexpression_41 = null;
                                            {
                                              artificialEntKey1 = ent1Att.getName().toString().toLowerCase();
                                              _xblockexpression_41 = null;
                                            }
                                            _builder.append(_xblockexpression_41, "\t");
                                            Object _xblockexpression_42 = null;
                                            {
                                              artificialEntKeyAlt1 = ent1.getName().toString().toLowerCase();
                                              _xblockexpression_42 = null;
                                            }
                                            _builder.append(_xblockexpression_42, "\t");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            {
                              EList<Entity> _entities_9 = e.getEntities();
                              for(final Entity ent2 : _entities_9) {
                                {
                                  boolean _equalsIgnoreCase_7 = ent2.getName().equalsIgnoreCase(relEntArtifial1.getRightEnding().getTarget().toString());
                                  if (_equalsIgnoreCase_7) {
                                    {
                                      EList<Attribute> _attributes_12 = ent2.getAttributes();
                                      for(final Attribute ent2Att : _attributes_12) {
                                        {
                                          boolean _isIsKey_9 = ent2Att.isIsKey();
                                          if (_isIsKey_9) {
                                            _builder.append("\t");
                                            CharSequence _postgreSQLAttTypeChecker_7 = this.postgreSQLAttTypeChecker(ent2Att);
                                            _builder.append(_postgreSQLAttTypeChecker_7, "\t");
                                            Object _xblockexpression_43 = null;
                                            {
                                              artificialEntName2 = aux_6.getLeftEnding().getTarget().toString().toLowerCase();
                                              _xblockexpression_43 = null;
                                            }
                                            _builder.append(_xblockexpression_43, "\t");
                                            Object _xblockexpression_44 = null;
                                            {
                                              artificialEntKey2 = ent2Att.getName().toString().toLowerCase();
                                              _xblockexpression_44 = null;
                                            }
                                            _builder.append(_xblockexpression_44, "\t");
                                            Object _xblockexpression_45 = null;
                                            {
                                              artificialEntKeyAlt2 = ent2.getName().toString().toLowerCase();
                                              _xblockexpression_45 = null;
                                            }
                                            _builder.append(_xblockexpression_45, "\t");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      EList<Entity> _entities_10 = e.getEntities();
                      for(final Entity aux2 : _entities_10) {
                        {
                          boolean _equalsIgnoreCase_8 = aux_6.getRightEnding().getTarget().toString().equalsIgnoreCase(aux2.getName());
                          if (_equalsIgnoreCase_8) {
                            _builder.append("\t");
                            {
                              EList<Attribute> _attributes_13 = aux_6.getAttributes();
                              for(final Attribute attribute_4 : _attributes_13) {
                                {
                                  if (((!StringExtensions.isNullOrEmpty(attribute_4.getName())) && attribute_4.isIsKey())) {
                                    CharSequence _postgreSQLAttTypeChecker_8 = this.postgreSQLAttTypeChecker(attribute_4);
                                    _builder.append(_postgreSQLAttTypeChecker_8, "\t");
                                  }
                                }
                              }
                            }
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            {
                              EList<Attribute> _attributes_14 = aux_6.getAttributes();
                              for(final Attribute attribute_5 : _attributes_14) {
                                {
                                  if (((!StringExtensions.isNullOrEmpty(attribute_5.getName())) && (!attribute_5.isIsKey()))) {
                                    CharSequence _postgreSQLAttTypeChecker_9 = this.postgreSQLAttTypeChecker(attribute_5);
                                    _builder.append(_postgreSQLAttTypeChecker_9, "\t");
                                  }
                                }
                              }
                            }
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                    _builder.append("\t");
                    _builder.append("PRIMARY KEY (");
                    String _string = realEntKey.toString();
                    _builder.append(_string, "\t");
                    _builder.append(", ");
                    _builder.append(artificialEntKey1, "\t");
                    _builder.append(", ");
                    String _string_1 = artificialEntKey2.toString();
                    _builder.append(_string_1, "\t");
                    _builder.append("),");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("FOREIGN KEY (");
                    String _string_2 = realEntKey.toString();
                    _builder.append(_string_2, "\t");
                    _builder.append(") REFERENCES ");
                    String _string_3 = realEntName.toString();
                    _builder.append(_string_3, "\t");
                    _builder.append(" (");
                    String _string_4 = realEntKey.toString();
                    _builder.append(_string_4, "\t");
                    _builder.append("),");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("FOREIGN KEY (");
                    String _string_5 = artificialEntKey1.toString();
                    _builder.append(_string_5, "\t");
                    _builder.append(") REFERENCES ");
                    _builder.append(artificialEntName1, "\t");
                    _builder.append(" (");
                    String _string_6 = artificialEntKeyAlt1.toString();
                    _builder.append(_string_6, "\t");
                    _builder.append("),");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("FOREIGN KEY (");
                    String _string_7 = artificialEntKey2.toString();
                    _builder.append(_string_7, "\t");
                    _builder.append(") REFERENCES ");
                    _builder.append(artificialEntName2, "\t");
                    _builder.append(" (");
                    String _string_8 = artificialEntKeyAlt2.toString();
                    _builder.append(_string_8, "\t");
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                    _builder.append(");");
                    _builder.newLine();
                  } else {
                    if (((!StringExtensions.isNullOrEmpty(relation_1.getName())) && relation_1.getName().equals(aux_6.getRightEnding().getTarget().toString()))) {
                      _builder.append("\t\t\t\t\t\t");
                      _builder.newLine();
                      _builder.append("-- Table: ");
                      String _upperCase_19 = aux_6.getName().toUpperCase();
                      _builder.append(_upperCase_19);
                      _builder.newLineIfNotEmpty();
                      _builder.append("-- DROP TABLE ");
                      String _upperCase_20 = aux_6.getName().toUpperCase();
                      _builder.append(_upperCase_20);
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("CREATE TABLE IF NOT EXISTS ");
                      String _lowerCase_13 = aux_6.getName().toLowerCase();
                      _builder.append(_lowerCase_13);
                      _builder.append(" (");
                      _builder.newLineIfNotEmpty();
                      {
                        EList<Entity> _entities_11 = e.getEntities();
                        for(final Entity entAux_1 : _entities_11) {
                          {
                            boolean _equalsIgnoreCase_9 = entAux_1.getName().toString().equalsIgnoreCase(aux_6.getLeftEnding().getTarget().toString());
                            if (_equalsIgnoreCase_9) {
                              {
                                EList<Attribute> _attributes_15 = entAux_1.getAttributes();
                                for(final Attribute attAux_1 : _attributes_15) {
                                  {
                                    boolean _isIsKey_10 = attAux_1.isIsKey();
                                    if (_isIsKey_10) {
                                      _builder.append("\t");
                                      CharSequence _postgreSQLAttTypeChecker_10 = this.postgreSQLAttTypeChecker(attAux_1);
                                      _builder.append(_postgreSQLAttTypeChecker_10, "\t");
                                      Object _xblockexpression_46 = null;
                                      {
                                        realEntName = entAux_1.getName().toString().toLowerCase();
                                        _xblockexpression_46 = null;
                                      }
                                      _builder.append(_xblockexpression_46, "\t");
                                      Object _xblockexpression_47 = null;
                                      {
                                        realEntKey = attAux_1.getName().toString().toLowerCase();
                                        _xblockexpression_47 = null;
                                      }
                                      _builder.append(_xblockexpression_47, "\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        EList<Relation> _relations_4 = e.getRelations();
                        for(final Relation relEntArtifial1_1 : _relations_4) {
                          {
                            boolean _equalsIgnoreCase_10 = relEntArtifial1_1.getName().equalsIgnoreCase(aux_6.getRightEnding().getTarget().toString());
                            if (_equalsIgnoreCase_10) {
                              {
                                EList<Entity> _entities_12 = e.getEntities();
                                for(final Entity ent1_1 : _entities_12) {
                                  {
                                    boolean _equalsIgnoreCase_11 = ent1_1.getName().equalsIgnoreCase(relEntArtifial1_1.getRightEnding().getTarget().toString());
                                    if (_equalsIgnoreCase_11) {
                                      {
                                        EList<Attribute> _attributes_16 = ent1_1.getAttributes();
                                        for(final Attribute ent1Att_1 : _attributes_16) {
                                          {
                                            boolean _isIsKey_11 = ent1Att_1.isIsKey();
                                            if (_isIsKey_11) {
                                              _builder.append("\t");
                                              CharSequence _postgreSQLAttTypeChecker_11 = this.postgreSQLAttTypeChecker(ent1Att_1);
                                              _builder.append(_postgreSQLAttTypeChecker_11, "\t");
                                              Object _xblockexpression_48 = null;
                                              {
                                                artificialEntName1 = aux_6.getRightEnding().getTarget().toString().toLowerCase();
                                                _xblockexpression_48 = null;
                                              }
                                              _builder.append(_xblockexpression_48, "\t");
                                              Object _xblockexpression_49 = null;
                                              {
                                                artificialEntKey1 = ent1Att_1.getName().toString().toLowerCase();
                                                _xblockexpression_49 = null;
                                              }
                                              _builder.append(_xblockexpression_49, "\t");
                                              Object _xblockexpression_50 = null;
                                              {
                                                artificialEntKeyAlt1 = ent1_1.getName().toString().toLowerCase();
                                                _xblockexpression_50 = null;
                                              }
                                              _builder.append(_xblockexpression_50, "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              {
                                EList<Entity> _entities_13 = e.getEntities();
                                for(final Entity ent2_1 : _entities_13) {
                                  {
                                    boolean _equalsIgnoreCase_12 = ent2_1.getName().equalsIgnoreCase(relEntArtifial1_1.getLeftEnding().getTarget().toString());
                                    if (_equalsIgnoreCase_12) {
                                      {
                                        EList<Attribute> _attributes_17 = ent2_1.getAttributes();
                                        for(final Attribute ent2Att_1 : _attributes_17) {
                                          {
                                            boolean _isIsKey_12 = ent2Att_1.isIsKey();
                                            if (_isIsKey_12) {
                                              _builder.append("\t");
                                              CharSequence _postgreSQLAttTypeChecker_12 = this.postgreSQLAttTypeChecker(ent2Att_1);
                                              _builder.append(_postgreSQLAttTypeChecker_12, "\t");
                                              Object _xblockexpression_51 = null;
                                              {
                                                artificialEntName2 = aux_6.getRightEnding().getTarget().toString().toLowerCase();
                                                _xblockexpression_51 = null;
                                              }
                                              _builder.append(_xblockexpression_51, "\t");
                                              Object _xblockexpression_52 = null;
                                              {
                                                artificialEntKey2 = ent2Att_1.getName().toString().toLowerCase();
                                                _xblockexpression_52 = null;
                                              }
                                              _builder.append(_xblockexpression_52, "\t");
                                              Object _xblockexpression_53 = null;
                                              {
                                                artificialEntKeyAlt2 = ent2_1.getName().toString().toLowerCase();
                                                _xblockexpression_53 = null;
                                              }
                                              _builder.append(_xblockexpression_53, "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        EList<Entity> _entities_14 = e.getEntities();
                        for(final Entity aux2_1 : _entities_14) {
                          {
                            boolean _equalsIgnoreCase_13 = aux_6.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux2_1.getName());
                            if (_equalsIgnoreCase_13) {
                              _builder.append("\t");
                              {
                                EList<Attribute> _attributes_18 = aux_6.getAttributes();
                                for(final Attribute attribute_6 : _attributes_18) {
                                  {
                                    if (((!StringExtensions.isNullOrEmpty(attribute_6.getName())) && attribute_6.isIsKey())) {
                                      CharSequence _postgreSQLAttTypeChecker_13 = this.postgreSQLAttTypeChecker(attribute_6);
                                      _builder.append(_postgreSQLAttTypeChecker_13, "\t");
                                    }
                                  }
                                }
                              }
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              {
                                EList<Attribute> _attributes_19 = aux_6.getAttributes();
                                for(final Attribute attribute_7 : _attributes_19) {
                                  {
                                    if (((!StringExtensions.isNullOrEmpty(attribute_7.getName())) && (!attribute_7.isIsKey()))) {
                                      CharSequence _postgreSQLAttTypeChecker_14 = this.postgreSQLAttTypeChecker(attribute_7);
                                      _builder.append(_postgreSQLAttTypeChecker_14, "\t");
                                    }
                                  }
                                }
                              }
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      _builder.append("\t");
                      _builder.append("PRIMARY KEY (");
                      String _string_9 = realEntKey.toString();
                      _builder.append(_string_9, "\t");
                      _builder.append(", ");
                      _builder.append(artificialEntKey1, "\t");
                      _builder.append(", ");
                      String _string_10 = artificialEntKey2.toString();
                      _builder.append(_string_10, "\t");
                      _builder.append("),");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("FOREIGN KEY (");
                      String _string_11 = realEntKey.toString();
                      _builder.append(_string_11, "\t");
                      _builder.append(") REFERENCES ");
                      String _string_12 = realEntName.toString();
                      _builder.append(_string_12, "\t");
                      _builder.append(" (");
                      String _string_13 = realEntKey.toString();
                      _builder.append(_string_13, "\t");
                      _builder.append("),");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("FOREIGN KEY (");
                      String _string_14 = artificialEntKey1.toString();
                      _builder.append(_string_14, "\t");
                      _builder.append(") REFERENCES ");
                      _builder.append(artificialEntName1, "\t");
                      _builder.append(" (");
                      String _string_15 = artificialEntKeyAlt1.toString();
                      _builder.append(_string_15, "\t");
                      _builder.append("),");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("FOREIGN KEY (");
                      String _string_16 = artificialEntKey2.toString();
                      _builder.append(_string_16, "\t");
                      _builder.append(") REFERENCES ");
                      _builder.append(artificialEntName2, "\t");
                      _builder.append(" (");
                      String _string_17 = artificialEntKeyAlt2.toString();
                      _builder.append(_string_17, "\t");
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                      _builder.append(");");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence postgreSQLAttTypeChecker(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    String _lowerCase = a.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" ");
    {
      boolean _equalsIgnoreCase = a.getType().toString().equalsIgnoreCase("string");
      if (_equalsIgnoreCase) {
        _builder.append(" VARCHAR (255) NOT NULL,");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
      } else {
        boolean _equalsIgnoreCase_1 = a.getType().toString().equalsIgnoreCase("int");
        if (_equalsIgnoreCase_1) {
          _builder.append(" INT NOT NULL,");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        } else {
          boolean _equalsIgnoreCase_2 = a.getType().toString().equalsIgnoreCase("datetime");
          if (_equalsIgnoreCase_2) {
            _builder.append(" DATE NOT NULL,");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
          } else {
            if ((a.getType().toString().equalsIgnoreCase("money") || a.getType().toString().equalsIgnoreCase("double"))) {
              _builder.append(" NUMERIC NOT NULL,");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
            } else {
              boolean _equalsIgnoreCase_3 = a.getType().toString().equalsIgnoreCase("boolean");
              if (_equalsIgnoreCase_3) {
                _builder.append(" BOOLEAN NOT NULL,");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
              } else {
                boolean _equalsIgnoreCase_4 = a.getType().toString().equalsIgnoreCase("file");
                if (_equalsIgnoreCase_4) {
                  _builder.append(" BYTEA,");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLAttTypeCheckerUnnamed(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = a.getType().toString().equalsIgnoreCase("string");
      if (_equalsIgnoreCase) {
        _builder.append(" VARCHAR (255) NOT NULL,");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equalsIgnoreCase_1 = a.getType().toString().equalsIgnoreCase("int");
        if (_equalsIgnoreCase_1) {
          _builder.append(" INT NOT NULL,");
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equalsIgnoreCase_2 = a.getType().toString().equalsIgnoreCase("datetime");
          if (_equalsIgnoreCase_2) {
            _builder.append(" DATE NOT NULL,");
            _builder.newLineIfNotEmpty();
          } else {
            if ((a.getType().toString().equalsIgnoreCase("money") || a.getType().toString().equalsIgnoreCase("double"))) {
              _builder.append(" NUMERIC NOT NULL,");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equalsIgnoreCase_3 = a.getType().toString().equalsIgnoreCase("boolean");
              if (_equalsIgnoreCase_3) {
                _builder.append(" BOOLEAN NOT NULL,");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equalsIgnoreCase_4 = a.getType().toString().equalsIgnoreCase("file");
                if (_equalsIgnoreCase_4) {
                  _builder.append(" BYTEA,");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLAttTypeCheckerNtoNLeft(final ERModel e, final Relation r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          String _string = aux.getName().toString();
          String _string_1 = r.getLeftEnding().getTarget().toString();
          boolean _equals = Objects.equal(_string, _string_1);
          if (_equals) {
            {
              EList<Attribute> _attributes = aux.getAttributes();
              for(final Attribute aux2 : _attributes) {
                {
                  boolean _isIsKey = aux2.isIsKey();
                  if (_isIsKey) {
                    {
                      boolean _equalsIgnoreCase = aux2.getType().toString().equalsIgnoreCase("string");
                      if (_equalsIgnoreCase) {
                        _builder.append(" VARCHAR (255) NOT NULL,");
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equalsIgnoreCase_1 = aux2.getType().toString().equalsIgnoreCase("int");
                        if (_equalsIgnoreCase_1) {
                          _builder.append(" INT NOT NULL,");
                          _builder.newLineIfNotEmpty();
                        } else {
                          boolean _equalsIgnoreCase_2 = aux2.getType().toString().equalsIgnoreCase("datetime");
                          if (_equalsIgnoreCase_2) {
                            _builder.append(" DATE NOT NULL,");
                            _builder.newLineIfNotEmpty();
                          } else {
                            if ((aux2.getType().toString().equalsIgnoreCase("money") || aux2.getType().toString().equalsIgnoreCase("double"))) {
                              _builder.append(" NUMERIC NOT NULL,");
                              _builder.newLineIfNotEmpty();
                            } else {
                              boolean _equalsIgnoreCase_3 = aux2.getType().toString().equalsIgnoreCase("boolean");
                              if (_equalsIgnoreCase_3) {
                                _builder.append(" BOOLEAN NOT NULL,");
                                _builder.newLineIfNotEmpty();
                              } else {
                                boolean _equalsIgnoreCase_4 = aux2.getType().toString().equalsIgnoreCase("file");
                                if (_equalsIgnoreCase_4) {
                                  _builder.append(" BYTEA,");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLAttTypeCheckerNtoNRight(final ERModel e, final Relation r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          String _string = aux.getName().toString();
          String _string_1 = r.getRightEnding().getTarget().toString();
          boolean _equals = Objects.equal(_string, _string_1);
          if (_equals) {
            {
              EList<Attribute> _attributes = aux.getAttributes();
              for(final Attribute aux2 : _attributes) {
                {
                  boolean _isIsKey = aux2.isIsKey();
                  if (_isIsKey) {
                    {
                      boolean _equalsIgnoreCase = aux2.getType().toString().equalsIgnoreCase("string");
                      if (_equalsIgnoreCase) {
                        _builder.append(" VARCHAR (255) NOT NULL,");
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equalsIgnoreCase_1 = aux2.getType().toString().equalsIgnoreCase("int");
                        if (_equalsIgnoreCase_1) {
                          _builder.append(" INT NOT NULL,");
                          _builder.newLineIfNotEmpty();
                        } else {
                          boolean _equalsIgnoreCase_2 = aux2.getType().toString().equalsIgnoreCase("datetime");
                          if (_equalsIgnoreCase_2) {
                            _builder.append(" DATE NOT NULL,");
                            _builder.newLineIfNotEmpty();
                          } else {
                            if ((aux2.getType().toString().equalsIgnoreCase("money") || aux2.getType().toString().equalsIgnoreCase("double"))) {
                              _builder.append(" NUMERIC NOT NULL,");
                              _builder.newLineIfNotEmpty();
                            } else {
                              boolean _equalsIgnoreCase_3 = aux2.getType().toString().equalsIgnoreCase("boolean");
                              if (_equalsIgnoreCase_3) {
                                _builder.append(" BOOLEAN NOT NULL,");
                                _builder.newLineIfNotEmpty();
                              } else {
                                boolean _equalsIgnoreCase_4 = aux2.getType().toString().equalsIgnoreCase("file");
                                if (_equalsIgnoreCase_4) {
                                  _builder.append(" BYTEA,");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLDiscoverPKtoFK(final ERModel e, final String r, final int i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          String _string = aux.getName().toString();
          String _string_1 = r.toString();
          boolean _equals = Objects.equal(_string, _string_1);
          if (_equals) {
            {
              EList<Attribute> _attributes = aux.getAttributes();
              for(final Attribute aux2 : _attributes) {
                {
                  boolean _isIsKey = aux2.isIsKey();
                  if (_isIsKey) {
                    String _lowerCase = aux2.getName().toString().toLowerCase();
                    _builder.append(_lowerCase);
                  }
                }
                {
                  if (((i - 1) == 0)) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLDiscoverAutoInheritedPKtoFK(final ERModel e, final String r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity auxE : _entities) {
        {
          boolean _equalsIgnoreCase = auxE.getName().equalsIgnoreCase(r.toString());
          if (_equalsIgnoreCase) {
            {
              EList<Entity> _entities_1 = e.getEntities();
              for(final Entity auxE2 : _entities_1) {
                {
                  if (((auxE.getIs() != null) && auxE2.getName().toString().equalsIgnoreCase(auxE.getIs().toString()))) {
                    {
                      EList<Attribute> _attributes = auxE2.getAttributes();
                      for(final Attribute auxAtt : _attributes) {
                        {
                          boolean _isIsKey = auxAtt.isIsKey();
                          if (_isIsKey) {
                            String _lowerCase = auxAtt.getName().toString().toLowerCase();
                            _builder.append(_lowerCase);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLDiscoverInheritedPKtoFK(final ERModel e, final String r, final int i, final String isAutoRel) {
    StringConcatenation _builder = new StringConcatenation();
    int auxi = i;
    _builder.newLineIfNotEmpty();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          EList<Attribute> _attributes = aux.getAttributes();
          for(final Attribute aux2 : _attributes) {
            {
              if ((aux2.getName().toString().equalsIgnoreCase(r.toString()) && aux2.isIsKey())) {
                String _lowerCase = aux.getName().toString().toLowerCase();
                _builder.append(_lowerCase);
                _builder.append(" (");
                String _lowerCase_1 = aux2.getName().toString().toLowerCase();
                _builder.append(_lowerCase_1);
                _builder.append(")");
                {
                  EList<Relation> _relations = e.getRelations();
                  for(final Relation rAux : _relations) {
                    {
                      if (((rAux.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || rAux.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (rAux.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || rAux.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
                        {
                          if ((isAutoRel.equalsIgnoreCase(rAux.getLeftEnding().getTarget().toString()) && isAutoRel.equalsIgnoreCase(rAux.getRightEnding().getTarget().toString()))) {
                            Object _xblockexpression = null;
                            {
                              auxi = (auxi - 1);
                              _xblockexpression = null;
                            }
                            _builder.append(_xblockexpression);
                          }
                        }
                      }
                    }
                  }
                }
                {
                  if (((auxi - 1) == 0)) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLVerifyFKsAttributesRelation1to1(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    CharSequence _postgreSQLAttTypeChecker = this.postgreSQLAttTypeChecker(aux2);
                                    _builder.append(_postgreSQLAttTypeChecker);
                                    _builder.append(" ");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                EList<Entity> _entities_1 = e.getEntities();
                                for(final Entity entityAux : _entities_1) {
                                  {
                                    boolean _equalsIgnoreCase_2 = entityAux.getName().equalsIgnoreCase(aux.getIs().toString());
                                    if (_equalsIgnoreCase_2) {
                                      {
                                        EList<Attribute> _attributes_1 = entityAux.getAttributes();
                                        for(final Attribute attAux : _attributes_1) {
                                          {
                                            boolean _isIsKey_1 = attAux.isIsKey();
                                            if (_isIsKey_1) {
                                              CharSequence _postgreSQLAttTypeChecker_1 = this.postgreSQLAttTypeChecker(attAux);
                                              _builder.append(_postgreSQLAttTypeChecker_1);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLVerifyFKsAttributesRelation1toN(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute attTest : _attributes) {
                                {
                                  boolean _isIsKey = attTest.isIsKey();
                                  if (_isIsKey) {
                                    CharSequence _postgreSQLAttTypeChecker = this.postgreSQLAttTypeChecker(attTest);
                                    _builder.append(_postgreSQLAttTypeChecker);
                                    _builder.append(" ");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                if (_equalsIgnoreCase_2) {
                                  String _lowerCase = relation.getName().toString().toLowerCase();
                                  _builder.append(_lowerCase);
                                  _builder.append(" ");
                                  {
                                    EList<Entity> _entities_1 = e.getEntities();
                                    for(final Entity aux2 : _entities_1) {
                                      {
                                        boolean _equalsIgnoreCase_3 = aux2.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                        if (_equalsIgnoreCase_3) {
                                          {
                                            EList<Entity> _entities_2 = e.getEntities();
                                            for(final Entity aux3 : _entities_2) {
                                              {
                                                boolean _equalsIgnoreCase_4 = aux3.getName().equalsIgnoreCase(aux2.getIs().toString());
                                                if (_equalsIgnoreCase_4) {
                                                  {
                                                    EList<Attribute> _attributes_1 = aux3.getAttributes();
                                                    for(final Attribute aux4 : _attributes_1) {
                                                      {
                                                        boolean _isIsKey_1 = aux4.isIsKey();
                                                        if (_isIsKey_1) {
                                                          CharSequence _postgreSQLAttTypeCheckerUnnamed = this.postgreSQLAttTypeCheckerUnnamed(aux4);
                                                          _builder.append(_postgreSQLAttTypeCheckerUnnamed);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_5 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  boolean _not_1 = (!_equalsIgnoreCase_5);
                                  if (_not_1) {
                                    String _lowerCase_1 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_1);
                                    _builder.append(" ");
                                    {
                                      EList<Entity> _entities_3 = e.getEntities();
                                      for(final Entity aux2_1 : _entities_3) {
                                        {
                                          boolean _equalsIgnoreCase_6 = aux2_1.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                          if (_equalsIgnoreCase_6) {
                                            {
                                              EList<Entity> _entities_4 = e.getEntities();
                                              for(final Entity aux3_1 : _entities_4) {
                                                {
                                                  boolean _equalsIgnoreCase_7 = aux3_1.getName().equalsIgnoreCase(aux2_1.getIs().toString());
                                                  if (_equalsIgnoreCase_7) {
                                                    {
                                                      EList<Attribute> _attributes_2 = aux3_1.getAttributes();
                                                      for(final Attribute aux4_1 : _attributes_2) {
                                                        {
                                                          boolean _isIsKey_2 = aux4_1.isIsKey();
                                                          if (_isIsKey_2) {
                                                            CharSequence _postgreSQLAttTypeCheckerUnnamed_1 = this.postgreSQLAttTypeCheckerUnnamed(aux4_1);
                                                            _builder.append(_postgreSQLAttTypeCheckerUnnamed_1);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQL_COUNT_FKsRelation1to1(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    Object _xblockexpression = null;
                                    {
                                      int _globalFKcounter_1to1 = this.globalFKcounter_1to1;
                                      this.globalFKcounter_1to1 = (_globalFKcounter_1to1 + 1);
                                      _xblockexpression = null;
                                    }
                                    _builder.append(_xblockexpression);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              Object _xblockexpression_1 = null;
                              {
                                int _globalFKcounter_1to1 = this.globalFKcounter_1to1;
                                this.globalFKcounter_1to1 = (_globalFKcounter_1to1 + 1);
                                _xblockexpression_1 = null;
                              }
                              _builder.append(_xblockexpression_1);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLDefineFKsRelation1to1(final ERModel e, final String ename, final int count) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    _builder.append("FOREIGN KEY (");
                                    String _lowerCase = aux2.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase);
                                    _builder.append(") REFERENCES ");
                                    String _lowerCase_1 = aux.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_1);
                                    _builder.append(" (");
                                    String _lowerCase_2 = aux2.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_2);
                                    _builder.append(")");
                                    {
                                      if ((this.counter > 1)) {
                                        _builder.append(", ");
                                        String _println = InputOutput.<String>println("\n");
                                        _builder.append(_println);
                                        Object _xblockexpression = null;
                                        {
                                          int _counter = this.counter;
                                          this.counter = (_counter - 1);
                                          _xblockexpression = null;
                                        }
                                        _builder.append(_xblockexpression);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              _builder.append("FOREIGN KEY (");
                              {
                                EList<Entity> _entities_1 = e.getEntities();
                                for(final Entity entityAux : _entities_1) {
                                  {
                                    boolean _equalsIgnoreCase_2 = entityAux.getName().equalsIgnoreCase(aux.getIs().toString());
                                    if (_equalsIgnoreCase_2) {
                                      {
                                        EList<Attribute> _attributes_1 = entityAux.getAttributes();
                                        for(final Attribute attAux : _attributes_1) {
                                          {
                                            boolean _isIsKey_1 = attAux.isIsKey();
                                            if (_isIsKey_1) {
                                              String _lowerCase_3 = attAux.getName().toString().toLowerCase();
                                              _builder.append(_lowerCase_3);
                                              _builder.append(") REFERENCES ");
                                              String _lowerCase_4 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                              _builder.append(_lowerCase_4);
                                              _builder.append(" (");
                                              String _lowerCase_5 = attAux.getName().toString().toLowerCase();
                                              _builder.append(_lowerCase_5);
                                              _builder.append(")");
                                              {
                                                if ((this.counter > 1)) {
                                                  _builder.append(", ");
                                                  String _println_1 = InputOutput.<String>println("\n");
                                                  _builder.append(_println_1);
                                                  Object _xblockexpression_1 = null;
                                                  {
                                                    int _counter = this.counter;
                                                    this.counter = (_counter - 1);
                                                    _xblockexpression_1 = null;
                                                  }
                                                  _builder.append(_xblockexpression_1);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQL_COUNT_FKsRelation1toN(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        _builder.newLineIfNotEmpty();
        {
          if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute attTest : _attributes) {
                                {
                                  boolean _isIsKey = attTest.isIsKey();
                                  if (_isIsKey) {
                                    Object _xblockexpression = null;
                                    {
                                      int _globalFKcounter_1toN = this.globalFKcounter_1toN;
                                      this.globalFKcounter_1toN = (_globalFKcounter_1toN + 1);
                                      _xblockexpression = null;
                                    }
                                    _builder.append(_xblockexpression);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                if (_equalsIgnoreCase_2) {
                                  Object _xblockexpression_1 = null;
                                  {
                                    int _globalFKcounter_1toN = this.globalFKcounter_1toN;
                                    this.globalFKcounter_1toN = (_globalFKcounter_1toN + 1);
                                    _xblockexpression_1 = null;
                                  }
                                  _builder.append(_xblockexpression_1);
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_3 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  boolean _not_1 = (!_equalsIgnoreCase_3);
                                  if (_not_1) {
                                    Object _xblockexpression_2 = null;
                                    {
                                      int _globalFKcounter_1toN = this.globalFKcounter_1toN;
                                      this.globalFKcounter_1toN = (_globalFKcounter_1toN + 1);
                                      _xblockexpression_2 = null;
                                    }
                                    _builder.append(_xblockexpression_2);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLDefineFKsRelation1toN(final ERModel e, final String ename, final int count) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute attTest : _attributes) {
                                {
                                  boolean _isIsKey = attTest.isIsKey();
                                  if (_isIsKey) {
                                    _builder.append("FOREIGN KEY (");
                                    String _lowerCase = attTest.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase);
                                    _builder.append(") REFERENCES ");
                                    String _string = aux.getName().toString();
                                    _builder.append(_string);
                                    _builder.append(" (");
                                    String _lowerCase_1 = attTest.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_1);
                                    _builder.append(")");
                                    {
                                      if ((this.counter > 1)) {
                                        _builder.append(",");
                                        Object _xblockexpression = null;
                                        {
                                          int _counter = this.counter;
                                          this.counter = (_counter - 1);
                                          _xblockexpression = null;
                                        }
                                        _builder.append(_xblockexpression);
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                if (_equalsIgnoreCase_2) {
                                  _builder.append("FOREIGN KEY (");
                                  String _lowerCase_2 = relation.getName().toString().toLowerCase();
                                  _builder.append(_lowerCase_2);
                                  _builder.append(") REFERENCES ");
                                  String _lowerCase_3 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                  _builder.append(_lowerCase_3);
                                  _builder.append(" (");
                                  {
                                    EList<Entity> _entities_1 = e.getEntities();
                                    for(final Entity aux2 : _entities_1) {
                                      {
                                        boolean _equalsIgnoreCase_3 = aux2.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                        if (_equalsIgnoreCase_3) {
                                          {
                                            EList<Entity> _entities_2 = e.getEntities();
                                            for(final Entity aux3 : _entities_2) {
                                              {
                                                boolean _equalsIgnoreCase_4 = aux3.getName().equalsIgnoreCase(aux2.getIs().toString());
                                                if (_equalsIgnoreCase_4) {
                                                  {
                                                    EList<Attribute> _attributes_1 = aux3.getAttributes();
                                                    for(final Attribute aux4 : _attributes_1) {
                                                      {
                                                        boolean _isIsKey_1 = aux4.isIsKey();
                                                        if (_isIsKey_1) {
                                                          String _lowerCase_4 = aux4.getName().toString().toLowerCase();
                                                          _builder.append(_lowerCase_4);
                                                          _builder.append(")");
                                                          {
                                                            if ((this.counter > 1)) {
                                                              _builder.append(",");
                                                              Object _xblockexpression_1 = null;
                                                              {
                                                                int _counter = this.counter;
                                                                this.counter = (_counter - 1);
                                                                _xblockexpression_1 = null;
                                                              }
                                                              _builder.append(_xblockexpression_1);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_5 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  boolean _not_1 = (!_equalsIgnoreCase_5);
                                  if (_not_1) {
                                    _builder.append("FOREIGN KEY (");
                                    String _lowerCase_5 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_5);
                                    _builder.append(") REFERENCES ");
                                    String _lowerCase_6 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_6);
                                    _builder.append(" (");
                                    {
                                      EList<Entity> _entities_3 = e.getEntities();
                                      for(final Entity aux2_1 : _entities_3) {
                                        {
                                          boolean _equalsIgnoreCase_6 = aux2_1.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                          if (_equalsIgnoreCase_6) {
                                            {
                                              EList<Entity> _entities_4 = e.getEntities();
                                              for(final Entity aux3_1 : _entities_4) {
                                                {
                                                  boolean _equalsIgnoreCase_7 = aux3_1.getName().equalsIgnoreCase(aux2_1.getIs().toString());
                                                  if (_equalsIgnoreCase_7) {
                                                    {
                                                      EList<Attribute> _attributes_2 = aux3_1.getAttributes();
                                                      for(final Attribute aux4_1 : _attributes_2) {
                                                        {
                                                          boolean _isIsKey_2 = aux4_1.isIsKey();
                                                          if (_isIsKey_2) {
                                                            String _lowerCase_7 = aux4_1.getName().toString().toLowerCase();
                                                            _builder.append(_lowerCase_7);
                                                            _builder.append(")");
                                                            {
                                                              if ((this.counter > 1)) {
                                                                _builder.append(",");
                                                                Object _xblockexpression_2 = null;
                                                                {
                                                                  int _counter = this.counter;
                                                                  this.counter = (_counter - 1);
                                                                  _xblockexpression_2 = null;
                                                                }
                                                                _builder.append(_xblockexpression_2);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence postgreSQLHaveFK(final ERModel e, final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity.getName().toString());
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    String _xblockexpression = null;
                                    {
                                      this.myListFKs.add(aux2.getName());
                                      _xblockexpression = "";
                                    }
                                    _builder.append(_xblockexpression);
                                  }
                                }
                                _builder.newLineIfNotEmpty();
                              }
                            }
                            _builder.append("\t\t\t\t\t\t\t");
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              String _xblockexpression_1 = null;
                              {
                                this.myListFKs.add(aux.getIs().toString());
                                _xblockexpression_1 = "";
                              }
                              _builder.append(_xblockexpression_1);
                            }
                          }
                        }
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          } else {
            if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
              {
                boolean _equalsIgnoreCase_2 = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity.getName().toString());
                if (_equalsIgnoreCase_2) {
                  {
                    EList<Entity> _entities_1 = e.getEntities();
                    for(final Entity aux_1 : _entities_1) {
                      {
                        boolean _equalsIgnoreCase_3 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux_1.getName());
                        if (_equalsIgnoreCase_3) {
                          {
                            Entity _is_2 = aux_1.getIs();
                            boolean _tripleEquals_2 = (_is_2 == null);
                            if (_tripleEquals_2) {
                              {
                                EList<Attribute> _attributes_1 = aux_1.getAttributes();
                                for(final Attribute attTest : _attributes_1) {
                                  {
                                    boolean _isIsKey_1 = attTest.isIsKey();
                                    if (_isIsKey_1) {
                                      String _xblockexpression_2 = null;
                                      {
                                        this.myListFKs.add(attTest.getName());
                                        _xblockexpression_2 = "";
                                      }
                                      _builder.append(_xblockexpression_2);
                                    }
                                  }
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            } else {
                              Entity _is_3 = aux_1.getIs();
                              boolean _tripleEquals_3 = (_is_3 == null);
                              boolean _not_1 = (!_tripleEquals_3);
                              if (_not_1) {
                                {
                                  boolean _equalsIgnoreCase_4 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  if (_equalsIgnoreCase_4) {
                                    {
                                      EList<Entity> _entities_2 = e.getEntities();
                                      for(final Entity aux2_1 : _entities_2) {
                                        {
                                          boolean _equalsIgnoreCase_5 = aux2_1.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                          if (_equalsIgnoreCase_5) {
                                            {
                                              EList<Entity> _entities_3 = e.getEntities();
                                              for(final Entity aux3 : _entities_3) {
                                                {
                                                  boolean _equalsIgnoreCase_6 = aux3.getName().equalsIgnoreCase(aux2_1.getIs().toString());
                                                  if (_equalsIgnoreCase_6) {
                                                    {
                                                      EList<Attribute> _attributes_2 = aux3.getAttributes();
                                                      for(final Attribute aux4 : _attributes_2) {
                                                        {
                                                          boolean _isIsKey_2 = aux4.isIsKey();
                                                          if (_isIsKey_2) {
                                                            String _xblockexpression_3 = null;
                                                            {
                                                              this.myListFKs.add(aux3.getName());
                                                              _xblockexpression_3 = "";
                                                            }
                                                            _builder.append(_xblockexpression_3);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  } else {
                                    boolean _equalsIgnoreCase_7 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                    boolean _not_2 = (!_equalsIgnoreCase_7);
                                    if (_not_2) {
                                      {
                                        EList<Entity> _entities_4 = e.getEntities();
                                        for(final Entity aux2_2 : _entities_4) {
                                          {
                                            boolean _equalsIgnoreCase_8 = aux2_2.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                            if (_equalsIgnoreCase_8) {
                                              {
                                                EList<Entity> _entities_5 = e.getEntities();
                                                for(final Entity aux3_1 : _entities_5) {
                                                  {
                                                    boolean _equalsIgnoreCase_9 = aux3_1.getName().equalsIgnoreCase(aux2_2.getIs().toString());
                                                    if (_equalsIgnoreCase_9) {
                                                      {
                                                        EList<Attribute> _attributes_3 = aux3_1.getAttributes();
                                                        for(final Attribute aux4_1 : _attributes_3) {
                                                          {
                                                            boolean _isIsKey_3 = aux4_1.isIsKey();
                                                            if (_isIsKey_3) {
                                                              String _xblockexpression_4 = null;
                                                              {
                                                                this.myListFKs.add(aux4_1.getName());
                                                                _xblockexpression_4 = "";
                                                              }
                                                              _builder.append(_xblockexpression_4);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  /**
   * PHYSICAL SCHEMA (MySQL) GENERATOR CODE
   */
  public CharSequence CreateMySQL(final ERModel e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* MySQL TEMPLATE GENERATED BY ERtext */");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/* TODO code */");
    _builder.newLine();
    return _builder;
  }
}
