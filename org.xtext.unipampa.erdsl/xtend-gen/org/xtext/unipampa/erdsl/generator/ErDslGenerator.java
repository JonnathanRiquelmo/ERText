/**
 * generated by Xtext 2.17.0
 */
package org.xtext.unipampa.erdsl.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.unipampa.erdsl.erDsl.Attribute;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ErDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    String _name = modeloER.getDomain().getName();
    String _plus = ("LogicalSchema_" + _name);
    String _plus_1 = (_plus + ".html");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<title>ERtext Logical schema</title>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("body    { background: #fff; border: 1px solid black, padding: 5px 0 5px 0}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append(".title  { font: bold 160% serif; color: #0066FF; padding: 10px 0 10px 0; text-align: center; background: #ccc8c8}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append(".stitle { font: bold 120% sans-serif; color: #0044DD; padding: 10px 0 10px 0 }");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append(".sstitle{ font: bold 120% serif; color: #000000; background: #efefef; padding: 5px 0 5px 0; padding-left: 20px; }");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append(".field  { font: 100% sans-serif; color: #000000; padding: 2px; padding-left: 50px; border: 1px solid black}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append(".value  { font: 100% sans-serif; color: #505050 }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body> ");
    _builder.newLine();
    _builder.append("<div>");
    _builder.newLine();
    _builder.append("<p class=\"title\">ERtext Logical schema</p>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div>");
    _builder.newLine();
    _builder.append("<p class=\"sstitle\">Domain</p> ");
    _builder.newLine();
    _builder.append("<p class=\"field\">");
    String _upperCase = modeloER.getDomain().getName().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div>");
    _builder.newLine();
    _builder.append("<p class=\"sstitle\">Entities</p>");
    _builder.newLine();
    _builder.append("<p class=\"field\">");
    _builder.newLine();
    {
      EList<Entity> _entities = modeloER.getEntities();
      boolean _hasElements = false;
      for(final Entity entity : _entities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" )</br></br>", "");
        }
        String _upperCase_1 = entity.getName().toUpperCase();
        _builder.append(_upperCase_1);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          Entity _is = entity.getIs();
          boolean _tripleEquals = (_is == null);
          boolean _not = (!_tripleEquals);
          if (_not) {
            {
              EList<Entity> _entities_1 = modeloER.getEntities();
              for(final Entity aux : _entities_1) {
                {
                  boolean _equalsIgnoreCase = aux.getName().equalsIgnoreCase(entity.getIs().toString());
                  if (_equalsIgnoreCase) {
                    _builder.append("<font color=\"blue\"><b>");
                    String _name_1 = aux.getName();
                    _builder.append(_name_1);
                    _builder.append("</b></font><font color=\"red\"><b>*</b></font>, ");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          EList<Attribute> _attributes = entity.getAttributes();
          boolean _hasElements_1 = false;
          for(final Attribute attribute : _attributes) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            {
              boolean _isIsKey = attribute.isIsKey();
              if (_isIsKey) {
                _builder.append("<font color=\"red\"><b>");
                String _name_2 = attribute.getName();
                _builder.append(_name_2);
                _builder.append("*</b></font>");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _isIsKey_1 = attribute.isIsKey();
                boolean _not_1 = (!_isIsKey_1);
                if (_not_1) {
                  String _name_3 = attribute.getName();
                  _builder.append(_name_3);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
      }
      if (_hasElements) {
        _builder.append(")</br>");
      }
    }
    _builder.newLine();
    {
      EList<Relation> _relations = modeloER.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            _builder.newLine();
            {
              boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(relation.getName());
              if (_isNullOrEmpty) {
                _builder.append("</br>");
                String _upperCase_2 = relation.getLeftEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_2);
                String _upperCase_3 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_3);
                _builder.append(" (");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(relation.getName());
                boolean _not_2 = (!_isNullOrEmpty_1);
                if (_not_2) {
                  _builder.append("</br>");
                  String _upperCase_4 = relation.getName().toUpperCase();
                  _builder.append(_upperCase_4);
                  _builder.append(" (");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.newLine();
            {
              EList<Entity> _entities_2 = modeloER.getEntities();
              for(final Entity entity_1 : _entities_2) {
                {
                  boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName());
                  if (_equalsIgnoreCase_1) {
                    {
                      EList<Attribute> _attributes_1 = entity_1.getAttributes();
                      for(final Attribute attribute_1 : _attributes_1) {
                        {
                          boolean _isIsKey_2 = attribute_1.isIsKey();
                          if (_isIsKey_2) {
                            _builder.append("<font color=\"blue\"><b>");
                            String _name_4 = attribute_1.getName();
                            _builder.append(_name_4);
                            _builder.append("</b></font><font color=\"red\"><b>*</b></font>,");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.newLine();
                {
                  boolean _equalsIgnoreCase_2 = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName());
                  if (_equalsIgnoreCase_2) {
                    {
                      EList<Attribute> _attributes_2 = entity_1.getAttributes();
                      for(final Attribute attribute_2 : _attributes_2) {
                        {
                          boolean _isIsKey_3 = attribute_2.isIsKey();
                          if (_isIsKey_3) {
                            _builder.append("<font color=\"blue\"><b>");
                            String _name_5 = attribute_2.getName();
                            _builder.append(_name_5);
                            _builder.append("</b></font><font color=\"red\"><b>*</b></font>");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.newLine();
            {
              EList<Attribute> _attributes_3 = relation.getAttributes();
              for(final Attribute attribute_3 : _attributes_3) {
                {
                  boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(attribute_3.getName());
                  boolean _not_3 = (!_isNullOrEmpty_2);
                  if (_not_3) {
                    _builder.append(", ");
                    String _name_6 = attribute_3.getName();
                    _builder.append(_name_6);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append(")</br>");
            _builder.newLine();
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<div>");
    _builder.newLine();
    _builder.append("<p class=\"sstitle\">References</p>");
    _builder.newLine();
    _builder.append("<p class=\"field\">");
    _builder.newLine();
    {
      EList<Relation> _relations_1 = modeloER.getRelations();
      boolean _hasElements_2 = false;
      for(final Relation relation_1 : _relations_1) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate("</br></br>", "");
        }
        String _name_7 = relation_1.getName();
        _builder.append(_name_7);
        _builder.append(" >>> ");
        String _string = relation_1.getLeftEnding().getCardinality().toString();
        _builder.append(_string);
        _builder.append(" ");
        EObject _target = relation_1.getLeftEnding().getTarget();
        _builder.append(_target);
        _builder.append(" relates ");
        String _string_1 = relation_1.getRightEnding().getTarget().toString();
        _builder.append(_string_1);
        _builder.append(" ");
        String _cardinality = relation_1.getRightEnding().getCardinality();
        _builder.append(_cardinality);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</p>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    fsa.generateFile(_plus_1, _builder);
  }
}
