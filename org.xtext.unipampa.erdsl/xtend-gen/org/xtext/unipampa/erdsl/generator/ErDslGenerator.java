/**
 * generated by Xtext 2.17.0
 */
package org.xtext.unipampa.erdsl.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.unipampa.erdsl.erDsl.Attribute;
import org.xtext.unipampa.erdsl.erDsl.DataType;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ErDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("DATABASE ");
    String _name = modeloER.getDomain().getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    {
      EList<Entity> _entities = modeloER.getEntities();
      boolean _hasElements = false;
      for(final Entity entity : _entities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.newLine();
        _builder.append("TABLE ");
        String _name_1 = entity.getName();
        _builder.append(_name_1);
        {
          EList<Entity> _isA = entity.getIsA();
          for(final Entity parent : _isA) {
            {
              EList<Entity> _isA_1 = entity.getIsA();
              boolean _tripleNotEquals = (_isA_1 != null);
              if (_tripleNotEquals) {
                _builder.append(" is a ");
              }
            }
            String _name_2 = parent.getName();
            _builder.append(_name_2);
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EList<Attribute> _attributes = entity.getAttributes();
          boolean _hasElements_1 = false;
          for(final Attribute attribute : _attributes) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(",", "\t");
            }
            _builder.append("\t");
            String _name_3 = attribute.getName();
            _builder.append(_name_3, "\t");
            _builder.append(" ");
            DataType _type = attribute.getType();
            _builder.append(_type, "\t");
            _builder.append(" ");
            {
              boolean _isIsKey = attribute.isIsKey();
              if (_isIsKey) {
                _builder.append("is a key");
              }
            }
            _builder.newLineIfNotEmpty();
          }
          if (_hasElements_1) {
            _builder.append(";", "\t");
          }
        }
      }
    }
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("#################");
    _builder.newLine();
    _builder.append("### Relations ###");
    _builder.newLine();
    _builder.append("#################");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Relation> _relations = modeloER.getRelations();
      for(final Relation relation : _relations) {
        _builder.append("\t");
        _builder.append("Relation name: ");
        String _name_4 = relation.getName();
        _builder.append(_name_4, "\t");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Esquerda: ");
        EObject _target = relation.getLeftEnding().getTarget();
        _builder.append(_target, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("Direita : ");
        EObject _target_1 = relation.getRightEnding().getTarget();
        _builder.append(_target_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    fsa.generateFile("LogicalSchema.txt", _builder);
  }
}
