package org.xtext.unipampa.erdsl.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.unipampa.erdsl.erDsl.Attribute;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

@SuppressWarnings("all")
public class MysqlFileGenerator extends AbstractGenerator {
  private final ArrayList<Object> myListFKs = new ArrayList<Object>();
  
  private int globalFKcounter_1to1 = 0;
  
  private int globalFKcounter_1toN = 0;
  
  private int counter = 0;
  
  private int AuxCounterA = 0;
  
  private int AuxCounterB = 0;
  
  private boolean auxT1 = false;
  
  private boolean auxT2 = false;
  
  private StringBuilder stringBuilderAlterTblNtoN = new StringBuilder();
  
  private StringBuilder stringBuilderAlterTblTernary = new StringBuilder();
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = input.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    String _name = modeloER.getDomain().getName();
    String _plus = ("MySQL_" + _name);
    String _plus_1 = (_plus + ".sql");
    fsa.generateFile(_plus_1, this.mySQLCreate(modeloER));
  }
  
  /**
   * PHYSICAL SCHEMA (MySQL) GENERATOR CODE
   */
  public CharSequence mySQLCreate(final ERModel e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* MySQL TEMPLATE GENERATED BY ERtext */");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("-- Database: ");
    String _upperCase = e.getDomain().getName().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("-- DROP DATABASE ");
    String _upperCase_1 = e.getDomain().getName().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("CREATE DATABASE IF NOT EXISTS ");
    String _upperCase_2 = e.getDomain().getName().toUpperCase();
    _builder.append(_upperCase_2);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    int ListExendPKsLenght = 0;
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/* --------------------------------- */");
    _builder.newLine();
    _builder.append("/*  1 to 1 and 1 to N RELATIONSHIPS  */");
    _builder.newLine();
    _builder.append("/* --------------------------------- */");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Entity> _entities = e.getEntities();
      boolean _hasElements = false;
      for(final Entity entity : _entities) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n);\n", "");
        }
        _builder.append("\t\t");
        final ArrayList<String> myListPKs = CollectionLiterals.<String>newArrayList();
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        final ArrayList<String> myListExtendPKs = CollectionLiterals.<String>newArrayList();
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        CharSequence _mySQLHaveFK = this.mySQLHaveFK(e, entity);
        _builder.append(_mySQLHaveFK, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("-- Table: ");
        String _upperCase_3 = entity.getName().toUpperCase();
        _builder.append(_upperCase_3);
        _builder.newLineIfNotEmpty();
        {
          boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(entity.getGeneralization());
          boolean _not = (!_isNullOrEmpty);
          if (_not) {
            _builder.append("-- Generalization/Specialization ");
            String _upperCase_4 = entity.getGeneralization().toString().toUpperCase();
            _builder.append(_upperCase_4);
            _builder.append(" from table ");
            String _upperCase_5 = entity.getIs().toString().toUpperCase();
            _builder.append(_upperCase_5);
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("-- DROP TABLE ");
        String _upperCase_6 = entity.getName().toUpperCase();
        _builder.append(_upperCase_6);
        _builder.append(";\t");
        _builder.newLineIfNotEmpty();
        _builder.append("CREATE TABLE IF NOT EXISTS ");
        String _lowerCase = entity.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          Entity _is = entity.getIs();
          boolean _tripleEquals = (_is == null);
          boolean _not_1 = (!_tripleEquals);
          if (_not_1) {
            {
              EList<Entity> _entities_1 = e.getEntities();
              for(final Entity aux : _entities_1) {
                {
                  boolean _equalsIgnoreCase = aux.getName().equalsIgnoreCase(entity.getIs().toString());
                  if (_equalsIgnoreCase) {
                    {
                      EList<Attribute> _attributes = aux.getAttributes();
                      for(final Attribute auxAttributes : _attributes) {
                        {
                          boolean _isIsKey = auxAttributes.isIsKey();
                          if (_isIsKey) {
                            CharSequence _mySQLAttTypeChecker = this.mySQLAttTypeChecker(auxAttributes);
                            _builder.append(_mySQLAttTypeChecker, "\t");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          EList<Attribute> _attributes_1 = entity.getAttributes();
          for(final Attribute attribute : _attributes_1) {
            CharSequence _mySQLAttTypeChecker_1 = this.mySQLAttTypeChecker(attribute);
            _builder.append(_mySQLAttTypeChecker_1, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          Entity _is_1 = entity.getIs();
          boolean _tripleEquals_1 = (_is_1 == null);
          boolean _not_2 = (!_tripleEquals_1);
          if (_not_2) {
            {
              EList<Entity> _entities_2 = e.getEntities();
              for(final Entity aux_1 : _entities_2) {
                {
                  boolean _equalsIgnoreCase_1 = aux_1.getName().equalsIgnoreCase(entity.getIs().toString());
                  if (_equalsIgnoreCase_1) {
                    {
                      EList<Attribute> _attributes_2 = aux_1.getAttributes();
                      for(final Attribute auxAttributes_1 : _attributes_2) {
                        {
                          boolean _isIsKey_1 = auxAttributes_1.isIsKey();
                          if (_isIsKey_1) {
                            String _xblockexpression = null;
                            {
                              myListPKs.add(auxAttributes_1.getName().toLowerCase());
                              _xblockexpression = "";
                            }
                            _builder.append(_xblockexpression);
                            String _xblockexpression_1 = null;
                            {
                              myListExtendPKs.add(auxAttributes_1.getName().toLowerCase());
                              _xblockexpression_1 = "";
                            }
                            _builder.append(_xblockexpression_1);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          EList<Attribute> _attributes_3 = entity.getAttributes();
          for(final Attribute attribute_1 : _attributes_3) {
            {
              boolean _isIsKey_2 = attribute_1.isIsKey();
              if (_isIsKey_2) {
                String _xblockexpression_2 = null;
                {
                  myListPKs.add(attribute_1.getName().toString());
                  _xblockexpression_2 = "";
                }
                _builder.append(_xblockexpression_2, "\t");
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _mySQLVerifyFKsAttributesRelation1to1 = this.mySQLVerifyFKsAttributesRelation1to1(e, entity.getName());
        _builder.append(_mySQLVerifyFKsAttributesRelation1to1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _mySQLVerifyFKsAttributesRelation1toN = this.mySQLVerifyFKsAttributesRelation1toN(e, entity.getName());
        _builder.append(_mySQLVerifyFKsAttributesRelation1toN, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("CONSTRAINT pk_");
        String _lowerCase_1 = entity.getName().toLowerCase();
        _builder.append(_lowerCase_1, "\t");
        _builder.append(" PRIMARY KEY (");
        {
          boolean _hasElements_1 = false;
          for(final String x : myListPKs) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _println = InputOutput.<String>println(x.toLowerCase());
            _builder.append(_println, "\t");
          }
          if (_hasElements_1) {
            _builder.append(")", "\t");
          }
        }
        _builder.newLineIfNotEmpty();
      }
      if (_hasElements) {
        _builder.append(");\n", "\t");
      }
    }
    _builder.newLine();
    _builder.append("/* ---------------------- */");
    _builder.newLine();
    _builder.append("/*  N to N RELATIONSHIPS  */");
    _builder.newLine();
    _builder.append("/* ---------------------- */ ");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        final ArrayList<String> myListPKsFKs = CollectionLiterals.<String>newArrayList();
        _builder.newLineIfNotEmpty();
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            _builder.append("\t\t");
            {
              boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(relation.getName());
              if (_isNullOrEmpty_1) {
                String _upperCase_7 = relation.getLeftEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_7, "\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.newLine();
                _builder.append("-- Table: ");
                String _upperCase_8 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_8);
                _builder.newLineIfNotEmpty();
                _builder.append("-- DROP TABLE ");
                String _upperCase_9 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_9);
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("CREATE TABLE IF NOT EXISTS ");
                String _upperCase_10 = relation.getRightEnding().getTarget().toString().toUpperCase();
                _builder.append(_upperCase_10);
                _builder.append(" (");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(relation.getName());
                boolean _not_3 = (!_isNullOrEmpty_2);
                if (_not_3) {
                  _builder.append("\t\t\t");
                  _builder.newLine();
                  _builder.append("-- Table: ");
                  String _upperCase_11 = relation.getName().toUpperCase();
                  _builder.append(_upperCase_11);
                  _builder.newLineIfNotEmpty();
                  _builder.append("-- DROP TABLE ");
                  String _upperCase_12 = relation.getName().toUpperCase();
                  _builder.append(_upperCase_12);
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                  _builder.append("CREATE TABLE IF NOT EXISTS ");
                  String _lowerCase_2 = relation.getName().toLowerCase();
                  _builder.append(_lowerCase_2);
                  _builder.append(" (");
                }
              }
            }
            _builder.newLineIfNotEmpty();
            {
              EList<Entity> _entities_3 = e.getEntities();
              for(final Entity entity_1 : _entities_3) {
                {
                  if ((relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && (relation.getLeftEnding().getTarget().toString() != relation.getRightEnding().getTarget().toString()))) {
                    String _xblockexpression_3 = null;
                    {
                      myListPKsFKs.add(relation.getLeftEnding().getTarget().toString());
                      _xblockexpression_3 = "";
                    }
                    _builder.append(_xblockexpression_3);
                    String _lowerCase_3 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_3);
                    CharSequence _mySQLAttTypeCheckerNtoNLeft = this.mySQLAttTypeCheckerNtoNLeft(e, relation);
                    _builder.append(_mySQLAttTypeCheckerNtoNLeft);
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                {
                  if ((relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && (relation.getRightEnding().getTarget().toString() != relation.getLeftEnding().getTarget().toString()))) {
                    String _xblockexpression_4 = null;
                    {
                      myListPKsFKs.add(relation.getRightEnding().getTarget().toString());
                      _xblockexpression_4 = "";
                    }
                    _builder.append(_xblockexpression_4, "\t");
                    String _lowerCase_4 = relation.getRightEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_4, "\t");
                    CharSequence _mySQLAttTypeCheckerNtoNRight = this.mySQLAttTypeCheckerNtoNRight(e, relation);
                    _builder.append(_mySQLAttTypeCheckerNtoNRight, "\t");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                {
                  if ((relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString()))) {
                    String _xblockexpression_5 = null;
                    {
                      myListPKsFKs.add(relation.getLeftEnding().getTarget().toString());
                      _xblockexpression_5 = "";
                    }
                    _builder.append(_xblockexpression_5, "\t");
                    String _lowerCase_5 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_5, "\t");
                    _builder.append("_");
                    String _lowerCase_6 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_6, "\t");
                    _builder.append("_1");
                    Object _xblockexpression_6 = null;
                    {
                      this.auxT1 = true;
                      _xblockexpression_6 = null;
                    }
                    _builder.append(_xblockexpression_6, "\t");
                    CharSequence _mySQLAttTypeCheckerNtoNLeft_1 = this.mySQLAttTypeCheckerNtoNLeft(e, relation);
                    _builder.append(_mySQLAttTypeCheckerNtoNLeft_1, "\t");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                {
                  if ((relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity_1.getName()) && relation.getRightEnding().getTarget().toString().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString()))) {
                    String _xblockexpression_7 = null;
                    {
                      myListPKsFKs.add(relation.getRightEnding().getTarget().toString());
                      _xblockexpression_7 = "";
                    }
                    _builder.append(_xblockexpression_7, "\t");
                    String _lowerCase_7 = relation.getRightEnding().getTarget().toString().toLowerCase();
                    _builder.append(_lowerCase_7, "\t");
                    _builder.append("_");
                    String _lowerCase_8 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_8, "\t");
                    _builder.append("_2");
                    Object _xblockexpression_8 = null;
                    {
                      this.auxT2 = true;
                      _xblockexpression_8 = null;
                    }
                    _builder.append(_xblockexpression_8, "\t");
                    CharSequence _mySQLAttTypeCheckerNtoNRight_1 = this.mySQLAttTypeCheckerNtoNRight(e, relation);
                    _builder.append(_mySQLAttTypeCheckerNtoNRight_1, "\t");
                  }
                }
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
              }
            }
            int iterCounter = 1;
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              boolean _isNullOrEmpty_3 = IterableExtensions.isNullOrEmpty(relation.getAttributes());
              boolean _not_4 = (!_isNullOrEmpty_3);
              if (_not_4) {
                {
                  EList<Attribute> _attributes_4 = relation.getAttributes();
                  for(final Attribute aux_2 : _attributes_4) {
                    CharSequence _mySQLAttTypeChecker_2 = this.mySQLAttTypeChecker(aux_2);
                    _builder.append(_mySQLAttTypeChecker_2, "\t");
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("CONSTRAINT pk_");
            String _lowerCase_9 = relation.getName().toLowerCase();
            _builder.append(_lowerCase_9, "\t");
            _builder.append(" PRIMARY KEY (");
            {
              EList<Attribute> _attributes_5 = relation.getAttributes();
              for(final Attribute aux_3 : _attributes_5) {
                {
                  boolean _isIsKey_3 = aux_3.isIsKey();
                  if (_isIsKey_3) {
                    String _lowerCase_10 = aux_3.getName().toString().toLowerCase();
                    _builder.append(_lowerCase_10, "\t");
                    _builder.append(", ");
                  }
                }
              }
            }
            {
              boolean _hasElements_2 = false;
              for(final String x_1 : myListPKsFKs) {
                if (!_hasElements_2) {
                  _hasElements_2 = true;
                } else {
                  _builder.appendImmediate(", ", "\t");
                }
                String _println_1 = InputOutput.<String>println(x_1.toLowerCase());
                _builder.append(_println_1, "\t");
                {
                  if ((this.auxT1 && this.auxT2)) {
                    _builder.append("_");
                    String _lowerCase_11 = relation.getName().toLowerCase();
                    _builder.append(_lowerCase_11, "\t");
                    _builder.append("_");
                    int _plusPlus = iterCounter++;
                    _builder.append(_plusPlus, "\t");
                  }
                }
              }
              if (_hasElements_2) {
                _builder.append(")", "\t");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            final int ListPKsFKsLenght = myListPKsFKs.size();
            Object _xblockexpression_9 = null;
            {
              iterCounter = 1;
              _xblockexpression_9 = null;
            }
            _builder.append(_xblockexpression_9, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            Object _xblockexpression_10 = null;
            {
              this.stringBuilderAlterTblNtoN.append(this.mySQLAlterTableFK_0N_0N(myListPKsFKs, ListPKsFKsLenght, this.auxT1, this.auxT2, relation, iterCounter, e));
              _xblockexpression_10 = null;
            }
            _builder.append(_xblockexpression_10, "\t");
            _builder.newLineIfNotEmpty();
            Object _xblockexpression_11 = null;
            {
              iterCounter = 1;
              _xblockexpression_11 = null;
            }
            _builder.append(_xblockexpression_11);
            Object _xblockexpression_12 = null;
            {
              this.auxT1 = false;
              _xblockexpression_12 = null;
            }
            _builder.append(_xblockexpression_12);
            Object _xblockexpression_13 = null;
            {
              this.auxT2 = false;
              _xblockexpression_13 = null;
            }
            _builder.append(_xblockexpression_13);
            _builder.newLineIfNotEmpty();
            _builder.append(");");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/* ----------------------- */");
    _builder.newLine();
    _builder.append("/*  TERNARY RELATIONSHIPS  */");
    _builder.newLine();
    _builder.append("/* ----------------------- */");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    String artificialEntName1 = null;
    String artificialEntKey1 = null;
    String artificialEntKeyAlt1 = null;
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String artificialEntName2 = null;
    String artificialEntKey2 = null;
    String artificialEntKeyAlt2 = null;
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String realEntName = null;
    String realEntKey = null;
    _builder.newLineIfNotEmpty();
    {
      EList<Relation> _relations_1 = e.getRelations();
      for(final Relation relation_1 : _relations_1) {
        {
          if (((relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_1.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation_1.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
            {
              EList<Relation> _relations_2 = e.getRelations();
              for(final Relation aux_4 : _relations_2) {
                {
                  if (((!StringExtensions.isNullOrEmpty(relation_1.getName())) && relation_1.getName().equals(aux_4.getLeftEnding().getTarget().toString()))) {
                    _builder.append("-- Table: ");
                    String _upperCase_13 = aux_4.getName().toUpperCase();
                    _builder.append(_upperCase_13);
                    _builder.newLineIfNotEmpty();
                    _builder.append("-- DROP TABLE ");
                    String _upperCase_14 = aux_4.getName().toUpperCase();
                    _builder.append(_upperCase_14);
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("CREATE TABLE IF NOT EXISTS ");
                    String _lowerCase_12 = aux_4.getName().toLowerCase();
                    _builder.append(_lowerCase_12);
                    _builder.append(" (\t");
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Entity> _entities_4 = e.getEntities();
                      for(final Entity entAux : _entities_4) {
                        {
                          boolean _equalsIgnoreCase_2 = entAux.getName().toString().equalsIgnoreCase(aux_4.getRightEnding().getTarget().toString());
                          if (_equalsIgnoreCase_2) {
                            {
                              EList<Attribute> _attributes_6 = entAux.getAttributes();
                              for(final Attribute attAux : _attributes_6) {
                                {
                                  boolean _isIsKey_4 = attAux.isIsKey();
                                  if (_isIsKey_4) {
                                    _builder.append("\t");
                                    CharSequence _mySQLAttTypeChecker_3 = this.mySQLAttTypeChecker(attAux);
                                    _builder.append(_mySQLAttTypeChecker_3, "\t");
                                    Object _xblockexpression_14 = null;
                                    {
                                      realEntName = entAux.getName().toString().toLowerCase();
                                      _xblockexpression_14 = null;
                                    }
                                    _builder.append(_xblockexpression_14, "\t");
                                    Object _xblockexpression_15 = null;
                                    {
                                      realEntKey = attAux.getName().toString().toLowerCase();
                                      _xblockexpression_15 = null;
                                    }
                                    _builder.append(_xblockexpression_15, "\t");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      EList<Relation> _relations_3 = e.getRelations();
                      for(final Relation relEntArtifial1 : _relations_3) {
                        {
                          boolean _equalsIgnoreCase_3 = relEntArtifial1.getName().equalsIgnoreCase(aux_4.getLeftEnding().getTarget().toString());
                          if (_equalsIgnoreCase_3) {
                            {
                              EList<Entity> _entities_5 = e.getEntities();
                              for(final Entity ent1 : _entities_5) {
                                {
                                  boolean _equalsIgnoreCase_4 = ent1.getName().equalsIgnoreCase(relEntArtifial1.getLeftEnding().getTarget().toString());
                                  if (_equalsIgnoreCase_4) {
                                    {
                                      EList<Attribute> _attributes_7 = ent1.getAttributes();
                                      for(final Attribute ent1Att : _attributes_7) {
                                        {
                                          boolean _isIsKey_5 = ent1Att.isIsKey();
                                          if (_isIsKey_5) {
                                            _builder.append("\t");
                                            CharSequence _mySQLAttTypeChecker_4 = this.mySQLAttTypeChecker(ent1Att);
                                            _builder.append(_mySQLAttTypeChecker_4, "\t");
                                            Object _xblockexpression_16 = null;
                                            {
                                              artificialEntName1 = aux_4.getLeftEnding().getTarget().toString().toLowerCase();
                                              _xblockexpression_16 = null;
                                            }
                                            _builder.append(_xblockexpression_16, "\t");
                                            Object _xblockexpression_17 = null;
                                            {
                                              artificialEntKey1 = ent1Att.getName().toString().toLowerCase();
                                              _xblockexpression_17 = null;
                                            }
                                            _builder.append(_xblockexpression_17, "\t");
                                            Object _xblockexpression_18 = null;
                                            {
                                              artificialEntKeyAlt1 = ent1.getName().toString().toLowerCase();
                                              _xblockexpression_18 = null;
                                            }
                                            _builder.append(_xblockexpression_18, "\t");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            {
                              EList<Entity> _entities_6 = e.getEntities();
                              for(final Entity ent2 : _entities_6) {
                                {
                                  boolean _equalsIgnoreCase_5 = ent2.getName().equalsIgnoreCase(relEntArtifial1.getRightEnding().getTarget().toString());
                                  if (_equalsIgnoreCase_5) {
                                    {
                                      EList<Attribute> _attributes_8 = ent2.getAttributes();
                                      for(final Attribute ent2Att : _attributes_8) {
                                        {
                                          boolean _isIsKey_6 = ent2Att.isIsKey();
                                          if (_isIsKey_6) {
                                            _builder.append("\t");
                                            CharSequence _mySQLAttTypeChecker_5 = this.mySQLAttTypeChecker(ent2Att);
                                            _builder.append(_mySQLAttTypeChecker_5, "\t");
                                            Object _xblockexpression_19 = null;
                                            {
                                              artificialEntName2 = aux_4.getLeftEnding().getTarget().toString().toLowerCase();
                                              _xblockexpression_19 = null;
                                            }
                                            _builder.append(_xblockexpression_19, "\t");
                                            Object _xblockexpression_20 = null;
                                            {
                                              artificialEntKey2 = ent2Att.getName().toString().toLowerCase();
                                              _xblockexpression_20 = null;
                                            }
                                            _builder.append(_xblockexpression_20, "\t");
                                            Object _xblockexpression_21 = null;
                                            {
                                              artificialEntKeyAlt2 = ent2.getName().toString().toLowerCase();
                                              _xblockexpression_21 = null;
                                            }
                                            _builder.append(_xblockexpression_21, "\t");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      EList<Entity> _entities_7 = e.getEntities();
                      for(final Entity aux2 : _entities_7) {
                        {
                          boolean _equalsIgnoreCase_6 = aux_4.getRightEnding().getTarget().toString().equalsIgnoreCase(aux2.getName());
                          if (_equalsIgnoreCase_6) {
                            _builder.append("\t");
                            {
                              EList<Attribute> _attributes_9 = aux_4.getAttributes();
                              for(final Attribute attribute_2 : _attributes_9) {
                                {
                                  if (((!StringExtensions.isNullOrEmpty(attribute_2.getName())) && attribute_2.isIsKey())) {
                                    CharSequence _mySQLAttTypeChecker_6 = this.mySQLAttTypeChecker(attribute_2);
                                    _builder.append(_mySQLAttTypeChecker_6, "\t");
                                  }
                                }
                              }
                            }
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            {
                              EList<Attribute> _attributes_10 = aux_4.getAttributes();
                              for(final Attribute attribute_3 : _attributes_10) {
                                {
                                  if (((!StringExtensions.isNullOrEmpty(attribute_3.getName())) && (!attribute_3.isIsKey()))) {
                                    CharSequence _mySQLAttTypeChecker_7 = this.mySQLAttTypeChecker(attribute_3);
                                    _builder.append(_mySQLAttTypeChecker_7, "\t");
                                  }
                                }
                              }
                            }
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                    _builder.append("\t");
                    _builder.append("CONSTRAINT pk_");
                    String _lowerCase_13 = aux_4.getName().toLowerCase();
                    _builder.append(_lowerCase_13, "\t");
                    _builder.append(" PRIMARY KEY (");
                    String _string = realEntKey.toString();
                    _builder.append(_string, "\t");
                    _builder.append(", ");
                    _builder.append(artificialEntKey1, "\t");
                    _builder.append(", ");
                    String _string_1 = artificialEntKey2.toString();
                    _builder.append(_string_1, "\t");
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("FOREIGN KEY (");
                    String _string_2 = realEntKey.toString();
                    _builder.append(_string_2, "\t");
                    _builder.append(") REFERENCES ");
                    String _string_3 = realEntName.toString();
                    _builder.append(_string_3, "\t");
                    _builder.append(" (");
                    String _string_4 = realEntKey.toString();
                    _builder.append(_string_4, "\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("FOREIGN KEY (");
                    String _string_5 = artificialEntKey1.toString();
                    _builder.append(_string_5, "\t");
                    _builder.append(", ");
                    String _string_6 = artificialEntKey2.toString();
                    _builder.append(_string_6, "\t");
                    _builder.append(") REFERENCES ");
                    _builder.append(artificialEntName1, "\t");
                    _builder.append(" (");
                    String _string_7 = artificialEntKeyAlt1.toString();
                    _builder.append(_string_7, "\t");
                    _builder.append(", ");
                    String _string_8 = artificialEntKeyAlt2.toString();
                    _builder.append(_string_8, "\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append(");");
                    _builder.newLine();
                  } else {
                    if (((!StringExtensions.isNullOrEmpty(relation_1.getName())) && relation_1.getName().equals(aux_4.getRightEnding().getTarget().toString()))) {
                      _builder.append("\t\t\t\t\t\t");
                      _builder.newLine();
                      _builder.append("-- Table: ");
                      String _upperCase_15 = aux_4.getName().toUpperCase();
                      _builder.append(_upperCase_15);
                      _builder.newLineIfNotEmpty();
                      _builder.append("-- DROP TABLE ");
                      String _upperCase_16 = aux_4.getName().toUpperCase();
                      _builder.append(_upperCase_16);
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("CREATE TABLE IF NOT EXISTS ");
                      String _lowerCase_14 = aux_4.getName().toLowerCase();
                      _builder.append(_lowerCase_14);
                      _builder.append(" (");
                      _builder.newLineIfNotEmpty();
                      {
                        EList<Entity> _entities_8 = e.getEntities();
                        for(final Entity entAux_1 : _entities_8) {
                          {
                            boolean _equalsIgnoreCase_7 = entAux_1.getName().toString().equalsIgnoreCase(aux_4.getLeftEnding().getTarget().toString());
                            if (_equalsIgnoreCase_7) {
                              {
                                EList<Attribute> _attributes_11 = entAux_1.getAttributes();
                                for(final Attribute attAux_1 : _attributes_11) {
                                  {
                                    boolean _isIsKey_7 = attAux_1.isIsKey();
                                    if (_isIsKey_7) {
                                      _builder.append("\t");
                                      CharSequence _mySQLAttTypeChecker_8 = this.mySQLAttTypeChecker(attAux_1);
                                      _builder.append(_mySQLAttTypeChecker_8, "\t");
                                      Object _xblockexpression_22 = null;
                                      {
                                        realEntName = entAux_1.getName().toString().toLowerCase();
                                        _xblockexpression_22 = null;
                                      }
                                      _builder.append(_xblockexpression_22, "\t");
                                      Object _xblockexpression_23 = null;
                                      {
                                        realEntKey = attAux_1.getName().toString().toLowerCase();
                                        _xblockexpression_23 = null;
                                      }
                                      _builder.append(_xblockexpression_23, "\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        EList<Relation> _relations_4 = e.getRelations();
                        for(final Relation relEntArtifial1_1 : _relations_4) {
                          {
                            boolean _equalsIgnoreCase_8 = relEntArtifial1_1.getName().equalsIgnoreCase(aux_4.getRightEnding().getTarget().toString());
                            if (_equalsIgnoreCase_8) {
                              {
                                EList<Entity> _entities_9 = e.getEntities();
                                for(final Entity ent1_1 : _entities_9) {
                                  {
                                    boolean _equalsIgnoreCase_9 = ent1_1.getName().equalsIgnoreCase(relEntArtifial1_1.getRightEnding().getTarget().toString());
                                    if (_equalsIgnoreCase_9) {
                                      {
                                        EList<Attribute> _attributes_12 = ent1_1.getAttributes();
                                        for(final Attribute ent1Att_1 : _attributes_12) {
                                          {
                                            boolean _isIsKey_8 = ent1Att_1.isIsKey();
                                            if (_isIsKey_8) {
                                              _builder.append("\t");
                                              CharSequence _mySQLAttTypeChecker_9 = this.mySQLAttTypeChecker(ent1Att_1);
                                              _builder.append(_mySQLAttTypeChecker_9, "\t");
                                              Object _xblockexpression_24 = null;
                                              {
                                                artificialEntName1 = aux_4.getRightEnding().getTarget().toString().toLowerCase();
                                                _xblockexpression_24 = null;
                                              }
                                              _builder.append(_xblockexpression_24, "\t");
                                              Object _xblockexpression_25 = null;
                                              {
                                                artificialEntKey1 = ent1Att_1.getName().toString().toLowerCase();
                                                _xblockexpression_25 = null;
                                              }
                                              _builder.append(_xblockexpression_25, "\t");
                                              Object _xblockexpression_26 = null;
                                              {
                                                artificialEntKeyAlt1 = ent1_1.getName().toString().toLowerCase();
                                                _xblockexpression_26 = null;
                                              }
                                              _builder.append(_xblockexpression_26, "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              {
                                EList<Entity> _entities_10 = e.getEntities();
                                for(final Entity ent2_1 : _entities_10) {
                                  {
                                    boolean _equalsIgnoreCase_10 = ent2_1.getName().equalsIgnoreCase(relEntArtifial1_1.getLeftEnding().getTarget().toString());
                                    if (_equalsIgnoreCase_10) {
                                      {
                                        EList<Attribute> _attributes_13 = ent2_1.getAttributes();
                                        for(final Attribute ent2Att_1 : _attributes_13) {
                                          {
                                            boolean _isIsKey_9 = ent2Att_1.isIsKey();
                                            if (_isIsKey_9) {
                                              _builder.append("\t");
                                              CharSequence _mySQLAttTypeChecker_10 = this.mySQLAttTypeChecker(ent2Att_1);
                                              _builder.append(_mySQLAttTypeChecker_10, "\t");
                                              Object _xblockexpression_27 = null;
                                              {
                                                artificialEntName2 = aux_4.getRightEnding().getTarget().toString().toLowerCase();
                                                _xblockexpression_27 = null;
                                              }
                                              _builder.append(_xblockexpression_27, "\t");
                                              Object _xblockexpression_28 = null;
                                              {
                                                artificialEntKey2 = ent2Att_1.getName().toString().toLowerCase();
                                                _xblockexpression_28 = null;
                                              }
                                              _builder.append(_xblockexpression_28, "\t");
                                              Object _xblockexpression_29 = null;
                                              {
                                                artificialEntKeyAlt2 = ent2_1.getName().toString().toLowerCase();
                                                _xblockexpression_29 = null;
                                              }
                                              _builder.append(_xblockexpression_29, "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        EList<Entity> _entities_11 = e.getEntities();
                        for(final Entity aux2_1 : _entities_11) {
                          {
                            boolean _equalsIgnoreCase_11 = aux_4.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux2_1.getName());
                            if (_equalsIgnoreCase_11) {
                              _builder.append("\t");
                              {
                                EList<Attribute> _attributes_14 = aux_4.getAttributes();
                                for(final Attribute attribute_4 : _attributes_14) {
                                  {
                                    if (((!StringExtensions.isNullOrEmpty(attribute_4.getName())) && attribute_4.isIsKey())) {
                                      CharSequence _mySQLAttTypeChecker_11 = this.mySQLAttTypeChecker(attribute_4);
                                      _builder.append(_mySQLAttTypeChecker_11, "\t");
                                    }
                                  }
                                }
                              }
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              {
                                EList<Attribute> _attributes_15 = aux_4.getAttributes();
                                for(final Attribute attribute_5 : _attributes_15) {
                                  {
                                    if (((!StringExtensions.isNullOrEmpty(attribute_5.getName())) && (!attribute_5.isIsKey()))) {
                                      CharSequence _mySQLAttTypeChecker_12 = this.mySQLAttTypeChecker(attribute_5);
                                      _builder.append(_mySQLAttTypeChecker_12, "\t");
                                    }
                                  }
                                }
                              }
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      _builder.append("\t");
                      _builder.append("CONSTRAINT pk_");
                      String _lowerCase_15 = aux_4.getName().toLowerCase();
                      _builder.append(_lowerCase_15, "\t");
                      _builder.append(" PRIMARY KEY (");
                      String _string_9 = realEntKey.toString();
                      _builder.append(_string_9, "\t");
                      _builder.append(", ");
                      _builder.append(artificialEntKey1, "\t");
                      _builder.append(", ");
                      String _string_10 = artificialEntKey2.toString();
                      _builder.append(_string_10, "\t");
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      Object _xblockexpression_30 = null;
                      {
                        String _lowerCase_16 = aux_4.getName().toLowerCase();
                        String _plus = ("ALTER TABLE public." + _lowerCase_16);
                        String _plus_1 = (_plus + " ADD CONSTRAINT fk_");
                        String _lowerCase_17 = aux_4.getName().toLowerCase();
                        String _plus_2 = (_plus_1 + _lowerCase_17);
                        String _plus_3 = (_plus_2 + "_");
                        String _string_11 = realEntName.toString();
                        String _plus_4 = (_plus_3 + _string_11);
                        String _plus_5 = (_plus_4 + " FOREIGN KEY (");
                        String _string_12 = realEntKey.toString();
                        String _plus_6 = (_plus_5 + _string_12);
                        String _plus_7 = (_plus_6 + ") REFERENCES public.");
                        String _string_13 = realEntName.toString();
                        String _plus_8 = (_plus_7 + _string_13);
                        String _plus_9 = (_plus_8 + " (");
                        String _string_14 = realEntKey.toString();
                        String _plus_10 = (_plus_9 + _string_14);
                        String _plus_11 = (_plus_10 + ");");
                        String _println_2 = InputOutput.<String>println("\n");
                        String _plus_12 = (_plus_11 + _println_2);
                        this.stringBuilderAlterTblTernary.append(_plus_12);
                        _xblockexpression_30 = null;
                      }
                      _builder.append(_xblockexpression_30, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      Object _xblockexpression_31 = null;
                      {
                        String _lowerCase_16 = aux_4.getName().toLowerCase();
                        String _plus = ("ALTER TABLE public." + _lowerCase_16);
                        String _plus_1 = (_plus + " ADD CONSTRAINT fk_");
                        String _lowerCase_17 = aux_4.getName().toLowerCase();
                        String _plus_2 = (_plus_1 + _lowerCase_17);
                        String _plus_3 = (_plus_2 + "_");
                        String _plus_4 = (_plus_3 + artificialEntName1);
                        String _plus_5 = (_plus_4 + " FOREIGN KEY (");
                        String _string_11 = artificialEntKey1.toString();
                        String _plus_6 = (_plus_5 + _string_11);
                        String _plus_7 = (_plus_6 + ", ");
                        String _string_12 = artificialEntKey2.toString();
                        String _plus_8 = (_plus_7 + _string_12);
                        String _plus_9 = (_plus_8 + ") REFERENCES public.");
                        String _plus_10 = (_plus_9 + artificialEntName1);
                        String _plus_11 = (_plus_10 + " (");
                        String _string_13 = artificialEntKeyAlt1.toString();
                        String _plus_12 = (_plus_11 + _string_13);
                        String _plus_13 = (_plus_12 + ", ");
                        String _string_14 = artificialEntKeyAlt2.toString();
                        String _plus_14 = (_plus_13 + _string_14);
                        String _plus_15 = (_plus_14 + ");");
                        this.stringBuilderAlterTblTernary.append(_plus_15);
                        _xblockexpression_31 = null;
                      }
                      _builder.append(_xblockexpression_31, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append(");");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/* ----------- */");
    _builder.newLine();
    _builder.append("/* ALTER TABLE */");
    _builder.newLine();
    _builder.append("/* ----------- */");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("-- BEGINNING OF ALTER TABLE (0,1 -> 1,N)");
    _builder.newLine();
    final ArrayList<Object> myListPKs_1 = CollectionLiterals.<Object>newArrayList();
    _builder.newLineIfNotEmpty();
    final ArrayList<Object> myListExtendPKs_1 = CollectionLiterals.<Object>newArrayList();
    _builder.newLineIfNotEmpty();
    CharSequence _mySQLAlterTableFK_01_0N = this.mySQLAlterTableFK_01_0N(e, myListExtendPKs_1, ListExendPKsLenght, myListPKs_1);
    _builder.append(_mySQLAlterTableFK_01_0N);
    _builder.newLineIfNotEmpty();
    _builder.append("-- END OF ALTER TABLE\t(0,1 -> 1,N)\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    {
      boolean _isNullOrEmpty_4 = StringExtensions.isNullOrEmpty(this.stringBuilderAlterTblNtoN.toString());
      boolean _not_5 = (!_isNullOrEmpty_4);
      if (_not_5) {
        _builder.append("-- BEGINNING OF ALTER TABLE (N -> N)");
        _builder.newLine();
        String _string_11 = this.stringBuilderAlterTblNtoN.toString();
        _builder.append(_string_11);
        _builder.newLineIfNotEmpty();
        _builder.append("-- END OF ALTER TABLE (N -> N)");
        _builder.newLine();
        this.stringBuilderAlterTblNtoN.setLength(0);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isNullOrEmpty_5 = StringExtensions.isNullOrEmpty(this.stringBuilderAlterTblTernary.toString());
      boolean _not_6 = (!_isNullOrEmpty_5);
      if (_not_6) {
        _builder.append("-- BEGINNING OF ALTER TABLE (TERNARY)");
        _builder.newLine();
        _builder.append("\t");
        String _string_12 = this.stringBuilderAlterTblTernary.toString();
        _builder.append(_string_12, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("-- END OF ALTER TABLE (TERNARY)");
        _builder.newLine();
        this.stringBuilderAlterTblTernary.setLength(0);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence mySQLAlterTableFK_01_0N(final ERModel e, final ArrayList myListExtendPKs, final int ListExendPKsLenght, final ArrayList myListPKs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity entity : _entities) {
        {
          Entity _is = entity.getIs();
          boolean _tripleEquals = (_is == null);
          boolean _not = (!_tripleEquals);
          if (_not) {
            {
              EList<Entity> _entities_1 = e.getEntities();
              for(final Entity aux : _entities_1) {
                {
                  boolean _equalsIgnoreCase = aux.getName().equalsIgnoreCase(entity.getIs().toString());
                  if (_equalsIgnoreCase) {
                    {
                      EList<Attribute> _attributes = aux.getAttributes();
                      for(final Attribute auxAttributes : _attributes) {
                        {
                          boolean _isIsKey = auxAttributes.isIsKey();
                          if (_isIsKey) {
                            String _xblockexpression = null;
                            {
                              myListPKs.add(auxAttributes.getName().toLowerCase());
                              _xblockexpression = "";
                            }
                            _builder.append(_xblockexpression);
                            String _xblockexpression_1 = null;
                            {
                              myListExtendPKs.add(auxAttributes.getName().toLowerCase());
                              _xblockexpression_1 = "";
                            }
                            _builder.append(_xblockexpression_1);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EList<Attribute> _attributes_1 = entity.getAttributes();
          for(final Attribute attribute : _attributes_1) {
            {
              boolean _isIsKey_1 = attribute.isIsKey();
              if (_isIsKey_1) {
                String _xblockexpression_2 = null;
                {
                  myListPKs.add(attribute.getName().toString());
                  _xblockexpression_2 = "";
                }
                _builder.append(_xblockexpression_2);
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
        {
          boolean _hasElements = false;
          for(final Object x : myListExtendPKs) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate("\n", "");
            }
            _builder.append("\tALTER TABLE public.");
            String _lowerCase = entity.getName().toString().toLowerCase();
            _builder.append(_lowerCase);
            _builder.append(" ADD CONSTRAINT fk_");
            String _firstUpper = StringExtensions.toFirstUpper(entity.getName().toString());
            _builder.append(_firstUpper);
            _builder.append("InheritedPK FOREIGN KEY (");
            String _println = InputOutput.<String>println(x.toString().toLowerCase());
            _builder.append(_println);
            _builder.append(") REFERENCES public.");
            CharSequence _mySQLDiscoverInheritedPKtoFK = this.mySQLDiscoverInheritedPKtoFK(e, x.toString(), ListExendPKsLenght, entity.getName());
            _builder.append(_mySQLDiscoverInheritedPKtoFK);
            _builder.append(";");
          }
        }
        myListPKs.clear();
        myListExtendPKs.clear();
        this.myListFKs.clear();
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Object _xblockexpression_3 = null;
        {
          this.mySQL_COUNT_FKsRelation1to1(e, entity.getName());
          _xblockexpression_3 = null;
        }
        _builder.append(_xblockexpression_3, "\t");
        Object _xblockexpression_4 = null;
        {
          this.counter = this.globalFKcounter_1to1;
          this.AuxCounterA = this.globalFKcounter_1to1;
          _xblockexpression_4 = null;
        }
        _builder.append(_xblockexpression_4, "\t");
        _builder.append(" ");
        Object _xblockexpression_5 = null;
        {
          this.globalFKcounter_1to1 = 0;
          _xblockexpression_5 = null;
        }
        _builder.append(_xblockexpression_5, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _mySQLDefineFKsRelation1to1 = this.mySQLDefineFKsRelation1to1(e, entity.getName(), this.counter);
        _builder.append(_mySQLDefineFKsRelation1to1, "\t");
        Object _xblockexpression_6 = null;
        {
          this.counter = 0;
          _xblockexpression_6 = null;
        }
        _builder.append(_xblockexpression_6, "\t");
        Object _xblockexpression_7 = null;
        {
          this.mySQL_COUNT_FKsRelation1toN(e, entity.getName());
          _xblockexpression_7 = null;
        }
        _builder.append(_xblockexpression_7, "\t");
        Object _xblockexpression_8 = null;
        {
          this.counter = this.globalFKcounter_1toN;
          this.AuxCounterB = this.globalFKcounter_1toN;
          _xblockexpression_8 = null;
        }
        _builder.append(_xblockexpression_8, "\t");
        Object _xblockexpression_9 = null;
        {
          this.globalFKcounter_1toN = 0;
          _xblockexpression_9 = null;
        }
        _builder.append(_xblockexpression_9, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _mySQLDefineFKsRelation1toN = this.mySQLDefineFKsRelation1toN(e, entity.getName(), this.counter);
        _builder.append(_mySQLDefineFKsRelation1toN, "\t");
        _builder.append(" ");
        Object _xblockexpression_10 = null;
        {
          this.counter = 0;
          _xblockexpression_10 = null;
        }
        _builder.append(_xblockexpression_10, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLAlterTableFK_0N_0N(final ArrayList myListPKsFKs, final int ListPKsFKsLenght, final boolean auxT1, final boolean auxT2, final Relation relation, final int iterCounter, final ERModel e) {
    StringConcatenation _builder = new StringConcatenation();
    int counterAux = iterCounter;
    _builder.newLineIfNotEmpty();
    {
      boolean _hasElements = false;
      for(final Object x : myListPKsFKs) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(");\n", "");
        }
        _builder.append("\tALTER TABLE public.");
        String _lowerCase = relation.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" ADD CONSTRAINT fk_");
        String _lowerCase_1 = relation.getName().toLowerCase();
        _builder.append(_lowerCase_1);
        _builder.append("_");
        String _println = InputOutput.<String>println(x.toString().toLowerCase());
        _builder.append(_println);
        {
          if ((auxT1 && auxT2)) {
            _builder.append("_");
            String _lowerCase_2 = relation.getName().toLowerCase();
            _builder.append(_lowerCase_2);
            _builder.append("_");
            _builder.append(counterAux);
          }
        }
        _builder.append(" FOREIGN KEY (");
        String _println_1 = InputOutput.<String>println(x.toString().toLowerCase());
        _builder.append(_println_1);
        {
          if ((auxT1 && auxT2)) {
            _builder.append("_");
            String _lowerCase_3 = relation.getName().toLowerCase();
            _builder.append(_lowerCase_3);
            _builder.append("_");
            int _plusPlus = counterAux++;
            _builder.append(_plusPlus);
          }
        }
        _builder.append(") REFERENCES public.");
        String _print = InputOutput.<String>print(x.toString().toLowerCase());
        _builder.append(_print);
        _builder.append(" (");
        CharSequence _mySQLDiscoverPKtoFK = this.mySQLDiscoverPKtoFK(e, x.toString(), ListPKsFKsLenght);
        _builder.append(_mySQLDiscoverPKtoFK);
        CharSequence _mySQLDiscoverAutoInheritedPKtoFK = this.mySQLDiscoverAutoInheritedPKtoFK(e, x.toString());
        _builder.append(_mySQLDiscoverAutoInheritedPKtoFK);
      }
      if (_hasElements) {
        _builder.append(");\n");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence mySQLAttTypeChecker(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    String _lowerCase = a.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" ");
    {
      boolean _equalsIgnoreCase = a.getType().toString().equalsIgnoreCase("string");
      if (_equalsIgnoreCase) {
        _builder.append(" VARCHAR (255) NOT NULL,");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
      } else {
        boolean _equalsIgnoreCase_1 = a.getType().toString().equalsIgnoreCase("int");
        if (_equalsIgnoreCase_1) {
          _builder.append(" INT NOT NULL,");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        } else {
          boolean _equalsIgnoreCase_2 = a.getType().toString().equalsIgnoreCase("datetime");
          if (_equalsIgnoreCase_2) {
            _builder.append(" DATE NOT NULL,");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
          } else {
            boolean _equalsIgnoreCase_3 = a.getType().toString().equalsIgnoreCase("money");
            if (_equalsIgnoreCase_3) {
              _builder.append(" NUMERIC NOT NULL,");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
            } else {
              boolean _equalsIgnoreCase_4 = a.getType().toString().equalsIgnoreCase("double");
              if (_equalsIgnoreCase_4) {
                _builder.append(" FLOAT NOT NULL,");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
              } else {
                boolean _equalsIgnoreCase_5 = a.getType().toString().equalsIgnoreCase("boolean");
                if (_equalsIgnoreCase_5) {
                  _builder.append(" BOOLEAN NOT NULL,");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                } else {
                  boolean _equalsIgnoreCase_6 = a.getType().toString().equalsIgnoreCase("file");
                  if (_equalsIgnoreCase_6) {
                    _builder.append(" BLOB,");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLAttTypeCheckerUnnamed(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = a.getType().toString().equalsIgnoreCase("string");
      if (_equalsIgnoreCase) {
        _builder.append(" VARCHAR (255) NOT NULL,");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equalsIgnoreCase_1 = a.getType().toString().equalsIgnoreCase("int");
        if (_equalsIgnoreCase_1) {
          _builder.append(" INT NOT NULL,");
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equalsIgnoreCase_2 = a.getType().toString().equalsIgnoreCase("datetime");
          if (_equalsIgnoreCase_2) {
            _builder.append(" DATE NOT NULL,");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equalsIgnoreCase_3 = a.getType().toString().equalsIgnoreCase("money");
            if (_equalsIgnoreCase_3) {
              _builder.append(" NUMERIC NOT NULL,");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equalsIgnoreCase_4 = a.getType().toString().equalsIgnoreCase("double");
              if (_equalsIgnoreCase_4) {
                _builder.append(" FLOAT NOT NULL,");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equalsIgnoreCase_5 = a.getType().toString().equalsIgnoreCase("boolean");
                if (_equalsIgnoreCase_5) {
                  _builder.append(" BOOLEAN NOT NULL,");
                  _builder.newLineIfNotEmpty();
                } else {
                  boolean _equalsIgnoreCase_6 = a.getType().toString().equalsIgnoreCase("file");
                  if (_equalsIgnoreCase_6) {
                    _builder.append(" BLOB,");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLAttTypeCheckerNtoNLeft(final ERModel e, final Relation r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          String _string = aux.getName().toString();
          String _string_1 = r.getLeftEnding().getTarget().toString();
          boolean _equals = Objects.equal(_string, _string_1);
          if (_equals) {
            {
              EList<Attribute> _attributes = aux.getAttributes();
              for(final Attribute aux2 : _attributes) {
                {
                  boolean _isIsKey = aux2.isIsKey();
                  if (_isIsKey) {
                    {
                      boolean _equalsIgnoreCase = aux2.getType().toString().equalsIgnoreCase("string");
                      if (_equalsIgnoreCase) {
                        _builder.append(" VARCHAR (255) NOT NULL,");
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equalsIgnoreCase_1 = aux2.getType().toString().equalsIgnoreCase("int");
                        if (_equalsIgnoreCase_1) {
                          _builder.append(" INT NOT NULL,");
                          _builder.newLineIfNotEmpty();
                        } else {
                          boolean _equalsIgnoreCase_2 = aux2.getType().toString().equalsIgnoreCase("datetime");
                          if (_equalsIgnoreCase_2) {
                            _builder.append(" DATE NOT NULL,");
                            _builder.newLineIfNotEmpty();
                          } else {
                            boolean _equalsIgnoreCase_3 = aux2.getType().toString().equalsIgnoreCase("money");
                            if (_equalsIgnoreCase_3) {
                              _builder.append(" NUMERIC NOT NULL,");
                              _builder.newLineIfNotEmpty();
                            } else {
                              boolean _equalsIgnoreCase_4 = aux2.getType().toString().equalsIgnoreCase("double");
                              if (_equalsIgnoreCase_4) {
                                _builder.append(" FLOAT NOT NULL,");
                                _builder.newLineIfNotEmpty();
                              } else {
                                boolean _equalsIgnoreCase_5 = aux2.getType().toString().equalsIgnoreCase("boolean");
                                if (_equalsIgnoreCase_5) {
                                  _builder.append(" BOOLEAN NOT NULL,");
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_6 = aux2.getType().toString().equalsIgnoreCase("file");
                                  if (_equalsIgnoreCase_6) {
                                    _builder.append(" BLOB,");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLAttTypeCheckerNtoNRight(final ERModel e, final Relation r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          String _string = aux.getName().toString();
          String _string_1 = r.getRightEnding().getTarget().toString();
          boolean _equals = Objects.equal(_string, _string_1);
          if (_equals) {
            {
              EList<Attribute> _attributes = aux.getAttributes();
              for(final Attribute aux2 : _attributes) {
                {
                  boolean _isIsKey = aux2.isIsKey();
                  if (_isIsKey) {
                    {
                      boolean _equalsIgnoreCase = aux2.getType().toString().equalsIgnoreCase("string");
                      if (_equalsIgnoreCase) {
                        _builder.append(" VARCHAR (255) NOT NULL,");
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equalsIgnoreCase_1 = aux2.getType().toString().equalsIgnoreCase("int");
                        if (_equalsIgnoreCase_1) {
                          _builder.append(" INT NOT NULL,");
                          _builder.newLineIfNotEmpty();
                        } else {
                          boolean _equalsIgnoreCase_2 = aux2.getType().toString().equalsIgnoreCase("datetime");
                          if (_equalsIgnoreCase_2) {
                            _builder.append(" DATE NOT NULL,");
                            _builder.newLineIfNotEmpty();
                          } else {
                            boolean _equalsIgnoreCase_3 = aux2.getType().toString().equalsIgnoreCase("money");
                            if (_equalsIgnoreCase_3) {
                              _builder.append(" NUMERIC NOT NULL,");
                              _builder.newLineIfNotEmpty();
                            } else {
                              boolean _equalsIgnoreCase_4 = aux2.getType().toString().equalsIgnoreCase("double");
                              if (_equalsIgnoreCase_4) {
                                _builder.append(" REAL NOT NULL,");
                                _builder.newLineIfNotEmpty();
                              } else {
                                boolean _equalsIgnoreCase_5 = aux2.getType().toString().equalsIgnoreCase("boolean");
                                if (_equalsIgnoreCase_5) {
                                  _builder.append(" BOOLEAN NOT NULL,");
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_6 = aux2.getType().toString().equalsIgnoreCase("file");
                                  if (_equalsIgnoreCase_6) {
                                    _builder.append(" BLOB,");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLDiscoverPKtoFK(final ERModel e, final String r, final int i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          String _string = aux.getName().toString();
          String _string_1 = r.toString();
          boolean _equals = Objects.equal(_string, _string_1);
          if (_equals) {
            {
              EList<Attribute> _attributes = aux.getAttributes();
              for(final Attribute aux2 : _attributes) {
                {
                  boolean _isIsKey = aux2.isIsKey();
                  if (_isIsKey) {
                    String _lowerCase = aux2.getName().toString().toLowerCase();
                    _builder.append(_lowerCase);
                  }
                }
                {
                  if (((i - 1) == 0)) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLDiscoverAutoInheritedPKtoFK(final ERModel e, final String r) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity auxE : _entities) {
        {
          boolean _equalsIgnoreCase = auxE.getName().equalsIgnoreCase(r.toString());
          if (_equalsIgnoreCase) {
            {
              EList<Entity> _entities_1 = e.getEntities();
              for(final Entity auxE2 : _entities_1) {
                {
                  if (((auxE.getIs() != null) && auxE2.getName().toString().equalsIgnoreCase(auxE.getIs().toString()))) {
                    {
                      EList<Attribute> _attributes = auxE2.getAttributes();
                      for(final Attribute auxAtt : _attributes) {
                        {
                          boolean _isIsKey = auxAtt.isIsKey();
                          if (_isIsKey) {
                            String _lowerCase = auxAtt.getName().toString().toLowerCase();
                            _builder.append(_lowerCase);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLDiscoverInheritedPKtoFK(final ERModel e, final String r, final int i, final String isAutoRel) {
    StringConcatenation _builder = new StringConcatenation();
    int auxi = i;
    {
      EList<Entity> _entities = e.getEntities();
      for(final Entity aux : _entities) {
        {
          EList<Attribute> _attributes = aux.getAttributes();
          for(final Attribute aux2 : _attributes) {
            {
              if ((aux2.getName().toString().equalsIgnoreCase(r.toString()) && aux2.isIsKey())) {
                String _lowerCase = aux.getName().toString().toLowerCase();
                _builder.append(_lowerCase);
                _builder.append(" (");
                String _lowerCase_1 = aux2.getName().toString().toLowerCase();
                _builder.append(_lowerCase_1);
                _builder.append(")");
                {
                  EList<Relation> _relations = e.getRelations();
                  for(final Relation rAux : _relations) {
                    {
                      if (((rAux.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || rAux.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (rAux.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || rAux.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)")))) {
                        {
                          if ((isAutoRel.equalsIgnoreCase(rAux.getLeftEnding().getTarget().toString()) && isAutoRel.equalsIgnoreCase(rAux.getRightEnding().getTarget().toString()))) {
                            Object _xblockexpression = null;
                            {
                              auxi = (auxi - 1);
                              _xblockexpression = null;
                            }
                            _builder.append(_xblockexpression);
                          }
                        }
                      }
                    }
                  }
                }
                {
                  if (((auxi - 1) == 0)) {
                    _builder.append(",");
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLVerifyFKsAttributesRelation1to1(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    CharSequence _mySQLAttTypeChecker = this.mySQLAttTypeChecker(aux2);
                                    _builder.append(_mySQLAttTypeChecker);
                                    _builder.append(" ");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                EList<Entity> _entities_1 = e.getEntities();
                                for(final Entity entityAux : _entities_1) {
                                  {
                                    boolean _equalsIgnoreCase_2 = entityAux.getName().equalsIgnoreCase(aux.getIs().toString());
                                    if (_equalsIgnoreCase_2) {
                                      {
                                        EList<Attribute> _attributes_1 = entityAux.getAttributes();
                                        for(final Attribute attAux : _attributes_1) {
                                          {
                                            boolean _isIsKey_1 = attAux.isIsKey();
                                            if (_isIsKey_1) {
                                              CharSequence _mySQLAttTypeChecker_1 = this.mySQLAttTypeChecker(attAux);
                                              _builder.append(_mySQLAttTypeChecker_1);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLVerifyFKsAttributesRelation1toN(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute attTest : _attributes) {
                                {
                                  boolean _isIsKey = attTest.isIsKey();
                                  if (_isIsKey) {
                                    CharSequence _mySQLAttTypeChecker = this.mySQLAttTypeChecker(attTest);
                                    _builder.append(_mySQLAttTypeChecker);
                                    _builder.append(" ");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                if (_equalsIgnoreCase_2) {
                                  String _lowerCase = relation.getName().toString().toLowerCase();
                                  _builder.append(_lowerCase);
                                  _builder.append(" ");
                                  {
                                    EList<Entity> _entities_1 = e.getEntities();
                                    for(final Entity aux2 : _entities_1) {
                                      {
                                        boolean _equalsIgnoreCase_3 = aux2.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                        if (_equalsIgnoreCase_3) {
                                          {
                                            EList<Entity> _entities_2 = e.getEntities();
                                            for(final Entity aux3 : _entities_2) {
                                              {
                                                boolean _equalsIgnoreCase_4 = aux3.getName().equalsIgnoreCase(aux2.getIs().toString());
                                                if (_equalsIgnoreCase_4) {
                                                  {
                                                    EList<Attribute> _attributes_1 = aux3.getAttributes();
                                                    for(final Attribute aux4 : _attributes_1) {
                                                      {
                                                        boolean _isIsKey_1 = aux4.isIsKey();
                                                        if (_isIsKey_1) {
                                                          CharSequence _mySQLAttTypeCheckerUnnamed = this.mySQLAttTypeCheckerUnnamed(aux4);
                                                          _builder.append(_mySQLAttTypeCheckerUnnamed);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_5 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  boolean _not_1 = (!_equalsIgnoreCase_5);
                                  if (_not_1) {
                                    String _lowerCase_1 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_1);
                                    _builder.append(" ");
                                    {
                                      EList<Entity> _entities_3 = e.getEntities();
                                      for(final Entity aux2_1 : _entities_3) {
                                        {
                                          boolean _equalsIgnoreCase_6 = aux2_1.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                          if (_equalsIgnoreCase_6) {
                                            {
                                              EList<Entity> _entities_4 = e.getEntities();
                                              for(final Entity aux3_1 : _entities_4) {
                                                {
                                                  boolean _equalsIgnoreCase_7 = aux3_1.getName().equalsIgnoreCase(aux2_1.getIs().toString());
                                                  if (_equalsIgnoreCase_7) {
                                                    {
                                                      EList<Attribute> _attributes_2 = aux3_1.getAttributes();
                                                      for(final Attribute aux4_1 : _attributes_2) {
                                                        {
                                                          boolean _isIsKey_2 = aux4_1.isIsKey();
                                                          if (_isIsKey_2) {
                                                            CharSequence _mySQLAttTypeCheckerUnnamed_1 = this.mySQLAttTypeCheckerUnnamed(aux4_1);
                                                            _builder.append(_mySQLAttTypeCheckerUnnamed_1);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQL_COUNT_FKsRelation1to1(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    Object _xblockexpression = null;
                                    {
                                      int _globalFKcounter_1to1 = this.globalFKcounter_1to1;
                                      this.globalFKcounter_1to1 = (_globalFKcounter_1to1 + 1);
                                      _xblockexpression = null;
                                    }
                                    _builder.append(_xblockexpression);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              Object _xblockexpression_1 = null;
                              {
                                int _globalFKcounter_1to1 = this.globalFKcounter_1to1;
                                this.globalFKcounter_1to1 = (_globalFKcounter_1to1 + 1);
                                _xblockexpression_1 = null;
                              }
                              _builder.append(_xblockexpression_1);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLDefineFKsRelation1to1(final ERModel e, final String ename, final int count) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    _builder.append("ALTER TABLE public.");
                                    String _lowerCase = relation.getRightEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase);
                                    _builder.append(" ADD CONSTRAINT fk_");
                                    String _firstUpper = StringExtensions.toFirstUpper(relation.getRightEnding().getTarget().toString());
                                    _builder.append(_firstUpper);
                                    _builder.append("_");
                                    String _firstUpper_1 = StringExtensions.toFirstUpper(relation.getLeftEnding().getTarget().toString());
                                    _builder.append(_firstUpper_1);
                                    _builder.append(" FOREIGN KEY (");
                                    String _lowerCase_1 = aux2.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_1);
                                    _builder.append(") REFERENCES public.");
                                    String _lowerCase_2 = aux.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_2);
                                    _builder.append(" (");
                                    String _lowerCase_3 = aux2.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_3);
                                    _builder.append(");");
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              _builder.append("ALTER TABLE public.");
                              String _lowerCase_4 = relation.getRightEnding().getTarget().toString().toLowerCase();
                              _builder.append(_lowerCase_4);
                              _builder.append(" ADD CONSTRAINT fk_");
                              String _firstUpper_2 = StringExtensions.toFirstUpper(relation.getRightEnding().getTarget().toString());
                              _builder.append(_firstUpper_2);
                              _builder.append("_");
                              String _firstUpper_3 = StringExtensions.toFirstUpper(relation.getLeftEnding().getTarget().toString());
                              _builder.append(_firstUpper_3);
                              _builder.append(" FOREIGN KEY (");
                              {
                                EList<Entity> _entities_1 = e.getEntities();
                                for(final Entity entityAux : _entities_1) {
                                  {
                                    boolean _equalsIgnoreCase_2 = entityAux.getName().equalsIgnoreCase(aux.getIs().toString());
                                    if (_equalsIgnoreCase_2) {
                                      {
                                        EList<Attribute> _attributes_1 = entityAux.getAttributes();
                                        for(final Attribute attAux : _attributes_1) {
                                          {
                                            boolean _isIsKey_1 = attAux.isIsKey();
                                            if (_isIsKey_1) {
                                              String _lowerCase_5 = attAux.getName().toString().toLowerCase();
                                              _builder.append(_lowerCase_5);
                                              _builder.append(") REFERENCES public.");
                                              String _lowerCase_6 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                              _builder.append(_lowerCase_6);
                                              _builder.append(" (");
                                              String _lowerCase_7 = attAux.getName().toString().toLowerCase();
                                              _builder.append(_lowerCase_7);
                                              _builder.append(");");
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQL_COUNT_FKsRelation1toN(final ERModel e, final String ename) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        _builder.newLineIfNotEmpty();
        {
          if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute attTest : _attributes) {
                                {
                                  boolean _isIsKey = attTest.isIsKey();
                                  if (_isIsKey) {
                                    Object _xblockexpression = null;
                                    {
                                      int _globalFKcounter_1toN = this.globalFKcounter_1toN;
                                      this.globalFKcounter_1toN = (_globalFKcounter_1toN + 1);
                                      _xblockexpression = null;
                                    }
                                    _builder.append(_xblockexpression);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                if (_equalsIgnoreCase_2) {
                                  Object _xblockexpression_1 = null;
                                  {
                                    int _globalFKcounter_1toN = this.globalFKcounter_1toN;
                                    this.globalFKcounter_1toN = (_globalFKcounter_1toN + 1);
                                    _xblockexpression_1 = null;
                                  }
                                  _builder.append(_xblockexpression_1);
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_3 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  boolean _not_1 = (!_equalsIgnoreCase_3);
                                  if (_not_1) {
                                    Object _xblockexpression_2 = null;
                                    {
                                      int _globalFKcounter_1toN = this.globalFKcounter_1toN;
                                      this.globalFKcounter_1toN = (_globalFKcounter_1toN + 1);
                                      _xblockexpression_2 = null;
                                    }
                                    _builder.append(_xblockexpression_2);
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLDefineFKsRelation1toN(final ERModel e, final String ename, final int count) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(ename);
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute attTest : _attributes) {
                                {
                                  boolean _isIsKey = attTest.isIsKey();
                                  if (_isIsKey) {
                                    _builder.append("ALTER TABLE public.");
                                    String _lowerCase = relation.getRightEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase);
                                    _builder.append(" ADD CONSTRAINT fk_");
                                    String _firstUpper = StringExtensions.toFirstUpper(relation.getRightEnding().getTarget().toString());
                                    _builder.append(_firstUpper);
                                    _builder.append("_");
                                    String _firstUpper_1 = StringExtensions.toFirstUpper(relation.getLeftEnding().getTarget().toString());
                                    _builder.append(_firstUpper_1);
                                    _builder.append(" FOREIGN KEY (");
                                    String _lowerCase_1 = attTest.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_1);
                                    _builder.append(") REFERENCES public.");
                                    String _lowerCase_2 = aux.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_2);
                                    _builder.append(" (");
                                    String _lowerCase_3 = attTest.getName().toString().toLowerCase();
                                    _builder.append(_lowerCase_3);
                                    _builder.append(");");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              {
                                boolean _equalsIgnoreCase_2 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                if (_equalsIgnoreCase_2) {
                                  _builder.append("ALTER TABLE public.");
                                  String _lowerCase_4 = relation.getRightEnding().getTarget().toString().toLowerCase();
                                  _builder.append(_lowerCase_4);
                                  _builder.append(" ADD CONSTRAINT fk_");
                                  String _firstUpper_2 = StringExtensions.toFirstUpper(relation.getRightEnding().getTarget().toString());
                                  _builder.append(_firstUpper_2);
                                  _builder.append("_");
                                  String _firstUpper_3 = StringExtensions.toFirstUpper(relation.getLeftEnding().getTarget().toString());
                                  _builder.append(_firstUpper_3);
                                  _builder.append(" FOREIGN KEY (");
                                  String _lowerCase_5 = relation.getName().toString().toLowerCase();
                                  _builder.append(_lowerCase_5);
                                  _builder.append(") REFERENCES public.");
                                  String _lowerCase_6 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                  _builder.append(_lowerCase_6);
                                  _builder.append(" (");
                                  {
                                    EList<Entity> _entities_1 = e.getEntities();
                                    for(final Entity aux2 : _entities_1) {
                                      {
                                        boolean _equalsIgnoreCase_3 = aux2.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                        if (_equalsIgnoreCase_3) {
                                          {
                                            EList<Entity> _entities_2 = e.getEntities();
                                            for(final Entity aux3 : _entities_2) {
                                              {
                                                boolean _equalsIgnoreCase_4 = aux3.getName().equalsIgnoreCase(aux2.getIs().toString());
                                                if (_equalsIgnoreCase_4) {
                                                  {
                                                    EList<Attribute> _attributes_1 = aux3.getAttributes();
                                                    for(final Attribute aux4 : _attributes_1) {
                                                      {
                                                        boolean _isIsKey_1 = aux4.isIsKey();
                                                        if (_isIsKey_1) {
                                                          String _lowerCase_7 = aux4.getName().toString().toLowerCase();
                                                          _builder.append(_lowerCase_7);
                                                          _builder.append(");");
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  boolean _equalsIgnoreCase_5 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  boolean _not_1 = (!_equalsIgnoreCase_5);
                                  if (_not_1) {
                                    _builder.append("ALTER TABLE public.");
                                    String _lowerCase_8 = relation.getRightEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_8);
                                    _builder.append(" ADD CONSTRAINT fk_");
                                    String _firstUpper_4 = StringExtensions.toFirstUpper(relation.getRightEnding().getTarget().toString());
                                    _builder.append(_firstUpper_4);
                                    _builder.append("_");
                                    String _firstUpper_5 = StringExtensions.toFirstUpper(relation.getLeftEnding().getTarget().toString());
                                    _builder.append(_firstUpper_5);
                                    _builder.append(" FOREIGN KEY (");
                                    String _lowerCase_9 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_9);
                                    _builder.append(") REFERENCES public.");
                                    String _lowerCase_10 = relation.getLeftEnding().getTarget().toString().toLowerCase();
                                    _builder.append(_lowerCase_10);
                                    _builder.append(" (");
                                    {
                                      EList<Entity> _entities_3 = e.getEntities();
                                      for(final Entity aux2_1 : _entities_3) {
                                        {
                                          boolean _equalsIgnoreCase_6 = aux2_1.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                          if (_equalsIgnoreCase_6) {
                                            {
                                              EList<Entity> _entities_4 = e.getEntities();
                                              for(final Entity aux3_1 : _entities_4) {
                                                {
                                                  boolean _equalsIgnoreCase_7 = aux3_1.getName().equalsIgnoreCase(aux2_1.getIs().toString());
                                                  if (_equalsIgnoreCase_7) {
                                                    {
                                                      EList<Attribute> _attributes_2 = aux3_1.getAttributes();
                                                      for(final Attribute aux4_1 : _attributes_2) {
                                                        {
                                                          boolean _isIsKey_2 = aux4_1.isIsKey();
                                                          if (_isIsKey_2) {
                                                            String _lowerCase_11 = aux4_1.getName().toString().toLowerCase();
                                                            _builder.append(_lowerCase_11);
                                                            _builder.append(");");
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence mySQLHaveFK(final ERModel e, final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Relation> _relations = e.getRelations();
      for(final Relation relation : _relations) {
        {
          if (((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)")))) {
            {
              boolean _equalsIgnoreCase = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity.getName().toString());
              if (_equalsIgnoreCase) {
                {
                  EList<Entity> _entities = e.getEntities();
                  for(final Entity aux : _entities) {
                    {
                      boolean _equalsIgnoreCase_1 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux.getName());
                      if (_equalsIgnoreCase_1) {
                        {
                          Entity _is = aux.getIs();
                          boolean _tripleEquals = (_is == null);
                          if (_tripleEquals) {
                            {
                              EList<Attribute> _attributes = aux.getAttributes();
                              for(final Attribute aux2 : _attributes) {
                                {
                                  boolean _isIsKey = aux2.isIsKey();
                                  if (_isIsKey) {
                                    String _xblockexpression = null;
                                    {
                                      this.myListFKs.add(aux2.getName());
                                      _xblockexpression = "";
                                    }
                                    _builder.append(_xblockexpression);
                                  }
                                }
                                _builder.newLineIfNotEmpty();
                              }
                            }
                            _builder.append("\t\t\t\t\t\t\t");
                          } else {
                            Entity _is_1 = aux.getIs();
                            boolean _tripleEquals_1 = (_is_1 == null);
                            boolean _not = (!_tripleEquals_1);
                            if (_not) {
                              String _xblockexpression_1 = null;
                              {
                                this.myListFKs.add(aux.getIs().toString());
                                _xblockexpression_1 = "";
                              }
                              _builder.append(_xblockexpression_1);
                            }
                          }
                        }
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          } else {
            if ((((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) || ((relation.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") || relation.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)")) && (relation.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)") || relation.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))))) {
              {
                boolean _equalsIgnoreCase_2 = relation.getRightEnding().getTarget().toString().equalsIgnoreCase(entity.getName().toString());
                if (_equalsIgnoreCase_2) {
                  {
                    EList<Entity> _entities_1 = e.getEntities();
                    for(final Entity aux_1 : _entities_1) {
                      {
                        boolean _equalsIgnoreCase_3 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(aux_1.getName());
                        if (_equalsIgnoreCase_3) {
                          {
                            Entity _is_2 = aux_1.getIs();
                            boolean _tripleEquals_2 = (_is_2 == null);
                            if (_tripleEquals_2) {
                              {
                                EList<Attribute> _attributes_1 = aux_1.getAttributes();
                                for(final Attribute attTest : _attributes_1) {
                                  {
                                    boolean _isIsKey_1 = attTest.isIsKey();
                                    if (_isIsKey_1) {
                                      String _xblockexpression_2 = null;
                                      {
                                        this.myListFKs.add(attTest.getName());
                                        _xblockexpression_2 = "";
                                      }
                                      _builder.append(_xblockexpression_2);
                                    }
                                  }
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            } else {
                              Entity _is_3 = aux_1.getIs();
                              boolean _tripleEquals_3 = (_is_3 == null);
                              boolean _not_1 = (!_tripleEquals_3);
                              if (_not_1) {
                                {
                                  boolean _equalsIgnoreCase_4 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                  if (_equalsIgnoreCase_4) {
                                    {
                                      EList<Entity> _entities_2 = e.getEntities();
                                      for(final Entity aux2_1 : _entities_2) {
                                        {
                                          boolean _equalsIgnoreCase_5 = aux2_1.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                          if (_equalsIgnoreCase_5) {
                                            {
                                              EList<Entity> _entities_3 = e.getEntities();
                                              for(final Entity aux3 : _entities_3) {
                                                {
                                                  boolean _equalsIgnoreCase_6 = aux3.getName().equalsIgnoreCase(aux2_1.getIs().toString());
                                                  if (_equalsIgnoreCase_6) {
                                                    {
                                                      EList<Attribute> _attributes_2 = aux3.getAttributes();
                                                      for(final Attribute aux4 : _attributes_2) {
                                                        {
                                                          boolean _isIsKey_2 = aux4.isIsKey();
                                                          if (_isIsKey_2) {
                                                            String _xblockexpression_3 = null;
                                                            {
                                                              this.myListFKs.add(aux3.getName());
                                                              _xblockexpression_3 = "";
                                                            }
                                                            _builder.append(_xblockexpression_3);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    _builder.newLineIfNotEmpty();
                                  } else {
                                    boolean _equalsIgnoreCase_7 = relation.getLeftEnding().getTarget().toString().equalsIgnoreCase(relation.getRightEnding().getTarget().toString());
                                    boolean _not_2 = (!_equalsIgnoreCase_7);
                                    if (_not_2) {
                                      {
                                        EList<Entity> _entities_4 = e.getEntities();
                                        for(final Entity aux2_2 : _entities_4) {
                                          {
                                            boolean _equalsIgnoreCase_8 = aux2_2.getName().equalsIgnoreCase(relation.getLeftEnding().getTarget().toString());
                                            if (_equalsIgnoreCase_8) {
                                              {
                                                EList<Entity> _entities_5 = e.getEntities();
                                                for(final Entity aux3_1 : _entities_5) {
                                                  {
                                                    boolean _equalsIgnoreCase_9 = aux3_1.getName().equalsIgnoreCase(aux2_2.getIs().toString());
                                                    if (_equalsIgnoreCase_9) {
                                                      {
                                                        EList<Attribute> _attributes_3 = aux3_1.getAttributes();
                                                        for(final Attribute aux4_1 : _attributes_3) {
                                                          {
                                                            boolean _isIsKey_3 = aux4_1.isIsKey();
                                                            if (_isIsKey_3) {
                                                              String _xblockexpression_4 = null;
                                                              {
                                                                this.myListFKs.add(aux4_1.getName());
                                                                _xblockexpression_4 = "";
                                                              }
                                                              _builder.append(_xblockexpression_4);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
}
