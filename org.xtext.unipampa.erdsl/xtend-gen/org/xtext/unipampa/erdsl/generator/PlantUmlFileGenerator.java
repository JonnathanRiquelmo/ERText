package org.xtext.unipampa.erdsl.generator;

import com.google.common.collect.Iterables;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;
import java.util.List;
import net.sourceforge.plantuml.SourceStringReader;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IFileSystemAccessExtension3;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.xtext.unipampa.erdsl.erDsl.Attribute;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Entity;
import org.xtext.unipampa.erdsl.erDsl.Relation;

@SuppressWarnings("all")
public class PlantUmlFileGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = input.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    try {
      Iterable<ERModel> _filter = Iterables.<ERModel>filter(input.getContents(), ERModel.class);
      for (final ERModel diagramModel : _filter) {
        {
          final String plantUML = this.plotToPlantUML(diagramModel).toString();
          if ((fsa instanceof IFileSystemAccessExtension3)) {
            final ByteArrayOutputStream out = new ByteArrayOutputStream();
            new SourceStringReader(plantUML).generateImage(out);
            String _lowerCase = modeloER.getDomain().getName().toLowerCase();
            String _plus = (_lowerCase + "_Diagram.png");
            byte[] _byteArray = out.toByteArray();
            ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_byteArray);
            ((IFileSystemAccessExtension3) fsa).generateFile(_plus, _byteArrayInputStream);
            String _lowerCase_1 = modeloER.getDomain().getName().toLowerCase();
            String _plus_1 = (_lowerCase_1 + "_DiagramDesc_Gen.puml");
            fsa.generateFile(_plus_1, plantUML);
          } else {
            String _lowerCase_2 = modeloER.getDomain().getName().toLowerCase();
            String _plus_2 = (_lowerCase_2 + "_DiagramDesc_PartialGen.puml");
            fsa.generateFile(_plus_2, plantUML);
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        InputOutput.<String>println(((List<StackTraceElement>)Conversions.doWrapArray(e.getStackTrace())).toString());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  private CharSequence _plotToPlantUML(final ERModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@startuml");
    _builder.newLine();
    _builder.append("\' - Esconde os (*letra*) dos objetos (E para entidade, C para classe, O para objetos, etc)");
    _builder.newLine();
    _builder.append("\' hide circle");
    _builder.newLine();
    _builder.append("\' - workaround para evitar problemas com os angulos do crows foot");
    _builder.newLine();
    _builder.append("\' skinparam linetype ortho");
    _builder.newLine();
    _builder.append("skinparam titleBorderRoundCorner 15");
    _builder.newLine();
    _builder.append("skinparam titleBorderThickness 1");
    _builder.newLine();
    _builder.append("\' skinparam titleBorderColor red");
    _builder.newLine();
    _builder.append("scale 1.0");
    _builder.newLine();
    _builder.append("\' skinparam monochrome true");
    _builder.newLine();
    _builder.append("header");
    _builder.newLine();
    _builder.append("<b>Diagram generated by ERtext</b>");
    _builder.newLine();
    _builder.append("endheader");
    _builder.newLine();
    _builder.append("right footer <b>https://github.com/ProjetoDSL/ERDSL</b>");
    _builder.newLine();
    _builder.append("title <b>");
    String _upperCase = it.getDomain().getName().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("</b>\\n(conceptual model)");
    _builder.newLineIfNotEmpty();
    {
      EList<Entity> _entities = it.getEntities();
      for(final Entity e : _entities) {
        CharSequence _plotToPlantUML = this.plotToPlantUML(e);
        _builder.append(_plotToPlantUML);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Relation> _relations = it.getRelations();
      for(final Relation r : _relations) {
        CharSequence _plotToPlantUML_1 = this.plotToPlantUML(r);
        _builder.append(_plotToPlantUML_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Entity> _entities_1 = it.getEntities();
      for(final Entity e_1 : _entities_1) {
        {
          Entity _is = e_1.getIs();
          boolean _tripleEquals = (_is == null);
          boolean _not = (!_tripleEquals);
          if (_not) {
            String _lowerCase = e_1.getName().toString().toLowerCase();
            _builder.append(_lowerCase);
            _builder.append(" --|> ");
            String _lowerCase_1 = e_1.getIs().getName().toString().toLowerCase();
            _builder.append(_lowerCase_1);
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("@enduml");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence _plotToPlantUML(final Entity it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("entity ");
    String _lowerCase = it.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = it.getAttributes();
      for(final Attribute att : _attributes) {
        {
          boolean _isIsKey = att.isIsKey();
          if (_isIsKey) {
            _builder.append("* ");
            String _lowerCase_1 = att.getName().toLowerCase();
            _builder.append(_lowerCase_1);
            _builder.append(" : ");
            String _lowerCase_2 = att.getType().toString().toLowerCase();
            _builder.append(_lowerCase_2);
            _builder.newLineIfNotEmpty();
            _builder.append("--");
            _builder.newLine();
          } else {
            String _lowerCase_3 = att.getName().toLowerCase();
            _builder.append(_lowerCase_3);
            _builder.append(" : ");
            String _lowerCase_4 = att.getType().toString().toLowerCase();
            _builder.append(_lowerCase_4);
          }
        }
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence _plotToPlantUML(final Relation it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((it.getLeftEnding().getTarget() instanceof Entity) && (it.getRightEnding().getTarget() instanceof Entity))) {
        _builder.append("diamond ");
        String _lowerCase = it.getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append("_dmd");
        _builder.newLineIfNotEmpty();
        String _lowerCase_1 = it.getLeftEnding().getTarget().toString().toLowerCase();
        _builder.append(_lowerCase_1);
        _builder.append(" ");
        CharSequence _defineLeftCardinalitySymbolUML = this.defineLeftCardinalitySymbolUML(it.getLeftEnding().getCardinality().toString());
        _builder.append(_defineLeftCardinalitySymbolUML);
        _builder.append("-- ");
        String _lowerCase_2 = it.getName().toLowerCase();
        _builder.append(_lowerCase_2);
        _builder.append("_dmd");
        _builder.newLineIfNotEmpty();
        String _lowerCase_3 = it.getName().toLowerCase();
        _builder.append(_lowerCase_3);
        _builder.append("_dmd --");
        CharSequence _defineRightCardinalitySymbolUML = this.defineRightCardinalitySymbolUML(it.getRightEnding().getCardinality().toString());
        _builder.append(_defineRightCardinalitySymbolUML);
        _builder.append(" ");
        String _lowerCase_4 = it.getRightEnding().getTarget().toString().toLowerCase();
        _builder.append(_lowerCase_4);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!(it.getLeftEnding().getTarget() instanceof Entity)) || (!(it.getRightEnding().getTarget() instanceof Entity)))) {
        {
          EObject _target = it.getLeftEnding().getTarget();
          if ((_target instanceof Relation)) {
            String _lowerCase_5 = it.getLeftEnding().getTarget().toString().toLowerCase();
            _builder.append(_lowerCase_5);
            _builder.append("_dmd --");
            CharSequence _defineRightCardinalitySymbolUML_1 = this.defineRightCardinalitySymbolUML(it.getRightEnding().getCardinality().toString());
            _builder.append(_defineRightCardinalitySymbolUML_1);
            _builder.append(" ");
            String _lowerCase_6 = it.getRightEnding().getTarget().toString().toLowerCase();
            _builder.append(_lowerCase_6);
            _builder.newLineIfNotEmpty();
            _builder.append("note \"Ternary\\n  Relationship\" as N_");
            String _lowerCase_7 = it.getLeftEnding().getTarget().toString().toLowerCase();
            _builder.append(_lowerCase_7);
            _builder.append("_dmd");
            _builder.newLineIfNotEmpty();
            _builder.append("N_");
            String _lowerCase_8 = it.getLeftEnding().getTarget().toString().toLowerCase();
            _builder.append(_lowerCase_8);
            _builder.append("_dmd .. ");
            String _lowerCase_9 = it.getLeftEnding().getTarget().toString().toLowerCase();
            _builder.append(_lowerCase_9);
            _builder.append("_dmd");
            _builder.newLineIfNotEmpty();
          } else {
            EObject _target_1 = it.getRightEnding().getTarget();
            if ((_target_1 instanceof Relation)) {
              String _lowerCase_10 = it.getLeftEnding().getTarget().toString().toLowerCase();
              _builder.append(_lowerCase_10);
              _builder.append(" ");
              CharSequence _defineLeftCardinalitySymbolUML_1 = this.defineLeftCardinalitySymbolUML(it.getLeftEnding().getCardinality().toString());
              _builder.append(_defineLeftCardinalitySymbolUML_1);
              _builder.append("-- ");
              String _lowerCase_11 = it.getRightEnding().getTarget().toString().toLowerCase();
              _builder.append(_lowerCase_11);
              _builder.append("_dmd");
              _builder.newLineIfNotEmpty();
              _builder.append("note \"Ternary\\n  Relationship\" as N_");
              String _lowerCase_12 = it.getRightEnding().getTarget().toString().toLowerCase();
              _builder.append(_lowerCase_12);
              _builder.append("_dmd");
              _builder.newLineIfNotEmpty();
              _builder.append("N_");
              String _lowerCase_13 = it.getRightEnding().getTarget().toString().toLowerCase();
              _builder.append(_lowerCase_13);
              _builder.append("_dmd .. ");
              String _lowerCase_14 = it.getRightEnding().getTarget().toString().toLowerCase();
              _builder.append(_lowerCase_14);
              _builder.append("_dmd");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence defineLeftCardinalitySymbolUML(final String cd) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = cd.equalsIgnoreCase("(0:1)");
      if (_equalsIgnoreCase) {
        _builder.append("\"(0:1)\" ");
      } else {
        boolean _equalsIgnoreCase_1 = cd.equalsIgnoreCase("(1:1)");
        if (_equalsIgnoreCase_1) {
          _builder.append("\"(1:1)\" ");
        } else {
          boolean _equalsIgnoreCase_2 = cd.equalsIgnoreCase("(0:N)");
          if (_equalsIgnoreCase_2) {
            _builder.append("\"(0:N)\" ");
          } else {
            boolean _equalsIgnoreCase_3 = cd.equalsIgnoreCase("(1:N)");
            if (_equalsIgnoreCase_3) {
              _builder.append("\"(1:N)\" ");
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence defineRightCardinalitySymbolUML(final String cd) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = cd.equalsIgnoreCase("(0:1)");
      if (_equalsIgnoreCase) {
        _builder.append(" \"(0:1)\"");
      } else {
        boolean _equalsIgnoreCase_1 = cd.equalsIgnoreCase("(1:1)");
        if (_equalsIgnoreCase_1) {
          _builder.append(" \"(1:1)\" ");
        } else {
          boolean _equalsIgnoreCase_2 = cd.equalsIgnoreCase("(0:N)");
          if (_equalsIgnoreCase_2) {
            _builder.append(" \"(0:N)\" ");
          } else {
            boolean _equalsIgnoreCase_3 = cd.equalsIgnoreCase("(1:N)");
            if (_equalsIgnoreCase_3) {
              _builder.append(" \"(1:N)\" ");
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence plotToPlantUML(final EObject it) {
    if (it instanceof ERModel) {
      return _plotToPlantUML((ERModel)it);
    } else if (it instanceof Entity) {
      return _plotToPlantUML((Entity)it);
    } else if (it instanceof Relation) {
      return _plotToPlantUML((Relation)it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
}
