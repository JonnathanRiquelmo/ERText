package org.xtext.unipampa.erdsl.generator;

import com.google.common.collect.Iterables;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.List;
import net.sourceforge.plantuml.SourceStringReader;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IFileSystemAccessExtension3;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.unipampa.erdsl.erDsl.ERModel;
import org.xtext.unipampa.erdsl.erDsl.Relation;

@SuppressWarnings("all")
public class OccurrenceDiagramGenerator extends AbstractGenerator {
  private String currentRelationshipName = null;
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = input.getContents().get(0);
    final ERModel modeloER = ((ERModel) _get);
    final Function1<Relation, Boolean> _function = (Relation i) -> {
      String _occurrence = i.getOccurrence();
      return Boolean.valueOf((_occurrence != null));
    };
    Iterable<Relation> _filter = IterableExtensions.<Relation>filter(modeloER.getRelations(), _function);
    for (final Relation r : _filter) {
      {
        try {
          this.currentRelationshipName = r.getName().toString();
          Iterable<ERModel> _filter_1 = Iterables.<ERModel>filter(input.getContents(), ERModel.class);
          for (final ERModel diagramModel : _filter_1) {
            {
              final String plantUML = this.plotToPlantUML(diagramModel).toString();
              if ((fsa instanceof IFileSystemAccessExtension3)) {
                final ByteArrayOutputStream out = new ByteArrayOutputStream();
                new SourceStringReader(plantUML).generateImage(out);
                String _lowerCase = r.getName().toLowerCase();
                String _plus = (_lowerCase + "_OccurrenceDiagram.png");
                byte[] _byteArray = out.toByteArray();
                ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_byteArray);
                ((IFileSystemAccessExtension3) fsa).generateFile(_plus, _byteArrayInputStream);
                String _lowerCase_1 = r.getName().toLowerCase();
                String _plus_1 = (_lowerCase_1 + "_OccurrenceDiagramDesc_Gen.puml");
                fsa.generateFile(_plus_1, plantUML);
              } else {
                String _lowerCase_2 = r.getName().toLowerCase();
                String _plus_2 = (_lowerCase_2 + "_OccurrenceDiagramDesc_PartialGen.puml");
                fsa.generateFile(_plus_2, plantUML);
              }
            }
          }
        } catch (final Throwable _t) {
          if (_t instanceof Exception) {
            final Exception e = (Exception)_t;
            InputOutput.<String>println(((List<StackTraceElement>)Conversions.doWrapArray(e.getStackTrace())).toString());
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
        this.currentRelationshipName = null;
      }
    }
  }
  
  private CharSequence plotToPlantUML(final ERModel it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@startuml");
    _builder.newLine();
    _builder.append("\' - Esconde os (*letra*) dos objetos (E para entidade, C para classe, O para objetos, etc)");
    _builder.newLine();
    _builder.append("\' hide circle");
    _builder.newLine();
    _builder.append("\' - workaround para evitar problemas com os angulos do crows foot");
    _builder.newLine();
    _builder.append("\' skinparam linetype ortho");
    _builder.newLine();
    _builder.append("skinparam titleBorderRoundCorner 15");
    _builder.newLine();
    _builder.append("skinparam titleBorderThickness 1");
    _builder.newLine();
    _builder.append("\' skinparam titleBorderColor red");
    _builder.newLine();
    _builder.append("\' skinparam titleBackgroundColor CadetBlue");
    _builder.newLine();
    _builder.append("scale 1.5");
    _builder.newLine();
    _builder.append("\' skinparam monochrome true");
    _builder.newLine();
    _builder.append("header");
    _builder.newLine();
    _builder.append("<b>Diagram generated by ERtext</b>");
    _builder.newLine();
    _builder.append("endheader");
    _builder.newLine();
    _builder.append("right footer <b>https://github.com/ProjetoDSL/ERDSL</b>");
    _builder.newLine();
    _builder.append("title <b>Occurrence Diagram</b>\\n");
    _builder.append(this.currentRelationshipName);
    _builder.newLineIfNotEmpty();
    {
      final Function1<Relation, Boolean> _function = (Relation i) -> {
        String _occurrence = i.getOccurrence();
        return Boolean.valueOf((_occurrence != null));
      };
      Iterable<Relation> _filter = IterableExtensions.<Relation>filter(it.getRelations(), _function);
      for(final Relation e : _filter) {
        {
          boolean _equalsIgnoreCase = e.getName().equalsIgnoreCase(this.currentRelationshipName);
          if (_equalsIgnoreCase) {
            CharSequence _plotToPlantUML = this.plotToPlantUML(e);
            _builder.append(_plotToPlantUML);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("@enduml");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence plotToPlantUML(final Relation r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\' top to bottom direction");
    _builder.newLine();
    _builder.append("left to right direction");
    _builder.newLine();
    {
      if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
        CharSequence _initDefaultObjects = this.initDefaultObjects(r);
        _builder.append(_initDefaultObjects);
        _builder.newLineIfNotEmpty();
        _builder.append("package relationship {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("object x1_y1");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("object x2_y3");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("x1 ---- x1_y1");
        _builder.newLine();
        _builder.append("x1_y1 ---- y1");
        _builder.newLine();
        _builder.append("x2 ---- x2_y3");
        _builder.newLine();
        _builder.append("x2_y3 ---- y3");
        _builder.newLine();
      } else {
        if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
          _builder.append("package ");
          String _string = r.getLeftEnding().getTarget().toString();
          _builder.append(_string);
          String _cardinality = r.getLeftEnding().getCardinality();
          _builder.append(_cardinality);
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("object x1");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("object x2");
          _builder.newLine();
          _builder.append("}\t");
          _builder.newLine();
          _builder.newLine();
          _builder.append("package ");
          String _string_1 = r.getRightEnding().getTarget().toString();
          _builder.append(_string_1);
          String _cardinality_1 = r.getRightEnding().getCardinality();
          _builder.append(_cardinality_1);
          _builder.append("{");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("object y1");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("object y2");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("object y3");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("package relationship {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("object x1_y1");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("object x2_y3");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.newLine();
          _builder.append("x1 ---- x1_y1");
          _builder.newLine();
          _builder.append("x1_y1 ---- y1");
          _builder.newLine();
          _builder.append("x2 ---- x2_y3");
          _builder.newLine();
          _builder.append("x2_y3 ---- y3");
          _builder.newLine();
        } else {
          if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
            _builder.append("package ");
            String _string_2 = r.getLeftEnding().getTarget().toString();
            _builder.append(_string_2);
            String _cardinality_2 = r.getLeftEnding().getCardinality();
            _builder.append(_cardinality_2);
            _builder.append("{");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("object x1");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("object x2");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("object x3");
            _builder.newLine();
            _builder.append("}\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("package ");
            String _string_3 = r.getRightEnding().getTarget().toString();
            _builder.append(_string_3);
            String _cardinality_3 = r.getRightEnding().getCardinality();
            _builder.append(_cardinality_3);
            _builder.append(" {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("object y1");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("object y2");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("package relationship {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("object x1_y1");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("object x3_y2");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("x1 ---- x1_y1");
            _builder.newLine();
            _builder.append("x1_y1 ---- y1");
            _builder.newLine();
            _builder.append("x3 ---- x3_y2");
            _builder.newLine();
            _builder.append("x3_y2 ---- y2");
            _builder.newLine();
          } else {
            if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
              CharSequence _initDefaultObjects_1 = this.initDefaultObjects(r);
              _builder.append(_initDefaultObjects_1);
              _builder.newLineIfNotEmpty();
              _builder.append("package relationship {");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("object x1_y1");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("object x2_y2");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("object x3_y3");
              _builder.newLine();
              _builder.append("}");
              _builder.newLine();
              _builder.newLine();
              _builder.append("x1 ---- x1_y1");
              _builder.newLine();
              _builder.append("x1_y1 ---- y1");
              _builder.newLine();
              _builder.append("x2 ---- x2_y2");
              _builder.newLine();
              _builder.append("x2_y2 ---- y2");
              _builder.newLine();
              _builder.append("x3 ---- x3_y3 ");
              _builder.newLine();
              _builder.append("x3_y3 ---- y3");
              _builder.newLine();
            } else {
              if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
                _builder.append("package ");
                String _string_4 = r.getLeftEnding().getTarget().toString();
                _builder.append(_string_4);
                String _cardinality_4 = r.getLeftEnding().getCardinality();
                _builder.append(_cardinality_4);
                _builder.append("{");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("object x1");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x2");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x3");
                _builder.newLine();
                _builder.append("}\t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.newLine();
                _builder.append("package ");
                String _string_5 = r.getRightEnding().getTarget().toString();
                _builder.append(_string_5);
                String _cardinality_5 = r.getRightEnding().getCardinality();
                _builder.append(_cardinality_5);
                _builder.append("{");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("object y1");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object y2");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object y3");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object y4");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object y5");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object y6");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
                _builder.newLine();
                _builder.append("package relationship {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x1_y1");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x1_y2");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x2_y3");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x2_y4");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object x3_y5");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
                _builder.newLine();
                _builder.append("x1 ---- x1_y1");
                _builder.newLine();
                _builder.append("x1_y1 ---- y1");
                _builder.newLine();
                _builder.append("x1 ---- x1_y2");
                _builder.newLine();
                _builder.append("x1_y2 ---- y2");
                _builder.newLine();
                _builder.append("x2 ---- x2_y3");
                _builder.newLine();
                _builder.append("x2_y3 ---- y3");
                _builder.newLine();
                _builder.append("x2 ---- x2_y4");
                _builder.newLine();
                _builder.append("x2_y4 ---- y4");
                _builder.newLine();
                _builder.append("x3 ---- x3_y5");
                _builder.newLine();
                _builder.append("x3_y5 ---- y5");
                _builder.newLine();
              } else {
                if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
                  _builder.append("package ");
                  String _string_6 = r.getLeftEnding().getTarget().toString();
                  _builder.append(_string_6);
                  String _cardinality_6 = r.getLeftEnding().getCardinality();
                  _builder.append(_cardinality_6);
                  _builder.append("{");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("object x1");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x2");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x3");
                  _builder.newLine();
                  _builder.append("}\t");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("package ");
                  String _string_7 = r.getRightEnding().getTarget().toString();
                  _builder.append(_string_7);
                  String _cardinality_7 = r.getRightEnding().getCardinality();
                  _builder.append(_cardinality_7);
                  _builder.append("{");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("object y1");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object y2");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object y3");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object y4");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object y5");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object y6");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("package relationship {");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x1_y1");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x1_y2");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x1_y3");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x2_y4");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x2_y5");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("object x3_y6");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                  _builder.newLine();
                  _builder.append("x1 ---- x1_y1");
                  _builder.newLine();
                  _builder.append("x1_y1 ---- y1");
                  _builder.newLine();
                  _builder.append("x1 ---- x1_y2");
                  _builder.newLine();
                  _builder.append("x1_y2 ---- y2");
                  _builder.newLine();
                  _builder.append("x1 ---- x1_y3");
                  _builder.newLine();
                  _builder.append("x1_y3 ---- y3");
                  _builder.newLine();
                  _builder.append("x2 ---- x2_y4");
                  _builder.newLine();
                  _builder.append("x2_y4 ---- y4");
                  _builder.newLine();
                  _builder.append("x2 ---- x2_y5");
                  _builder.newLine();
                  _builder.append("x2_y5 ---- y5");
                  _builder.newLine();
                  _builder.append("x3 ---- x3_y6");
                  _builder.newLine();
                  _builder.append("x3_y6 ---- y6");
                  _builder.newLine();
                } else {
                  if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
                    _builder.append("package ");
                    String _string_8 = r.getLeftEnding().getTarget().toString();
                    _builder.append(_string_8);
                    String _cardinality_8 = r.getLeftEnding().getCardinality();
                    _builder.append(_cardinality_8);
                    _builder.append("{");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("object x1");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x2");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x3");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x4");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x5");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x6");
                    _builder.newLine();
                    _builder.append("}\t");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.newLine();
                    _builder.append("package ");
                    String _string_9 = r.getRightEnding().getTarget().toString();
                    _builder.append(_string_9);
                    String _cardinality_9 = r.getRightEnding().getCardinality();
                    _builder.append(_cardinality_9);
                    _builder.append("{");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("object y1");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object y2");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object y3");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                    _builder.newLine();
                    _builder.append("package relationship {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x1_y1");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x2_y1");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x3_y2");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x4_y2");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("object x5_y3");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                    _builder.newLine();
                    _builder.append("x1 ---- x1_y1");
                    _builder.newLine();
                    _builder.append("x1_y1 ---- y1");
                    _builder.newLine();
                    _builder.append("x2 ---- x2_y1");
                    _builder.newLine();
                    _builder.append("x2_y1 ---- y1");
                    _builder.newLine();
                    _builder.append("x3 ---- x3_y2");
                    _builder.newLine();
                    _builder.append("x3_y2 ---- y2");
                    _builder.newLine();
                    _builder.append("x4 ---- x4_y2 ");
                    _builder.newLine();
                    _builder.append("x4_y2 ---- y2");
                    _builder.newLine();
                    _builder.append("x5 ---- x5_y3");
                    _builder.newLine();
                    _builder.append("x5_y3 ---- y3");
                    _builder.newLine();
                  } else {
                    if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
                      _builder.append("package ");
                      String _string_10 = r.getLeftEnding().getTarget().toString();
                      _builder.append(_string_10);
                      String _cardinality_10 = r.getLeftEnding().getCardinality();
                      _builder.append(_cardinality_10);
                      _builder.append("{");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("object x1");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x2");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x3");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x4");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x5");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x6");
                      _builder.newLine();
                      _builder.append("}\t");
                      _builder.newLine();
                      _builder.newLine();
                      _builder.append("package ");
                      String _string_11 = r.getRightEnding().getTarget().toString();
                      _builder.append(_string_11);
                      String _cardinality_11 = r.getRightEnding().getCardinality();
                      _builder.append(_cardinality_11);
                      _builder.append("{");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("object y1");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object y2");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object y3");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.newLine();
                      _builder.append("package relationship {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x1_y1");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x2_y1");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x3_y1");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x4_y2");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x5_y2");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("object x6_y3");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.newLine();
                      _builder.append("x1 ---- x1_y1");
                      _builder.newLine();
                      _builder.append("x1_y1 ---- y1");
                      _builder.newLine();
                      _builder.append("x2 ---- x2_y1");
                      _builder.newLine();
                      _builder.append("x2_y1 ---- y1");
                      _builder.newLine();
                      _builder.append("x3 ---- x3_y1");
                      _builder.newLine();
                      _builder.append("x3_y1 - y1");
                      _builder.newLine();
                      _builder.append("x4 ---- x4_y2");
                      _builder.newLine();
                      _builder.append("x4_y2 ---- y2");
                      _builder.newLine();
                      _builder.append("x5 ---- x5_y2");
                      _builder.newLine();
                      _builder.append("x5_y2 ---- y2");
                      _builder.newLine();
                      _builder.append("x6 ---- x6_y3");
                      _builder.newLine();
                      _builder.append("x6_y3 ----  y3");
                      _builder.newLine();
                    } else {
                      if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:1)"))) {
                        _builder.append("package ");
                        String _string_12 = r.getLeftEnding().getTarget().toString();
                        _builder.append(_string_12);
                        String _cardinality_12 = r.getLeftEnding().getCardinality();
                        _builder.append(_cardinality_12);
                        _builder.append(" {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("object x1");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x2");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x3");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x4");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x5");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x6");
                        _builder.newLine();
                        _builder.append("}\t");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.newLine();
                        _builder.append("package ");
                        String _cardinality_13 = r.getRightEnding().getCardinality();
                        _builder.append(_cardinality_13);
                        String _string_13 = r.getRightEnding().getTarget().toString();
                        _builder.append(_string_13);
                        _builder.append(" {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("object y1");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object y2");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object y3");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object y4");
                        _builder.newLine();
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("package relationship {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x1_y1");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x2_y1");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x3_y2");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x4_y2");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("object x5_y3");
                        _builder.newLine();
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("x1 ---- x1_y1");
                        _builder.newLine();
                        _builder.append("x1_y1 ---- y1");
                        _builder.newLine();
                        _builder.append("x2 ---- x2_y1");
                        _builder.newLine();
                        _builder.append("x2_y1 ---- y1");
                        _builder.newLine();
                        _builder.append("x3 ---- x3_y2");
                        _builder.newLine();
                        _builder.append("x3_y2 ---- y2");
                        _builder.newLine();
                        _builder.append("x4 ---- x4_y2");
                        _builder.newLine();
                        _builder.append("x4_y2 ---- y2");
                        _builder.newLine();
                        _builder.append("x5 ---- x5_y3");
                        _builder.newLine();
                        _builder.append("x5_y3 ---- y3");
                        _builder.newLine();
                        _builder.newLine();
                      } else {
                        if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
                          _builder.append("package ");
                          String _string_14 = r.getLeftEnding().getTarget().toString();
                          _builder.append(_string_14);
                          String _cardinality_14 = r.getLeftEnding().getCardinality();
                          _builder.append(_cardinality_14);
                          _builder.append(" {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("object x1");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x2");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x3");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x4    ");
                          _builder.newLine();
                          _builder.append("}\t");
                          _builder.newLine();
                          _builder.append("\t\t");
                          _builder.newLine();
                          _builder.append("package ");
                          String _cardinality_15 = r.getRightEnding().getCardinality();
                          _builder.append(_cardinality_15);
                          String _string_15 = r.getRightEnding().getTarget().toString();
                          _builder.append(_string_15);
                          _builder.append(" {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("object y1");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object y2");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object y3");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object y4");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object y5");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object y6");
                          _builder.newLine();
                          _builder.append("}");
                          _builder.newLine();
                          _builder.newLine();
                          _builder.append("package relationship {");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x1_y1");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x1_y2");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x2_y3");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x2_y4");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("object x3_y5");
                          _builder.newLine();
                          _builder.append("}");
                          _builder.newLine();
                          _builder.newLine();
                          _builder.append("x1 ---- x1_y1");
                          _builder.newLine();
                          _builder.append("x1_y1 ---- y1");
                          _builder.newLine();
                          _builder.append("x1 ---- x1_y2");
                          _builder.newLine();
                          _builder.append("x1_y2 ---- y2");
                          _builder.newLine();
                          _builder.append("x2 ---- x2_y3");
                          _builder.newLine();
                          _builder.append("x2_y3 ---- y3");
                          _builder.newLine();
                          _builder.append("x2 ---- x2_y4");
                          _builder.newLine();
                          _builder.append("x2_y4 ---- y4");
                          _builder.newLine();
                          _builder.append("x3 ---- x3_y5");
                          _builder.newLine();
                          _builder.append("x3_y5 ---- y5");
                          _builder.newLine();
                        } else {
                          if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:1)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
                            _builder.append("package ");
                            String _string_16 = r.getLeftEnding().getTarget().toString();
                            _builder.append(_string_16);
                            String _cardinality_16 = r.getLeftEnding().getCardinality();
                            _builder.append(_cardinality_16);
                            _builder.append(" {");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("object x1");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x2");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x3");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x4    ");
                            _builder.newLine();
                            _builder.append("}\t");
                            _builder.newLine();
                            _builder.append("\t\t");
                            _builder.newLine();
                            _builder.append("package ");
                            String _cardinality_17 = r.getRightEnding().getCardinality();
                            _builder.append(_cardinality_17);
                            String _string_17 = r.getRightEnding().getTarget().toString();
                            _builder.append(_string_17);
                            _builder.append(" {");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("object y1");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object y2");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object y3");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object y4");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object y5");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object y6");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                            _builder.newLine();
                            _builder.append("package relationship {");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x1_y1");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x1_y2");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x2_y3");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x2_y4");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x2_y5");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("object x3_y6");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                            _builder.newLine();
                            _builder.append("x1 ---- x1_y1");
                            _builder.newLine();
                            _builder.append("x1_y1 ---- y1");
                            _builder.newLine();
                            _builder.append("x1 ---- x1_y2");
                            _builder.newLine();
                            _builder.append("x1_y2 ---- y2");
                            _builder.newLine();
                            _builder.append("x2 ---- x2_y3");
                            _builder.newLine();
                            _builder.append("x2_y3 ---- y3");
                            _builder.newLine();
                            _builder.append("x2 ---- x2_y4");
                            _builder.newLine();
                            _builder.append("x2_y4 ---- y4");
                            _builder.newLine();
                            _builder.append("x2 ---- x2_y5");
                            _builder.newLine();
                            _builder.append("x2_y5 ---- y5");
                            _builder.newLine();
                            _builder.append("x3 ---- x3_y6");
                            _builder.newLine();
                            _builder.append("x3_y6 ---- y6");
                            _builder.newLine();
                          } else {
                            if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:1)"))) {
                              _builder.append("package ");
                              String _string_18 = r.getLeftEnding().getTarget().toString();
                              _builder.append(_string_18);
                              String _cardinality_18 = r.getLeftEnding().getCardinality();
                              _builder.append(_cardinality_18);
                              _builder.append(" {");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("object x1");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x2");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x3");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x4");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x5");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x6");
                              _builder.newLine();
                              _builder.append("}\t");
                              _builder.newLine();
                              _builder.append("\t\t");
                              _builder.newLine();
                              _builder.append("package ");
                              String _cardinality_19 = r.getRightEnding().getCardinality();
                              _builder.append(_cardinality_19);
                              String _string_19 = r.getRightEnding().getTarget().toString();
                              _builder.append(_string_19);
                              _builder.append(" {");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("object y1");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object y2");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object y3");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object y4");
                              _builder.newLine();
                              _builder.append("}");
                              _builder.newLine();
                              _builder.newLine();
                              _builder.append("package relationship {");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x1_y1");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x2_y1");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x3_y2");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x4_y2");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x5_y2");
                              _builder.newLine();
                              _builder.append("\t");
                              _builder.append("object x6_y3");
                              _builder.newLine();
                              _builder.append("}");
                              _builder.newLine();
                              _builder.newLine();
                              _builder.append("x1 ---- x1_y1");
                              _builder.newLine();
                              _builder.append("x1_y1 ---- y1");
                              _builder.newLine();
                              _builder.append("x2 ---- x2_y1");
                              _builder.newLine();
                              _builder.append("x2_y1 ---- y1");
                              _builder.newLine();
                              _builder.append("x3 ---- x3_y2");
                              _builder.newLine();
                              _builder.append("x3_y2 ---- y2");
                              _builder.newLine();
                              _builder.append("x4 ---- x4_y2");
                              _builder.newLine();
                              _builder.append("x4_y2 ---- y2");
                              _builder.newLine();
                              _builder.append("x5 ---- x5_y2");
                              _builder.newLine();
                              _builder.append("x5_y2 ---- y2");
                              _builder.newLine();
                              _builder.append("x6 ---- x6_y3");
                              _builder.newLine();
                              _builder.append("x6_y3 ---- y3");
                              _builder.newLine();
                            } else {
                              if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
                                CharSequence _initDefaultObjects_2 = this.initDefaultObjects(r);
                                _builder.append(_initDefaultObjects_2);
                                _builder.newLineIfNotEmpty();
                                _builder.append("package relationship {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("object x1_y1");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("object x1_y3");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("object x2_y1");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("object x2_y3");
                                _builder.newLine();
                                _builder.append("}");
                                _builder.newLine();
                                _builder.newLine();
                                _builder.append("x1 ---- x1_y1");
                                _builder.newLine();
                                _builder.append("x1_y1 ---- y1");
                                _builder.newLine();
                                _builder.append("x1 ---- x1_y3");
                                _builder.newLine();
                                _builder.append("x1_y3 ---- y3");
                                _builder.newLine();
                                _builder.append("x2 ---- x2_y1");
                                _builder.newLine();
                                _builder.append("x2_y1 ---- y1");
                                _builder.newLine();
                                _builder.append("x2 ---- x2_y3");
                                _builder.newLine();
                                _builder.append("x2_y3 ---- y3");
                                _builder.newLine();
                              } else {
                                if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
                                  CharSequence _initDefaultObjects_3 = this.initDefaultObjects(r);
                                  _builder.append(_initDefaultObjects_3);
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("package relationship {");
                                  _builder.newLine();
                                  _builder.append("\t");
                                  _builder.append("object x1_y1");
                                  _builder.newLine();
                                  _builder.append("\t");
                                  _builder.append("object x1_y2");
                                  _builder.newLine();
                                  _builder.append("\t");
                                  _builder.append("object x1_y3");
                                  _builder.newLine();
                                  _builder.append("\t");
                                  _builder.append("object x2_y1");
                                  _builder.newLine();
                                  _builder.append("\t");
                                  _builder.append("object x2_y3");
                                  _builder.newLine();
                                  _builder.append("\t");
                                  _builder.append("object x3_y2");
                                  _builder.newLine();
                                  _builder.append("}");
                                  _builder.newLine();
                                  _builder.newLine();
                                  _builder.append("x1 ---- x1_y1");
                                  _builder.newLine();
                                  _builder.append("x1_y1 ---- y1");
                                  _builder.newLine();
                                  _builder.append("x1 ---- x1_y2");
                                  _builder.newLine();
                                  _builder.append("x1_y2 ---- y2");
                                  _builder.newLine();
                                  _builder.append("x1 ---- x1_y3");
                                  _builder.newLine();
                                  _builder.append("x1_y3 ---- y3");
                                  _builder.newLine();
                                  _builder.append("x2 ---- x2_y1");
                                  _builder.newLine();
                                  _builder.append("x2_y1 ---- y1");
                                  _builder.newLine();
                                  _builder.append("x2 ---- x2_y3");
                                  _builder.newLine();
                                  _builder.append("x2_y3 ---- y3");
                                  _builder.newLine();
                                  _builder.append("x3 ---- x3_y2");
                                  _builder.newLine();
                                  _builder.append("x3_y2 ---- y2");
                                  _builder.newLine();
                                } else {
                                  if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(0:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(1:N)"))) {
                                    CharSequence _initDefaultObjects_4 = this.initDefaultObjects(r);
                                    _builder.append(_initDefaultObjects_4);
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("package relationship {");
                                    _builder.newLine();
                                    _builder.append("\t");
                                    _builder.append("object x1_y1");
                                    _builder.newLine();
                                    _builder.append("\t");
                                    _builder.append("object x2_y1");
                                    _builder.newLine();
                                    _builder.append("\t");
                                    _builder.append("object x3_y1");
                                    _builder.newLine();
                                    _builder.append("\t");
                                    _builder.append("object x1_y2");
                                    _builder.newLine();
                                    _builder.append("\t");
                                    _builder.append("object x3_y2");
                                    _builder.newLine();
                                    _builder.append("}");
                                    _builder.newLine();
                                    _builder.newLine();
                                    _builder.append("x1 ---- x1_y1");
                                    _builder.newLine();
                                    _builder.append("x1_y1 ---- y1");
                                    _builder.newLine();
                                    _builder.append("x2 ---- x2_y1");
                                    _builder.newLine();
                                    _builder.append("x2_y1 ---- y1");
                                    _builder.newLine();
                                    _builder.append("x3 ---- x3_y1");
                                    _builder.newLine();
                                    _builder.append("x3_y1 ---- y1");
                                    _builder.newLine();
                                    _builder.append("x1 ---- x1_y2");
                                    _builder.newLine();
                                    _builder.append("x1_y2 ----y2");
                                    _builder.newLine();
                                    _builder.append("x3 ---- x3_y2");
                                    _builder.newLine();
                                    _builder.append("x3_y2 ---- y2");
                                    _builder.newLine();
                                  } else {
                                    if ((r.getLeftEnding().getCardinality().equalsIgnoreCase("(1:N)") && r.getRightEnding().getCardinality().equalsIgnoreCase("(0:N)"))) {
                                      CharSequence _initDefaultObjects_5 = this.initDefaultObjects(r);
                                      _builder.append(_initDefaultObjects_5);
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("package relationship {");
                                      _builder.newLine();
                                      _builder.append("\t");
                                      _builder.append("object x1_y1");
                                      _builder.newLine();
                                      _builder.append("\t");
                                      _builder.append("object x2_y2");
                                      _builder.newLine();
                                      _builder.append("\t");
                                      _builder.append("object x1_y3");
                                      _builder.newLine();
                                      _builder.append("\t");
                                      _builder.append("object x2_y1");
                                      _builder.newLine();
                                      _builder.append("\t");
                                      _builder.append("object x2_y3");
                                      _builder.newLine();
                                      _builder.append("}");
                                      _builder.newLine();
                                      _builder.newLine();
                                      _builder.append("x1 ---- x1_y1");
                                      _builder.newLine();
                                      _builder.append("x1_y1 ---- y1");
                                      _builder.newLine();
                                      _builder.append("x2 ---- x2_y2");
                                      _builder.newLine();
                                      _builder.append("x2_y2 ---- y2");
                                      _builder.newLine();
                                      _builder.append("x1 ---- x1_y3");
                                      _builder.newLine();
                                      _builder.append("x1_y3 ---- y3");
                                      _builder.newLine();
                                      _builder.append("x2 ---- x2_y1");
                                      _builder.newLine();
                                      _builder.append("x2_y1 ---- y1");
                                      _builder.newLine();
                                      _builder.append("x2 ---- x2_y3");
                                      _builder.newLine();
                                      _builder.append("x2_y3 ---- y3");
                                      _builder.newLine();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence initDefaultObjects(final Relation r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _string = r.getLeftEnding().getTarget().toString();
    _builder.append(_string);
    String _cardinality = r.getLeftEnding().getCardinality();
    _builder.append(_cardinality);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("object x1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("object x2");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("object x3    ");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("package ");
    String _cardinality_1 = r.getRightEnding().getCardinality();
    _builder.append(_cardinality_1);
    String _string_1 = r.getRightEnding().getTarget().toString();
    _builder.append(_string_1);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("object y1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("object y2");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("object y3");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
