/*
 * generated by Xtext 2.17.0
 */
package org.xtext.unipampa.erdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.unipampa.erdsl.erDsl.ERModel
import org.xtext.unipampa.erdsl.erDsl.Attribute
import org.xtext.unipampa.erdsl.erDsl.Relation
import org.xtext.unipampa.erdsl.erDsl.Entity
import java.util.ArrayList

import org.eclipse.xtext.generator.IFileSystemAccessExtension3
import java.io.ByteArrayOutputStream
import net.sourceforge.plantuml.SourceStringReader
import java.io.ByteArrayInputStream

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ErDslGenerator extends AbstractGenerator {

	val myListFKs = new ArrayList();
	var globalFKcounter_1to1 = 0;
	var globalFKcounter_1toN = 0;
	var counter = 0; 
	var AuxCounterA = 0;
	var AuxCounterB = 0;
	var boolean auxT1 = false;
	var boolean auxT2 = false;
	var StringBuilder stringBuilderAlterTblNtoN = new StringBuilder;
	var StringBuilder stringBuilderAlterTblTernary = new StringBuilder;
	
	var Entity lEnt;
	var Entity rEnt;
	var Relation lRel;
	var Relation rRel;
	
	val htmlGenerator = new HtmlFileGenerator;
	val postGreSqlGenerator = new PostgresqlFileGenerator;
	val MySqlGenerator = new MysqlFileGenerator;
	val PlantUmlGenerator = new PlantUmlFileGenerator;
	
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val modeloER = resource.contents.get(0) as ERModel		
		
		if (!modeloER.targetGenerator.isNullOrEmpty && !modeloER.targetGenerator.equalsIgnoreCase("all")) {
			switch (modeloER.targetGenerator.toString) {
				case modeloER.targetGenerator.toString.equalsIgnoreCase("logicalschema"): {
					this.htmlGenerator.doGenerate(resource, fsa, context)
				}
				case modeloER.targetGenerator.toString.equalsIgnoreCase("postgresql"): {
					this.postGreSqlGenerator.doGenerate(resource, fsa, context)
				}
				case modeloER.targetGenerator.toString.equalsIgnoreCase("mysql"): {
					this.MySqlGenerator.doGenerate(resource, fsa, context)
				}
			}
		} else {
			this.htmlGenerator.doGenerate(resource, fsa, context)
			this.postGreSqlGenerator.doGenerate(resource, fsa, context)
			this.MySqlGenerator.doGenerate(resource, fsa, context)
			this.PlantUmlGenerator.doGenerate(resource, fsa, context)
		}
		
	}
	
	/**
	 * LOGICAL SCHEMA (HTML) GENERATOR CODE
	 */
	def CreateLogical(ERModel modeloER) '''
		«htmlHead»
		«htmlModelDomain(modeloER)»
		«htmlModelEntities(modeloER)»
		«htmlModelRelationships(modeloER)»
		
		<hr style="width:100%;text-align:left;margin-left:0">
		<p class="sstitle">
		<a href="#entities" class="btn btn-primary" data-toggle="collapse"><i class="fa fa-arrows-v" aria-hidden="true"></i></a>
		&nbsp Resulting Entities
		</p>	 
		<div id="entities" class="panel-body collapse in">
		<p class="field">
		«FOR entity : modeloER.entities SEPARATOR " )</br></br>" AFTER ")</br>"»
			<span class="badge badge-secondary">«entity.name.toUpperCase»</span> (
			«/**
			 *
			 * Verification and display of primary (PK) and, at the same time, foreign (FK) 
			 * keys from generalizations / specializations
			 *  1- Checks for a reference to a parent entity
			 *  2- If it exists, the key that references the parent is written being primary and foreign at the same time
			 *
			 */»
			«IF !(entity.is === null)»
				«FOR aux : modeloER.entities»
					«IF aux.name.equalsIgnoreCase(entity.is.toString)»
						«FOR auxAttributes : aux.attributes»
							«IF auxAttributes.isIsKey»
								<font color="blue"><b>«auxAttributes.name»</b></font><font color="red"><b>*</b></font>, 
							«ENDIF»
						«ENDFOR»
	«««Antigo code: na mudança acima proposta pelo Bernardino, usa a exata mesma chave do pai, não o nome da tabela
	«««					<font color="blue"><b>«aux.name»</b></font><font color="red"><b>*</b></font>, 
					«ENDIF»
				«ENDFOR»
			«ENDIF»
				
			«FOR attribute : entity.attributes SEPARATOR ", "»
				«IF attribute.isIsKey»
					<font color="red"><b>«attribute.name»*</b></font>
				«ELSEIF !attribute.isIsKey»
					«attribute.name»
				«ENDIF»	
			«ENDFOR»	
			
			«FOR relation : modeloER.relations»
				
				«IF ((relation.leftEnding.cardinality.equalsIgnoreCase('(0:1)') || relation.leftEnding.cardinality.equalsIgnoreCase('(1:1)'))
				&& 
				(relation.rightEnding.cardinality.equalsIgnoreCase('(0:1)') || relation.rightEnding.cardinality.equalsIgnoreCase('(1:1)')))»
					
					«IF relation.rightEnding.target.toString.equalsIgnoreCase(entity.name)»
						«FOR aux : modeloER.entities»
							«IF relation.leftEnding.target.toString.equalsIgnoreCase(aux.name)»
								«IF aux.is === null»
									«FOR aux2 : aux.attributes»
										«IF aux2.isIsKey»
											, <font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>
										«ENDIF»
									«ENDFOR»
								«ELSEIF !(aux.is === null)»
									, <font color="blue"><b>«aux.is.toString»_fk</b></font>
								«ENDIF»
							«ENDIF»
						«ENDFOR»
					«ENDIF»
				«ENDIF»
				
			«ENDFOR»
	
			«FOR relation : modeloER.relations»
				«IF (((relation.leftEnding.cardinality.equalsIgnoreCase('(0:1)') || relation.leftEnding.cardinality.equalsIgnoreCase('(1:1)'))
				&& 
				(relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)') || relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)')))) 
				
				||
				
				(((relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') || relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)'))
				&& 
				(relation.rightEnding.cardinality.equalsIgnoreCase('(0:1)') || relation.rightEnding.cardinality.equalsIgnoreCase('(1:1)'))))»
					
					«IF relation.rightEnding.target.toString.equalsIgnoreCase(entity.name)»
						«FOR aux : modeloER.entities»
							«IF relation.leftEnding.target.toString.equalsIgnoreCase(aux.name)»
								«IF aux.is === null»
									, <font color="blue"><b>«aux.name»_fk</b></font>
								«ELSEIF !(aux.is === null)»
									«IF relation.leftEnding.target.toString.equalsIgnoreCase(relation.rightEnding.target.toString)»
										, <font color="blue"><b>«relation.name.toString»_fk</b></font>
									«ELSEIF !relation.leftEnding.target.toString.equalsIgnoreCase(relation.rightEnding.target.toString)»
									, <font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>
									«ENDIF»
								«ENDIF»
							«ENDIF»
						«ENDFOR»
					«ENDIF»
				«ENDIF»
				
			«ENDFOR»					
			
		«ENDFOR»
		«/**
		 *
		 * Formation of entities from relations N:N
		 *	1- Checks if there is a name for the relationship, if it does not exist, the name of the two associated entities is concatenated
		 *  2- The primary keys of the associated entities are allocated and become primary and foreign at the same time
		 *  3- If the relationship has attributes they are written at the end
		 * 
		 */»
		«FOR relation : modeloER.relations»
			«IF ((relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') || relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)'))
			&& 
			(relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)') || relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)')))»		
				«IF relation.name.nullOrEmpty»
				</br><span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»«relation.rightEnding.target.toString.toUpperCase»</span> (
				<font color="red"><b>id«relation.leftEnding.target.toString.toUpperCase»«relation.rightEnding.target.toString»*</b></font>,
				«ELSEIF !relation.name.nullOrEmpty»
				</br><span class="badge badge-secondary">«relation.name.toUpperCase»</span> (
				<font color="red"><b>id«relation.name»*</b></font>,
				«ENDIF»			
				
				«FOR entity : modeloER.entities»
					
					«IF relation.leftEnding.target.toString.equalsIgnoreCase(entity.name) && (relation.leftEnding.target.toString !== relation.rightEnding.target.toString)»
	«««					«FOR attribute : entity.attributes»
	«««						«IF attribute.isIsKey»
								<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>,
	«««						«ENDIF»
	«««					«ENDFOR»
					«ENDIF»
					
					«IF relation.rightEnding.target.toString.equalsIgnoreCase(entity.name) && (relation.rightEnding.target.toString !== relation.leftEnding.target.toString)»
	«««					«FOR attribute : entity.attributes»
	«««						«IF attribute.isIsKey»
								<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>
	«««						«ENDIF»
	«««					«ENDFOR»
					«ENDIF»
					
					«/**
					 *
					 * Display of self-relationships N:N
					 *  
					 */»				
					«IF relation.leftEnding.target.toString.equalsIgnoreCase(entity.name) && (relation.leftEnding.target.toString.equalsIgnoreCase(relation.rightEnding.target.toString))»
						
						«FOR attribute : entity.attributes»
							«IF attribute.isIsKey»
								<font color="blue"><b>«attribute.name»__fk1</b></font>,
							«ENDIF»
						«ENDFOR»
					«ENDIF»
					
					«IF relation.rightEnding.target.toString.equalsIgnoreCase(entity.name) && (relation.rightEnding.target.toString.equalsIgnoreCase(relation.leftEnding.target.toString))»
						«FOR attribute : entity.attributes»
							«IF attribute.isIsKey»
								<font color="blue"><b>«attribute.name»__fk2</b></font>
							«ENDIF»
						«ENDFOR»
					«ENDIF»				
							
				«ENDFOR»	
				
				«/**
				 *
				 * Display of attributes of N: N relationships
				 *  
				 */»			
				«FOR attribute : relation.attributes»
					«IF !attribute.name.nullOrEmpty && attribute.isIsKey»
						, <font color="red"><b>«attribute.name»*</b></font>
					«ENDIF»
				«ENDFOR»
	
				«FOR attribute : relation.attributes»
					«IF !attribute.name.nullOrEmpty && !attribute.isIsKey»
						, «attribute.name»
					«ENDIF»
				«ENDFOR»
						
				)</br>
				
			«ENDIF»
		«ENDFOR»
		</br>
		«/**
		 *	
		 * Formation of entities from ternary relations
		 *
		 */»
		«FOR relation : modeloER.relations»
			«IF ((relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') || relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)'))
			&& 
			(relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)') || relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)')))»
				«FOR aux : modeloER.relations»				
					
					«IF (!relation.name.nullOrEmpty) && (relation.name.equals(aux.leftEnding.target.toString))»
						<span class="badge badge-secondary">«aux.name.toUpperCase»</span> (
						<font color="red"><b>id«aux.name»*</b></font>, 
						<font color="blue"><b>«aux.leftEnding.target.toString»_FK</b></font>, 
	«««					<font color="red"><b>*</b></font>,
						«FOR aux2 : modeloER.entities»
							«IF aux.rightEnding.target.toString.equalsIgnoreCase(aux2.name)»
								<font color="blue"><b>«aux2»_FK</b></font>
	«««							<font color="red"><b>*</b></font>
								«/**
								  *	
								  * Display ternary attributes
								  *
								*/»
								«FOR attribute : aux.attributes»
									«IF !attribute.name.nullOrEmpty && attribute.isIsKey»
										, <font color="red"><b>«attribute.name»*</b></font>
									«ENDIF»
								«ENDFOR»
					
								«FOR attribute : aux.attributes»
									«IF !attribute.name.nullOrEmpty && !attribute.isIsKey»
										, «attribute.name»
									«ENDIF»
								«ENDFOR»							
								)</br>
							«ENDIF»
						«ENDFOR»						
					«ELSEIF (!relation.name.nullOrEmpty) && (relation.name.equals(aux.rightEnding.target.toString))»
						«aux.name.toUpperCase» (
						<font color="blue"><b>«aux.rightEnding.target.toString»_FK</b></font>,
	«««					<font color="red"><b>*</b></font>
						«FOR aux2 : modeloER.entities»
							«IF aux.leftEnding.target.toString.equalsIgnoreCase(aux2.name)»
								<font color="blue"><b>«aux2»_FK</b></font>
	«««							<font color="red"><b>*</b></font>
								«/**
								  *	
								  * Display ternary attributes
								  *
								*/»
								«FOR attribute : relation.attributes»
									«IF !attribute.name.nullOrEmpty && attribute.isIsKey»
										, <font color="red"><b>«attribute.name»*</b></font>
									«ENDIF»
								«ENDFOR»
					
								«FOR attribute : relation.attributes»
									«IF !attribute.name.nullOrEmpty && !attribute.isIsKey»
										, «attribute.name»
									«ENDIF»
								«ENDFOR»							
								)</br>
							«ENDIF»
						«ENDFOR»
					«ENDIF»	
					
								
				«ENDFOR»
			«ENDIF»
		«ENDFOR»
		</p>
		</div>
		
	«««	«/**
	«««	 *	
	«««	 * Display of previously modeled relationships
	«««	 *
	«««	 */»
	«««	<hr style="width:100%;text-align:left;margin-left:0"> 
	«««	<p class="sstitle">
	«««	<a href="#relationships" class="btn btn-primary" data-toggle="collapse"><i class="fa fa-arrows-v" aria-hidden="true"></i></a>
	«««	&nbsp Modelled Relationships
	«««	</p>	 
	«««	<div id="relationships" class="panel-body collapse in">
	«««	<p class="field">
	«««	«FOR relation : modeloER.relations SEPARATOR "</br>"»
	«««		«IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»
	«««	«ENDFOR»
	«««	</p>
	«««	</div>
		
		
		«/**
		 *	
		 * Display of inferred references through modeled relationships (foreign keys)
		 *
		 */»
		<hr style="width:100%;text-align:left;margin-left:0">
		<p class="sstitle">
		<a href="#references" class="btn btn-primary" data-toggle="collapse"><i class="fa fa-arrows-v" aria-hidden="true"></i></a>
		&nbsp Mapped References
		</p>	 
		<div id="references" class="panel-body collapse in">	
		<p class="field">
		«FOR relation : modeloER.relations SEPARATOR "</br>"»
			«/**
			 *	
			 * 
			 *
			 */»	
			 
	«««	Relationships 1:1		 
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
		
		Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
		</br>
		«ENDIF»
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
		
		Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
		</br>
		«ENDIF»	
	
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
		
		Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
		</br>
		«ENDIF»		 	
	
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
		
		Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
		</br>
		«ENDIF»
		
		
	«««	Relationships 1:N
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>
		«ENDIF»
			
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>
		«ENDIF»
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»	
		</br>
		«ENDIF»	
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:1)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>
		«ENDIF»
	
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>
		«ENDIF»
	
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>
		«ENDIF»
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>
		«ENDIF»
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:1)'))»
		<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			«FOR aux : modeloER.entities»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					«IF aux.is === null»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>	
					«ELSEIF !(aux.is === null)»
						«IF relation.leftEnding.target.toString.equals(relation.rightEnding.target.toString)»
							Attribute "<font color="blue"><b>«relation.name»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ELSE»
						Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span> references <span class="badge badge-secondary">«aux.is.toString.toUpperCase»</span>
						«ENDIF»
					«ENDIF»
				«ENDIF»
			«ENDFOR»
			«FOR aux : modeloER.relations»
				«IF aux.name.equalsIgnoreCase(relation.leftEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
				«ELSEIF aux.name.equalsIgnoreCase(relation.rightEnding.target.toString)»
					Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span></br>
					Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>		
				«ENDIF»
			«ENDFOR»
		</br>	
		«ENDIF»	
	
	
	«««	Relationships N:N		 
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)'))»
			<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			
			Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
			</br>
			Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" In <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>		
			</br>
		«ENDIF»
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(0:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)'))»
			<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			
			Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
			</br>
			Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" In <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
			</br>
		«ENDIF»
		
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(0:N)'))»
			<font color="#505050">Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
			
			Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
			</br>
			Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" In <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>	
			</br>
		«ENDIF»		 	
	
		«IF (relation.leftEnding.cardinality.equalsIgnoreCase('(1:N)') && relation.rightEnding.cardinality.equalsIgnoreCase('(1:N)'))»
			<font color="#505050">Modelled Relationship: «IF relation.name.nullOrEmpty»<i>_UnnamedEntity_</i>«ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i> «relation.leftEnding.cardinality.toString» «relation.leftEnding.target» relates «relation.rightEnding.target.toString» «relation.rightEnding.cardinality»</font></br>
		
			Attribute "<font color="blue"><b>«relation.leftEnding.target.toString»_fk</b></font>" in <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.leftEnding.target.toString.toUpperCase»</span>
			</br>
			Attribute "<font color="blue"><b>«relation.rightEnding.target.toString»_fk</b></font>" In <span class="badge badge-secondary">«relation.name.toUpperCase»</span> references <span class="badge badge-secondary">«relation.rightEnding.target.toString.toUpperCase»</span>
			</br>
		«ENDIF»
		
			
		«ENDFOR»
	
	«htmlFooter»
	'''
	
	def private htmlHead () '''
	<!DOCTYPE html>
		<html>
		<head>
			<title>ERtext Logical schema</title>
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width, initial-scale=1">
			<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
			<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
			<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
			<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
			
			<style>
			    body    { background: #ffffff; border: 1px solid black, padding: 5px 0 5px 0}
			    .title  { font: bold 160% serif; color: #0066FF; padding: 10px 0 10px 0; text-align: center; background: #ccc8c8}
			    .stitle { font: bold 120% sans-serif; color: #0044DD; padding: 10px 0 10px 0 }
			    .sstitle{ font: bold 120% serif; color: #000000; background: #efefef; padding: 5px 0 5px 0; padding-left: 20px;}
			    .field  { font: 100% sans-serif; color: #000000; padding: 2px; padding-left: 50px; border: 0px solid black}
			    .value  { font: 100% sans-serif; color: #505050 }
			    footer 	{ text-align: center; padding: 3px; border: 1px; background-color: #ccc8c8; color: white;}
			</style>
		</head>
		<body> 
		<div class="panel">
		<p class="title badge-primary">LOGICAL SCHEMA</p>
		</div>		
	'''
	
	def private htmlFooter()'''
	</p>
	</div>	
	</body>
		<footer>
		  <p><a href="https://github.com/ProjetoDSL/ERDSL">github.com/ProjetoDSL/ERDSL</a></p>
		</footer>
	</html>
	'''
	
	/**
	 * Display of the modeled domain (database name)
	 **/
	def private htmlModelDomain (ERModel m) '''
	<p class="sstitle">
	<a href="#domain" class="btn btn-primary" data-toggle="collapse"><i class="fa fa-arrows-v" aria-hidden="true"></i></a>
	&nbsp Modelled Domain
	</p>
	<div id="domain" class="panel-body collapse in">
	<p class="field">«m.domain.name.toUpperCase»</p>
	</div>	
	
	'''
	
	/**
	*	
	* Display of modeled entities (tables)
	*
	*/
	def private htmlModelEntities (ERModel m) '''
	<hr style="width:100%;text-align:left;margin-left:0">
	<p class="sstitle">
	<a href="#entities" class="btn btn-primary" data-toggle="collapse"><i class="fa fa-arrows-v" aria-hidden="true"></i></a>
	&nbsp Resulting Entities
	</p>	 
	<div id="entities" class="panel-body collapse in">
	<p class="field">
		«FOR entity : m.entities SEPARATOR " )</br></br>" AFTER ")</br>"»
			«htmlEntityNameTag(entity)» ( «htmlModelAtributes(entity)»
		«ENDFOR»
	</div>
	'''
	def private htmlEntityNameTag (Entity e) '''
	<span class="badge badge-secondary">«e.name.toUpperCase»</span>
	'''
	
	def private htmlModelAtributes (Entity e) '''
		«FOR att : e.attributes SEPARATOR ", "»
			«IF att.isIsKey»
				«htmlRedAttributeForPK(att)»
			«ELSE»
				«att.name»
			«ENDIF»
		«ENDFOR»
	'''
	
	def private htmlRedAttributeForPK (Attribute a) '''
		<font color="red"><b>«a.name.toLowerCase»*</b></font>
	'''
	
	def private htmlModelRelationships (ERModel m) '''
		<hr style="width:100%;text-align:left;margin-left:0">
		<p class="sstitle">
		<a href="#references" class="btn btn-primary" data-toggle="collapse"><i class="fa fa-arrows-v" aria-hidden="true"></i></a>
		&nbsp Mapped References
		</p>	 
		<div id="references" class="panel-body collapse in">	
		<p class="field">	
		«FOR relation : m.relations SEPARATOR "</br></br>"»
			«IF relation.leftEnding.target instanceof Entity»
				«{lEnt = relation.leftEnding.target as Entity;null}»
			«ELSE»
				«{lRel = relation.leftEnding.target as Relation;null}»
			«ENDIF»
			«IF relation.rightEnding.target instanceof Entity»
				«{rEnt = relation.rightEnding.target as Entity;null}»
			«ELSE»
				«{rRel = relation.rightEnding.target as Relation;null}»
			«ENDIF»

«««			// FIXME: precisa implementar a funçao de concatenação para relaçao sem nome

			<font color="#505050">Relationship: «IF relation.name.nullOrEmpty» <i>_UnnamedEntity_</i> «ELSEIF !relation.name.nullOrEmpty»«relation.name»«ENDIF» <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
			«IF !(lEnt === null)»
				«lEnt.name»
			«ELSEIF !(lRel === null)»
				«lRel.name»
			«ENDIF» 
			«relation.leftEnding.cardinality.toString» relates «relation.rightEnding.cardinality»
			«IF !(rEnt === null)»
				«rEnt.name»
			«ELSEIF !(rRel === null)»
				«rRel.name»
			«ENDIF»
			</font></br>
			
			«{lEnt = null;null}»«{rEnt = null;null}»
			«{lRel = null;null}»«{rRel = null;null}»
		«ENDFOR»
		
		</div>
	
	'''
}
