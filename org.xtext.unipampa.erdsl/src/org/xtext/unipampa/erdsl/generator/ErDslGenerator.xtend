/*
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.unipampa.erdsl.erDsl.ERModel
import org.xtext.unipampa.erdsl.erDsl.Attribute
import org.xtext.unipampa.erdsl.erDsl.Relation
import org.xtext.unipampa.erdsl.erDsl.Entity
import java.util.ArrayList

import org.eclipse.xtext.generator.IFileSystemAccessExtension3
import java.io.ByteArrayOutputStream
import net.sourceforge.plantuml.SourceStringReader
import java.io.ByteArrayInputStream

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ErDslGenerator extends AbstractGenerator {

	val htmlGenerator = new HtmlFileGenerator;
	val postGreSqlGenerator = new PostgresqlFileGenerator;
	val MySqlGenerator = new MysqlFileGenerator;
	val PlantUmlGenerator = new PlantUmlFileGenerator;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val modeloER = resource.contents.get(0) as ERModel
		
		try {

			if (!modeloER.targetGenerator.isNullOrEmpty && !modeloER.targetGenerator.equalsIgnoreCase("all")) {

				switch (modeloER.targetGenerator.toString) {
					case modeloER.targetGenerator.toString.equalsIgnoreCase("logicalschema"): {

						this.htmlGenerator.doGenerate(resource, fsa, context)
					}
					case modeloER.targetGenerator.toString.equalsIgnoreCase("postgresql"): {

						this.postGreSqlGenerator.doGenerate(resource, fsa, context)
					}
					case modeloER.targetGenerator.toString.equalsIgnoreCase("mysql"): {

						this.MySqlGenerator.doGenerate(resource, fsa, context)
					}
					case modeloER.targetGenerator.toString.equalsIgnoreCase("diagram"): {

						this.PlantUmlGenerator.doGenerate(resource, fsa, context)
					}
				}
			} else {

				this.htmlGenerator.doGenerate(resource, fsa, context)

				this.postGreSqlGenerator.doGenerate(resource, fsa, context)

				this.MySqlGenerator.doGenerate(resource, fsa, context)

				this.PlantUmlGenerator.doGenerate(resource, fsa, context)
			}

		} catch (Exception e) {

			println(e.stackTrace.toString)

		}
	}
}