/*
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.ui.wizard


import org.eclipse.xtext.ui.wizard.template.FileTemplate
import org.eclipse.xtext.ui.wizard.template.IFileGenerator
import org.eclipse.xtext.ui.wizard.template.IFileTemplateProvider

/**
 * Create a list with all file templates to be shown in the template new file wizard.
 * 
 * Each template is able to generate one or more files.
 */
class ErDslFileTemplateProvider implements IFileTemplateProvider {
	override getFileTemplates() {
		#[new ERtextFile]
	}
}

//@FileTemplate(label="Hello World", icon="file_template.png", description="Create a hello world for ERDSl.")
//final class HelloWorldFile {
//	val helloName = combo("Hello Name:", #["Xtext", "World", "Foo", "Bar"], "The name to say 'Hello' to")
@FileTemplate(label="ERDSL Template", icon="file_template.png", description="Create a template file for ERDSl.")
final class ERtextFile {
	val modelName = combo("Template:", #["Employees", "2", "3"], "The logical example model")
	override generateFiles(IFileGenerator generator) {
		generator.generate('''«folder»/«name».erdsl''', '''
		«IF modelName.toString.equalsIgnoreCase("Employees")»
			Generate All;
			/*
			 * This is an example model
			 */
			Domain The_Employees_Sample_Schema;
			
			Entities {
				
				Person {
					person_no int isIdentifier,
					gender boolean
				}
				
				Employee is total/overlapped Person {
				 emp_no int isIdentifier,
				 birth_dt datetime,
				 first_name string,
				 last_name string,
				 hire_dt datetime	
				}
				
				Dependent is total/overlapped Person {
					dependent_no int isIdentifier,
					first_name string,
					last_name string
				}
				
				Salary {
					salary_no int isIdentifier,
					salary money,
					from_dt datetime,
					to_dt datetime
				}
				
				Departament {
					dept_no int isIdentifier,
					name string, 
					goals_description string
				}
				
				Title	 {
					title_no int isIdentifier,
					name string,
					description string,
					from_dt datetime,
					to_dt datetime		
				}
					
			};
			
			Relationships {
				Dept_manager [Employee (1:N) relates (1:N) Departament] {from_dt datetime, to_dt datetime}
				Dept_emp	 [Employee (1:N) relates (1:N) Departament] {from_dt datetime, to_dt datetime}
				Payment 	 [Salary (1:N) relates (1:1) Employee]
				JobTitle	 [Title (1:N) relates (1:1) Employee]
				Dependency	 [Employee (1:1) relates (1:N) Dependent]
			};

		«ELSEIF modelName.toString.equalsIgnoreCase("2")»
			
			
			Another Template
			
			
		«ELSEIF modelName.toString.equalsIgnoreCase("3")»
			
			
			Another Template
			
			
		«ENDIF»
		''')
	}
}
