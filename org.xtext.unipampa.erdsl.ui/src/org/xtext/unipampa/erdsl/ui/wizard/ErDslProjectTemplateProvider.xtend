/*
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class ErDslProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new ERtextProject]
	}
}

@ProjectTemplate(label="org.project.ertext.template", icon="project_template.png", description="<p><b> ERtext Project Template</b></p> 
<p>This is a parameterized project template for ERtext. You can set a parameter to modify the content in the generated file and a parameter 
to set the package the file is created in.</p>")
final class ERtextProject {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val name = combo("Name:", #["Xtext"], "Xtext:", advancedGroup)
	val path = text("Package:", "ERtext", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		name.enabled = advanced.value
		path.enabled = advanced.value
		if (!advanced.value) {
			name.value = "Xtext"
			path.value = "ertext"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
//			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			projectNatures += #[XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "src"
			addFile('''src/TemplateModel.erdsl''', '''
			/*
			* The template to demonstrate an overview of the grammar. 
			* This does not necessarily displays a semantically correct model regarding to the real world.
			*/
			
			Generate All;
			
			Domain Name;
			
			Entities {
				Entity1 {
			    	attribute1 int isIdentifier,
			        attribute2 file
				}
			                    
			    /*  The generalization type can be:
			    *   [1] total/disjoint, [2] total/overlapped, [3] partial/disjoint OR [4] partial/overlapped
			    * 
			    * 	An entity that specializes another should NOT HAVE an IDENTIFIER attribute, as it inherits from the generalized entity.
			    */
				Entity2 is total/disjoint Entity1 {
			    	attribute3 string,
					attribute4 datetime
				}
			};
			
			Relationships {
					Relationship1 [Entity1 (1:N) relates (1:N) Entity2] {attribute5 int}
					Relationship2 [Entity2 (1:N) relates (1:N) Entity1]	
			};
			''')
		])
	}
}
