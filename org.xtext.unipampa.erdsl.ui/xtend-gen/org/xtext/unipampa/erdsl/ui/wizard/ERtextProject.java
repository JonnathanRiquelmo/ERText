/**
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.ui.wizard;

import com.google.common.collect.Iterables;
import java.util.Collections;
import java.util.List;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.XtextProjectHelper;
import org.eclipse.xtext.ui.util.PluginProjectFactory;
import org.eclipse.xtext.ui.wizard.template.AbstractProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.BooleanTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.GroupTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator;
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.StringSelectionTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.StringTemplateVariable;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ProjectTemplate(label = "org.project.ertext.template", icon = "project_template.png", description = "<p><b> ERtext Project Template</b></p> \n<p>This is a parameterized project template for ERtext. You can set a parameter to modify the content in the generated file and a parameter \nto set the package the file is created in.</p>")
@SuppressWarnings("all")
public final class ERtextProject extends AbstractProjectTemplate {
  private final BooleanTemplateVariable advanced = this.check("Advanced:", false);
  
  private final GroupTemplateVariable advancedGroup = this.group("Properties");
  
  private final StringSelectionTemplateVariable name = this.combo("Name:", new String[] { "Xtext" }, "Xtext:", this.advancedGroup);
  
  private final StringTemplateVariable path = this.text("Package:", "ERtext", "The package path to place the files in", this.advancedGroup);
  
  @Override
  protected void updateVariables() {
    this.name.setEnabled(this.advanced.getValue());
    this.path.setEnabled(this.advanced.getValue());
    boolean _value = this.advanced.getValue();
    boolean _not = (!_value);
    if (_not) {
      this.name.setValue("Xtext");
      this.path.setValue("ertext");
    }
  }
  
  @Override
  protected IStatus validate() {
    Status _xifexpression = null;
    boolean _matches = this.path.getValue().matches("[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*");
    if (_matches) {
      _xifexpression = null;
    } else {
      _xifexpression = new Status(IStatus.ERROR, "Wizard", (("\'" + this.path) + "\' is not a valid package name"));
    }
    return _xifexpression;
  }
  
  @Override
  public void generateProjects(final IProjectGenerator generator) {
    PluginProjectFactory _pluginProjectFactory = new PluginProjectFactory();
    final Procedure1<PluginProjectFactory> _function = (PluginProjectFactory it) -> {
      it.setProjectName(this.getProjectInfo().getProjectName());
      it.setLocation(this.getProjectInfo().getLocationPath());
      List<String> _projectNatures = it.getProjectNatures();
      Iterables.<String>addAll(_projectNatures, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(XtextProjectHelper.NATURE_ID)));
      List<String> _builderIds = it.getBuilderIds();
      Iterables.<String>addAll(_builderIds, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID)));
      List<String> _folders = it.getFolders();
      _folders.add("src");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("src/TemplateModel.erdsl");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/*");
      _builder_1.newLine();
      _builder_1.append("* The template to demonstrate an overview of the grammar. ");
      _builder_1.newLine();
      _builder_1.append("* This does not necessarily displays a semantically correct model regarding to the real world.");
      _builder_1.newLine();
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Generate All;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Domain Name;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Entities {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Entity1 {");
      _builder_1.newLine();
      _builder_1.append("    \t");
      _builder_1.append("attribute1 int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("attribute2 file");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("/*  The generalization type can be:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("*   [1] total/disjoint, [2] total/overlapped, [3] partial/disjoint OR [4] partial/overlapped");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("* ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("* \tAn entity that specializes another should NOT HAVE an IDENTIFIER attribute, as it inherits from the generalized entity.");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Entity2 is total/disjoint Entity1 {");
      _builder_1.newLine();
      _builder_1.append("    \t");
      _builder_1.append("attribute3 string,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("attribute4 datetime");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Relationships {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("Relationship1 [Entity1 (1:N) relates (1:N) Entity2] {attribute5 int}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("Relationship2 [Entity2 (1:N) relates (1:N) Entity1]\t");
      _builder_1.newLine();
      _builder_1.append("};");
      _builder_1.newLine();
      this.addFile(it, _builder, _builder_1);
    };
    PluginProjectFactory _doubleArrow = ObjectExtensions.<PluginProjectFactory>operator_doubleArrow(_pluginProjectFactory, _function);
    generator.generate(_doubleArrow);
  }
}
