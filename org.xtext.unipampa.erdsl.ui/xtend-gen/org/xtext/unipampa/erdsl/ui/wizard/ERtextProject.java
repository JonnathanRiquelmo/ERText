/**
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.ui.wizard;

import com.google.common.collect.Iterables;
import java.util.Collections;
import java.util.List;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.XtextProjectHelper;
import org.eclipse.xtext.ui.util.PluginProjectFactory;
import org.eclipse.xtext.ui.wizard.template.AbstractProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.BooleanTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.GroupTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator;
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.StringSelectionTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.StringTemplateVariable;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ProjectTemplate(label = "org.project.ertext.template", icon = "project_template.png", description = "<p><b> ERtext TEMPLATE</b></p> \n<p>This is a parameterized template for ERtext. You can set a parameter to modify the content in the generated file and a parameter \nto set the package the file is created in.</p>")
@SuppressWarnings("all")
public final class ERtextProject extends AbstractProjectTemplate {
  private final BooleanTemplateVariable advanced = this.check("Advanced:", false);
  
  private final GroupTemplateVariable advancedGroup = this.group("Properties");
  
  private final StringSelectionTemplateVariable name = this.combo("Name:", new String[] { "Xtext", "World", "Foo", "Bar" }, "The name to say \'Hello\' to", this.advancedGroup);
  
  private final StringTemplateVariable path = this.text("Package:", "ERtext", "The package path to place the files in", this.advancedGroup);
  
  @Override
  protected void updateVariables() {
    this.name.setEnabled(this.advanced.getValue());
    this.path.setEnabled(this.advanced.getValue());
    boolean _value = this.advanced.getValue();
    boolean _not = (!_value);
    if (_not) {
      this.name.setValue("Xtext");
      this.path.setValue("ertext");
    }
  }
  
  @Override
  protected IStatus validate() {
    Status _xifexpression = null;
    boolean _matches = this.path.getValue().matches("[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*");
    if (_matches) {
      _xifexpression = null;
    } else {
      _xifexpression = new Status(IStatus.ERROR, "Wizard", (("\'" + this.path) + "\' is not a valid package name"));
    }
    return _xifexpression;
  }
  
  @Override
  public void generateProjects(final IProjectGenerator generator) {
    PluginProjectFactory _pluginProjectFactory = new PluginProjectFactory();
    final Procedure1<PluginProjectFactory> _function = (PluginProjectFactory it) -> {
      it.setProjectName(this.getProjectInfo().getProjectName());
      it.setLocation(this.getProjectInfo().getLocationPath());
      List<String> _projectNatures = it.getProjectNatures();
      Iterables.<String>addAll(_projectNatures, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(XtextProjectHelper.NATURE_ID)));
      List<String> _builderIds = it.getBuilderIds();
      Iterables.<String>addAll(_builderIds, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID)));
      List<String> _folders = it.getFolders();
      _folders.add("src");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("src/Blank_Model.erdsl");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/*");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* Hello new user!");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("*");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("* This is an example model");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Generate All;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Domain The_Employees_Sample_Schema;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Entities {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Person {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("person_no int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("gender boolean");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Employee is total/overlapped Person {");
      _builder_1.newLine();
      _builder_1.append("\t ");
      _builder_1.append("emp_no int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("\t ");
      _builder_1.append("birth_dt datetime,");
      _builder_1.newLine();
      _builder_1.append("\t ");
      _builder_1.append("first_name string,");
      _builder_1.newLine();
      _builder_1.append("\t ");
      _builder_1.append("last_name string,");
      _builder_1.newLine();
      _builder_1.append("\t ");
      _builder_1.append("hire_dt datetime\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Dependent is total/overlapped Person {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("dependent_no int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("first_name string,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("last_name string");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Salary {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("salary_no int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("salary money,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("from_dt datetime,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("to_dt datetime");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Departament {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("dept_no int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("name string, ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("goals_description string");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Title\t {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("title_no int isIdentifier,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("name string,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("description string,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("from_dt datetime,");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("to_dt datetime\t\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("};");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("Relationships {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Dept_manager [Employee (1:N) relates (1:N) Departament] {from_dt datetime, to_dt datetime}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Dept_emp\t [Employee (1:N) relates (1:N) Departament] {from_dt datetime, to_dt datetime}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Payment \t [Salary (1:N) relates (1:1) Employee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("JobTitle\t [Title (1:N) relates (1:1) Employee]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Dependency\t [Employee (1:1) relates (1:N) Dependent]");
      _builder_1.newLine();
      _builder_1.append("};");
      _builder_1.newLine();
      this.addFile(it, _builder, _builder_1);
    };
    PluginProjectFactory _doubleArrow = ObjectExtensions.<PluginProjectFactory>operator_doubleArrow(_pluginProjectFactory, _function);
    generator.generate(_doubleArrow);
  }
}
