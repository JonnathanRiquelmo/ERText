/**
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.ui.wizard;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.wizard.template.AbstractFileTemplate;
import org.eclipse.xtext.ui.wizard.template.FileTemplate;
import org.eclipse.xtext.ui.wizard.template.IFileGenerator;
import org.eclipse.xtext.ui.wizard.template.StringSelectionTemplateVariable;

@FileTemplate(label = "ERDSL Template", icon = "file_template.png", description = "Create a template file for ERDSl.")
@SuppressWarnings("all")
public final class ERtextFile extends AbstractFileTemplate {
  private final StringSelectionTemplateVariable modelName = this.combo("Template:", new String[] { "Employees", "2", "3" }, "The logical example model");
  
  @Override
  public void generateFiles(final IFileGenerator generator) {
    StringConcatenation _builder = new StringConcatenation();
    String _folder = this.getFolder();
    _builder.append(_folder);
    _builder.append("/");
    String _name = this.getName();
    _builder.append(_name);
    _builder.append(".erdsl");
    StringConcatenation _builder_1 = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = this.modelName.toString().equalsIgnoreCase("Employees");
      if (_equalsIgnoreCase) {
        _builder_1.append("Generate All;");
        _builder_1.newLine();
        _builder_1.append("/*");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("* This is an example model");
        _builder_1.newLine();
        _builder_1.append(" ");
        _builder_1.append("*/");
        _builder_1.newLine();
        _builder_1.append("Domain The_Employees_Sample_Schema;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("Entities {");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Person {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("person_no int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("gender boolean");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Employee is total/overlapped Person {");
        _builder_1.newLine();
        _builder_1.append("\t ");
        _builder_1.append("emp_no int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t ");
        _builder_1.append("birth_dt datetime,");
        _builder_1.newLine();
        _builder_1.append("\t ");
        _builder_1.append("first_name string,");
        _builder_1.newLine();
        _builder_1.append("\t ");
        _builder_1.append("last_name string,");
        _builder_1.newLine();
        _builder_1.append("\t ");
        _builder_1.append("hire_dt datetime\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Dependent is total/overlapped Person {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("dependent_no int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("first_name string,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("last_name string");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Salary {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("salary_no int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("salary money,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("from_dt datetime,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("to_dt datetime");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Departament {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("dept_no int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("name string, ");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("goals_description string");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Title\t {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("title_no int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("name string,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("description string,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("from_dt datetime,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("to_dt datetime\t\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.newLine();
        _builder_1.append("};");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("Relationships {");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Dept_manager [Employee (1:N) relates (1:N) Departament] {from_dt datetime, to_dt datetime}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Dept_emp\t [Employee (1:N) relates (1:N) Departament] {from_dt datetime, to_dt datetime}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Payment \t [Salary (1:N) relates (1:1) Employee]");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("JobTitle\t [Title (1:N) relates (1:1) Employee]");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("Dependency\t [Employee (1:1) relates (1:N) Dependent]");
        _builder_1.newLine();
        _builder_1.append("};");
        _builder_1.newLine();
        _builder_1.newLine();
      } else {
        boolean _equalsIgnoreCase_1 = this.modelName.toString().equalsIgnoreCase("2");
        if (_equalsIgnoreCase_1) {
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.append("Another Template");
          _builder_1.newLine();
          _builder_1.newLine();
          _builder_1.newLine();
        } else {
          boolean _equalsIgnoreCase_2 = this.modelName.toString().equalsIgnoreCase("3");
          if (_equalsIgnoreCase_2) {
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.append("Another Template");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.newLine();
          }
        }
      }
    }
    generator.generate(_builder, _builder_1);
  }
}
