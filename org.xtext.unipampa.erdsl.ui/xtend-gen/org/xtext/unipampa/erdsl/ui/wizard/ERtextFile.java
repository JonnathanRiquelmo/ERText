/**
 * generated by Xtext 2.25.0
 */
package org.xtext.unipampa.erdsl.ui.wizard;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.wizard.template.AbstractFileTemplate;
import org.eclipse.xtext.ui.wizard.template.FileTemplate;
import org.eclipse.xtext.ui.wizard.template.IFileGenerator;
import org.eclipse.xtext.ui.wizard.template.StringSelectionTemplateVariable;

@FileTemplate(label = "ERtext Template", icon = "file_template.png", description = "Create a template file for ERtext.")
@SuppressWarnings("all")
public final class ERtextFile extends AbstractFileTemplate {
  private final StringSelectionTemplateVariable modelName = this.combo("Template:", new String[] { "Template Model" }, "The template model");
  
  @Override
  public void generateFiles(final IFileGenerator generator) {
    StringConcatenation _builder = new StringConcatenation();
    String _folder = this.getFolder();
    _builder.append(_folder);
    _builder.append("/");
    String _name = this.getName();
    _builder.append(_name);
    _builder.append(".erdsl");
    StringConcatenation _builder_1 = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = this.modelName.toString().equalsIgnoreCase("Template Model");
      if (_equalsIgnoreCase) {
        _builder_1.append("/*");
        _builder_1.newLine();
        _builder_1.append("* The template to demonstrate an overview of the grammar. ");
        _builder_1.newLine();
        _builder_1.append("* This does not necessarily displays a semantically correct model regarding to the real world.");
        _builder_1.newLine();
        _builder_1.append("*/");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("Generate All;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("Domain TemplateModel;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("Entities {");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("EntA {");
        _builder_1.newLine();
        _builder_1.append("    \t");
        _builder_1.append("att1 int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("        ");
        _builder_1.append("att2 file");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("                    ");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("/*  The generalization type can be:");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("*   [1] total/disjoint, [2] total/overlapped, [3] partial/disjoint OR [4] partial/overlapped");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("* ");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("* \tAn entity that specializes another should NOT HAVE an IDENTIFIER attribute, as it inherits from the generalized entity.");
        _builder_1.newLine();
        _builder_1.append("    ");
        _builder_1.append("*/");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("EntB is total/disjoint EntA {");
        _builder_1.newLine();
        _builder_1.append("    \t");
        _builder_1.append("att3 string,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("att4 datetime");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("EntC {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("att5 int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("att6 string");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("EntD {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("att7 int isIdentifier,");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("att8 money");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("EntE {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("att9 int isIdentifier");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("};");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("Relationships {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("R1 [EntA (1:N) relates (1:N) EntA] {attr1 int}\t");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("R2 [EntC (1:1) relates (1:1) EntD]");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("R3 [EntD (0:N) relates (1:N) EntC]");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("R4 [R3 (1:1) relates (1:N) EntE] //This is a ternary relationship");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.newLine();
        _builder_1.append("};");
        _builder_1.newLine();
        _builder_1.newLine();
      }
    }
    generator.generate(_builder, _builder_1);
  }
}
